" for vundle

set nocompatible              " 去除VI一致性,必须
filetype off                  " 必须

" 设置包括vundle和初始化相关的runtime path
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" 另一种选择, 指定一个vundle安装插件的路径
"call vundle#begin('~/some/path/here')

" 让vundle管理插件版本,必须
Plugin 'VundleVim/Vundle.vim'

" 以下范例用来支持不同格式的插件安装.
" 请将安装插件的命令放在vundle#begin和vundle#end之间.
" Github上的插件
" 格式为 Plugin '用户名/插件仓库名'
Plugin 'tpope/vim-fugitive'
" 来自 http://vim-scripts.org/vim/scripts.html 的插件
" Plugin '插件名称' 实际上是 Plugin 'vim-scripts/插件仓库名' 只是此处的用户名可以省略
Plugin 'L9'
" 由Git支持但不再github上的插件仓库 Plugin 'git clone 后面的地址'
" Plugin 'git://git.wincent.com/command-t.git'
" 本地的Git仓库(例如自己的插件) Plugin 'file:///+本地插件仓库绝对路径'
" Plugin 'file:///home/gmarik/path/to/plugin'
" 插件在仓库的子目录中.
" 正确指定路径用以设置runtimepath. 以下范例插件在sparkup/vim目录下
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" 安装L9，如果已经安装过这个插件，可利用以下格式避免命名冲突
" Plugin 'ascenator/L9', {'name': 'newL9'}

" 你的所有插件需要在下面这行之前
call vundle#end()            " 必须
filetype plugin indent on    " 必须 加载vim自带和插件相应的语法和文件类型相关脚本
" 忽视插件改变缩进,可以使用以下替代:
"filetype plugin on
"
" 简要帮助文档
" :PluginList       - 列出所有已配置的插件
" :PluginInstall    - 安装插件,追加 `!` 用以更新或使用 :PluginUpdate
" :PluginSearch foo - 搜索 foo ; 追加 `!` 清除本地缓存
" :PluginClean      - 清除未使用插件,需要确认; 追加 `!` 自动批准移除未使用插件
"
" 查阅 :h vundle 获取更多细节和wiki以及FAQ
" 将你自己对非插件片段放在这行之后

" for YouCompleteMe
"  let g:ycm_global_ycm_extra_conf='~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py'
"  set completeopt=longest,menu
"  autocmd InsertLeave * if pumvisible()==0|pclose|endif
"  inoremap <expr><CR>pumvisible()?"\<C-y>":"\<CR>"
"  inoremap <expr><Down>pumvisible()?"\<C-n>":"\<Down>"
"  inoremap <expr><Up>pumvisible()?"\<C-p>":"\<Up>"
"  inoremap <expr><PageDown>pumvisible()?"\<PageDown>\<C-p>\<C-n>":"\<PageDown>"
"  inoremap <expr><PageUp>pumvisible()?"\<PageUp>\<C-p>\<C-n>":"\<PageUp>"
"
"  nnoremap <leader>jd:YcmCompleter GoToDefinitionElseDeclaration<CR>
"  nnoremap <F6>:YcmForceComileAndDiagnostics<CR>
"  " nnoremap <leader>lo:lopen<CR>" open localtionlist
"  " nnoremap <leader>lc:lclose<CR>" close localtionlist
"  inoremap <leader><leader><C-x><C-o>
"  let g:ycm_global_ycm_extra_conf='~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py'
"  let g:ycm_confirm_extra_conf=0
"  let g:ycm_collect_identifiers_from_tags_files=1
"  let g:ycm_collect_identifiers_from_comments_and_string=0
"  let g:ycm_min_num_of_chars_for_completion=2
"  let g:ycm_cache_omnifunc=0
  let g:ycm_seed_identifiers_with_syntax=1 " 开启语义补全
  let g:ycm_complete_in_comments=1 "在注释输入中也能补全
  let g:ycm_complete_in_strings=1 "在字符串输入中也能补全 
"
"
"  " 设置在下面几种格式的文件上屏蔽ycm
    let g:ycm_filetype_blacklist={
      \ 'tagbar' : 1,
      \ 'nerdtree' : 1,
    \}
"
  "youcompleteme 默认tab s-tab 和 ultisnips 冲突
    let g:ycm_key_list_select_completion= [ '<Down>' ]
    let g:ycm_key_list_previous_completion= [ '<Up>' ]
"
"  " 修改对C函数的补全快捷键，默认是CTRL + space，修改为ALT + ;
"    let g:ycm_key_invoke_completion = '<M-;>'
"
"  " SirVer/ultisnips 代码片断
"
"  " Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
"    let g:UltiSnipsExpandTrigger="<tab> "
"    let g:UltiSnipsJumpForwardTrigger="<tab> "
"    let g:UltiSnipsJumpBackwardTrigger="<s-tab> "
"    let g:UltiSnipsListSnippets="<c-e> "
"
"  "定义存放代码片段的文件夹，使用自定义和默认的，将会的到全局，有冲突的会提示
"    let g:UltiSnipsSnippetDirectories=[ "bundle/vim-snippets/UltiSnips" ]


set tags+=~/.vim/tags/cpp_src/tags   " 设置tags搜索路径
syntax on
filetype plugin indent on

map <C-n> :NERDTree<CR>

" pathongen
execute pathogen#infect()

" taglist
let Tlist_Show_One_File=1
let Tlist_Exit_OnlyWindow=1
let Tlist_Use_Right_Window=1
let Tlist_Sort_Type="name"

" omnicppcomplete
set completeopt=longest,menu
let OmniCpp_NamespaceSearch = 2     " search namespaces in the current buffer and in included files
let OmniCpp_ShowPrototypeInAbbr = 1 " 显示函数参数列表
let OmniCpp_MayCompleteScope = 1    " 输入 :: 后自动补全
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]






" 设置Vim的默认显示编码
set encoding=utf-8

" 设置保存新的文件时的编码
set fileencoding=utf-8

" 设置文件的编码列表
set fileencodings=ucs-bom,utf-8,gbk,big5

" 
set fileformats=unix,dos

" 设置消息语言以及编码
language message zh_CN.UTF-8

" 设置菜单的编码
source $VIMRUNTIME/delmenu.vim
set langmenu=zh_CN.UTF-8
source $VIMRUNTIME/menu.vim

set t_Co=256            " 设定配色方案为256色
colorscheme desert     " 设定Vim配色方案

set number                          " 显示行号 
set ruler                           " 显示标尺
"set cursorline                     " 光标当前行高亮
set backspace=indent,eol,start      " 设置退格键的正确效果

set nocompatible          " 去除Vi一致性
set expandtab             " 设置制表符用空格代替
set tabstop=4             " Tab键宽度设置为4
set shiftwidth=4          " 自动缩进的长度
set softtabstop=4         " 统一缩进为4
set autoindent            " 自动对齐
set ai                    " 自动缩进
set cin                   " 开启C缩进
set autoread              " 自动读取
set scrolloff=5           " 光标移动到缓冲区顶部或底部时保持的行数距离
set showcmd               " 显示命令
set mouse=a               " 可以使用鼠标
set nowrap                " 超过一个文本行的文本不在下一个文本行显示
set sidescroll=1          " 水平滚动一次滚动一列
set noswapfile            " 不要交换文件
set foldenable            " 允许折叠
set foldmethod=marker     " 标记折叠
set ignorecase smartcase  " 忽略大小写
" set spell               " in-line spell checker 

" 设置状态行显示内容
set statusline=name=%t\ fenc=%{&fenc}\ format=%{&ff}\ type=%Y\ pos=%l,%v\ %p%%\ %{strftime(\"%m月%d日%H:%M\")}
" 设置总是显示状态行
set laststatus=2    

" 设置<Leader>映射
let mapleader=';' 

" 设置Vim在插入模式和非插入模式的光标形状  gnome-terminal下
if has("autocmd") && !has("gui_running")    " Gvim下不设置，避免冲突
    au InsertEnter * silent execute "!gconftool-2 --type string --set /apps/gnome-terminal/profiles/Default/cursor_shape ibeam"
    au InsertLeave * silent execute "!gconftool-2 --type string --set /apps/gnome-terminal/profiles/Default/cursor_shape block"
endif

" 文件类型自动检等
filetype on
filetype plugin on
filetype plugin indent on

au BufRead,BufNewFile *.md set filetype=md
au BufRead,BufNewFile *.js set filetype=javascript
au BufRead,BufNewFile *.css set filetype=css
au BufRead,BufNewFile *.html set filetype=html
au BufRead,BufNewFile *.studynote set filetype=studynote

syntax enable       "设置语法高亮
syntax on
" HTML, JavaScript等类型文件更改缩进为两个空格
autocmd FileType md setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType tex setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType sql setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType css setlocal shiftwidth=2 tabstop=2 softtabstop=2 
autocmd FileType html setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType studynote setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType javascript setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType htmldjango setlocal shiftwidth=2 tabstop=2 softtabstop=2

" html 自动补全
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags 

function! InsertHtmlTag()
        let pat = '\c<\w\+\s*\(\s\+\w\+\s*=\s*[\-/:''#$;,()."a-z0-9]\+\)*\s*>'
        normal! a>
        let save_cursor = getpos('.')
        let result = matchstr(getline(save_cursor[1]), pat)
        "if (search(pat, 'b', save_cursor[1]) && searchpair('<','','>','bn',0,  getline('.')) > 0)
        let lemon = search(pat, 'b', save_cursor[1])
        if( lemon )
            normal! lyiwf>
            normal! a</
            normal! p
            normal! a>
            normal! k
        endif
        :call cursor(save_cursor[1], save_cursor[2], save_cursor[3])
        if( lemon ) 
            :execute "normal! a\<CR>\<CR>"
               normal! k>>
        endif
endfunction
autocmd FileType md inoremap > <ESC>:call InsertHtmlTag()<CR>a
autocmd FileType html inoremap > <ESC>:call InsertHtmlTag()<CR>a

" for javascript
let b:javascript_fold=1 " 打开 javascript 折叠
let javascript_enable_domhtmlcss=1 " 打开 javascript 对 dom、html、css 的支持



" conceal 设置
let g:tex_conceal = ""

" ----------------- latex-suite 设置 ---------------
let g:Tex_SmartkeyDot=0
let g:tex_flavor='latex'
set grepprg=grep\ -nH\ $*
set iskeyword+=:

" ----------------- tex 新文件设置 -----------------
autocmd BufNewFile *.tex exec ":call SetTexTitle()"
func SetTexTitle()
    call setline(1, "\\input{/home/clown/vim/personaluse-latex/header.tex}")
    call append(line("."), "")
    call append(line(".")+1, "  %\\pagestyle{fancy}")
    call append(line(".")+2, "  %\\fancyhf{}")
    call append(line(".")+3, "  %\\fancyhead[C]{\\heiti\\color{violet}\\bf }")
    call append(line(".")+4, "  %\\fancyfoot[C]{\\heiti\\color{violet}\\bf \\thepage}")
    call append(line(".")+5, "  %\\fancyfoot[R]{\\heiti\\color{violet}\\bf by Clown}")
    call append(line(".")+6, "")
    call append(line(".")+7, "  ")
    call append(line(".")+8, "")
    call append(line(".")+9, "\\input{/home/clown/vim/personaluse-latex/footer.tex}")
endfunc

" ----------------- Cpp 新文件设置 ------------------
autocmd BufNewFile *.cpp exec ":call SetTitle()"

" 定义函数 SetTitle，自动插入文件头
func SetTitle()
    call setline(1, "/*****************************************************")
    call append(line("."),    " * TASK: ".expand("%"))
    call append(line(".")+1,  " * USER: Clown")
    call append(line(".")+2,  " * LANG: C++11")
    call append(line(".")+3,  " * DATE: ".strftime("%c"))
    call append(line(".")+4,  " ****************************************************/")
    call append(line(".")+5,  "")

    call append(line(".")+6,  "#include <bits/stdc++.h>")
    call append(line(".")+7,  "using namespace std;")
    call append(line(".")+8,  "")

    call append(line(".")+9,  "typedef long long LL;")
    call append(line(".")+10, "const int INF = 0x3f3f3f3f;")
    call append(line(".")+11, "const int MOD = 1000000000+7;")
    call append(line(".")+12, "const int MAXN = 100000+10;")
    call append(line(".")+13, "")

    call append(line(".")+14, "int main()")
    call append(line(".")+15, "{")
    call append(line(".")+16, "    ")
    call append(line(".")+17, "    return 0;")
    call append(line(".")+18, "}")

endfunc    

autocmd BufNewFile * normal 18G
autocmd BufNewFile * normal $


" 键盘命令
map <C-a> 1GvG$"+y''
" map <C-S-c> "+y
" map <C-S-v> "+p
nmap <C-d> 0v$h"+yo<Esc>"+p

" C++ 按 F9 编译运行
map <F9> :call CompileRunGpp()<CR>
func! CompileRunGpp()
    exec "w"
    if &filetype == 'cpp'
        exec "!g++ -std=c++11 % -o %<"
        exec "! ./%<"
    endif
endfunc
