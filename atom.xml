<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Clown&#39;s Blog</title>
  
  <subtitle>博客已迁移至 https://me.guanghechen.com/posts/</subtitle>
  <link href="http://littleclown.github.io/atom.xml" rel="self"/>
  
  <link href="http://littleclown.github.io/"/>
  <updated>2019-01-03T02:22:28.625Z</updated>
  <id>http://littleclown.github.io/</id>
  
  <author>
    <name>笑着哭的小丑</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java 中的 Protected 修饰符</title>
    <link href="http://littleclown.github.io/study/codding/programming-language/Java/grammer/keywords/protected/"/>
    <id>http://littleclown.github.io/study/codding/programming-language/Java/grammer/keywords/protected/</id>
    <published>2017-09-11T02:37:52.000Z</published>
    <updated>2019-01-03T02:22:28.625Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ul><li><code>protected</code> 方法的调用是否合法（编译是否通过），关键是要看 调用者所在的类与被调用的 <code>protected</code> 方法所在的类是否在相同的包下，若相同，则合法；否则，不合法。</li><li>在子类内部，任何情况下都可以访问父类的 <code>protected</code> 方法</li></ul><h2 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pacakge p1;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Father1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// package p1;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son1</span> <span class="keyword">extends</span> <span class="title">Father1</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// package p2;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son2</span> <span class="keyword">extends</span> <span class="title">Father1</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// package p1;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Son1 son1 = <span class="keyword">new</span> Son1();</span><br><span class="line">        son1.f();       <span class="comment">// Compile OK.</span></span><br><span class="line"></span><br><span class="line">        Son2 son2 = <span class="keyword">new</span> Son2();</span><br><span class="line">        son2.f();       <span class="comment">// Compile OK.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// package p2;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Son1 son1 = <span class="keyword">new</span> Son1();</span><br><span class="line">        son1.f();       <span class="comment">// Compile Error.</span></span><br><span class="line"></span><br><span class="line">        Son2 son2 = <span class="keyword">new</span> Son2();</span><br><span class="line">        son2.f();       <span class="comment">// Compile Error.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="更有趣的栗子"><a href="#更有趣的栗子" class="headerlink" title="更有趣的栗子"></a>更有趣的栗子</h2><span id="example_1">### $\text{栗}_1$</span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package p1;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyObject1_2</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// package p1;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1_2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyObject1_2 myObject1_2 = <span class="keyword">new</span> MyObject1_2();</span><br><span class="line">        myObject12.clone();     <span class="comment">// Compile Error.</span></span><br><span class="line">        </span><br><span class="line">        Test1_2 test1_2 = <span class="keyword">new</span> Test1_2();</span><br><span class="line">        test1_2.clone();        <span class="comment">// Compile OK.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>这里 `myObject1_2.clone` 是继承自 `Object` 的 `protected` 方法，虽然 `Test1_2` 也是 `Object` 的子类，但是 `Test1_2` 和 `MyObject1_2` 并不存在直接的继承关系，并且由于 `Object` 和 `Test1_2` 不在同一个包中，因此编译不通过。  而由于 `Test1_2` 继承自 `Object`，因此可在 `Test1_2` 内部任意调用从 `Object` 继承来的 `protected` 方法。<span id="more"></span><span id="example_2">### $\text{栗}_2$</span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package p1;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyObject1_3</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//package p2;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyObject2_3</span> <span class="keyword">extends</span> <span class="title">MyObject1_3</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// package p2;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2_3</span> <span class="keyword">extends</span> <span class="title">MyObject1_3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        MyObject1_3 myObject1_3 = <span class="keyword">new</span> MyObject1_3();</span><br><span class="line">        myObject1_3.clone();    <span class="comment">// Compile Error.</span></span><br><span class="line">        </span><br><span class="line">        MyObject2_3 myObject2_3 = <span class="keyword">new</span> MyObject2_3();</span><br><span class="line">        myObject2_3.clone();    <span class="comment">// Compile Error.</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        Test2_3 test2_3 = <span class="keyword">new</span> Test2_3();</span><br><span class="line">        test2_3.clone();        <span class="comment">// Compile OK.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>和 ***[$\text{栗}_1$](#example_1)*** 中不同，`Test2_3` 继承自 `MyObject1_3`，<span id="tmp_asd1">**因此 `main` 中调用的 `clone` 都可追溯到 `MyObject1_3` 所在的包 `p1`**，以此为前提</span>，很容易分析:1. `myObject1_3.clone()`:   > 因为 `Test2_3` 在包 `p2` 下，和 `clone` 所在的包不同，因此编译不通过。2. `myObject2_3.clone()`:    > 虽然 `MyObject2_3` 和 `Test2_3` 在同一个包下，但由 **[前提](#tmp_asd1)** 很容易分析出编译不通过的原因。3. `test2_3.clone()`:   > 在 `Test2_3` 内部调用继承来的 `protected` 方法都是合法的。<span id="example_3">### $\text{栗}_3$</span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package p1;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyObject1_3</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// package p1;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1_3</span> <span class="keyword">extends</span> <span class="title">MyObject1_3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        MyObject1_3 myObject1_3 = <span class="keyword">new</span> MyObject1_3();</span><br><span class="line">        myObject1_3.clone();    <span class="comment">// Compile OK.</span></span><br><span class="line">        </span><br><span class="line">        Test1_3 test1_3 = <span class="keyword">new</span> Test2_3();</span><br><span class="line">        test1_3.clone();        <span class="comment">// Compile OK.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>与 ***[$\text{栗}_2$](#example_2)*** 中不同，`MyObject1_3` 和 `Test1_3` 在一个包下，所以可以调用 `MyObject1_3` 的 `protected` 方法。<span id="example_4">### $\text{栗}_4$</span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package p1;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyObject1_4</span> <span class="keyword">extends</span> <span class="title">Test2_4</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// package p2;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2_4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        MyObject1_4 myObject1_4 = <span class="keyword">new</span> MyObject1_4();</span><br><span class="line">        myObject1_4.clone();    <span class="comment">// Compile OK.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>因为 `MyObject1_4` 的 `clone` 继承自 `Test2_4`，所以 `clone` 方法和 `Test2_4` 在相同的包下，因此编译通过。（注意与 ***[$\text{栗}_1$](#example_1)*** 对比）<span id="example_5">### $\text{栗}_5$</span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package p1;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyObject1_5</span> <span class="keyword">extends</span> <span class="title">Test2_5</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// package p2;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2_5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyObject1_5 myObject1_5 = <span class="keyword">new</span> MyObject1_5();</span><br><span class="line">        myObject1_5.clone();    <span class="comment">// Compile Error.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>与 ***[$\text{栗}_4$](#example_4)*** 不同，`MyObject1_5` 覆盖了父类的 `clone` 方法，因此在调用 `MyObject1_5` 的 `clone` 方法时，实际上是被调用的方法所在的包为 `p1`，而 `Test2_5` 所在的包为 `p2`，因此编译不通过。<h1 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h1><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><em><strong><a href="http://blog.csdn.net/justloveyou_/article/details/61672133">Java 访问权限控制：你真的了解 protected 关键字吗？</a></strong></em></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;protected&lt;/code&gt; 方法的调用是否合法（编译是否通过），关键是要看 调用者所在的类与被调用的 &lt;code&gt;protected&lt;/code&gt; 方法所在的类是否在相同的包下，若相同，则合法；否则，不合法。&lt;/li&gt;
&lt;li&gt;在子类内部，任何情况下都可以访问父类的 &lt;code&gt;protected&lt;/code&gt; 方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;栗子&quot;&gt;&lt;a href=&quot;#栗子&quot; class=&quot;headerlink&quot; title=&quot;栗子&quot;&gt;&lt;/a&gt;栗子&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// pacakge p1;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Father1&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// package p1;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Son1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Father1&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// package p2;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Son2&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Father1&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// package p1;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Test1&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Son1 son1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Son1();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        son1.f();       &lt;span class=&quot;comment&quot;&gt;// Compile OK.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Son2 son2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Son2();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        son2.f();       &lt;span class=&quot;comment&quot;&gt;// Compile OK.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// package p2;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Test2&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Son1 son1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Son1();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        son1.f();       &lt;span class=&quot;comment&quot;&gt;// Compile Error.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Son2 son2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Son2();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        son2.f();       &lt;span class=&quot;comment&quot;&gt;// Compile Error.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;h2 id=&quot;更有趣的栗子&quot;&gt;&lt;a href=&quot;#更有趣的栗子&quot; class=&quot;headerlink&quot; title=&quot;更有趣的栗子&quot;&gt;&lt;/a&gt;更有趣的栗子&lt;/h2&gt;&lt;span id=&quot;example_1&quot;&gt;
### $\text{栗}_1$
&lt;/span&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// package p1;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyObject1_2&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// package p1;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Test1_2&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        MyObject1_2 myObject1_2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MyObject1_2();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        myObject12.clone();     &lt;span class=&quot;comment&quot;&gt;// Compile Error.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Test1_2 test1_2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Test1_2();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        test1_2.clone();        &lt;span class=&quot;comment&quot;&gt;// Compile OK.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
这里 `myObject1_2.clone` 是继承自 `Object` 的 `protected` 方法，虽然 `Test1_2` 也是 `Object` 的子类，但是 `Test1_2` 和 `MyObject1_2` 并不存在直接的继承关系，并且由于 `Object` 和 `Test1_2` 不在同一个包中，因此编译不通过。  
而由于 `Test1_2` 继承自 `Object`，因此可在 `Test1_2` 内部任意调用从 `Object` 继承来的 `protected` 方法。</summary>
    
    
    
    
    <category term="java" scheme="http://littleclown.github.io/tags/java/"/>
    
    <category term="keyword" scheme="http://littleclown.github.io/tags/keyword/"/>
    
    <category term="protected" scheme="http://littleclown.github.io/tags/protected/"/>
    
  </entry>
  
  <entry>
    <title>概率论基础（1）</title>
    <link href="http://littleclown.github.io/study/math/probability-theory/basis/1/"/>
    <id>http://littleclown.github.io/study/math/probability-theory/basis/1/</id>
    <published>2017-04-14T05:59:20.000Z</published>
    <updated>2019-01-03T02:22:28.777Z</updated>
    
    <content type="html"><![CDATA[<h1 id="期望"><a href="#期望" class="headerlink" title="期望"></a>期望</h1><ul><li>设离散型随机变量 $X$ 的分布律为： $\displaystyle P\lbrace X=x_k\rbrace = p_k,\hskip 1em k=1,2,\cdots$。若级数 $\displaystyle \sum_{k=1}^\infty x_kp_k$ 绝对收敛，则称级数 $\displaystyle \sum_{k=1}^\infty x_kp_k$ 为变量 $X$ 的数学期望，记为 $E(X)$，即 $\displaystyle E(X)=\sum_{k=1}^\infty x_kp_k$</li><li>设连续性随机变量 $X$ 的概率密度为： $f(x)$。若积分 $\displaystyle \int_{-\infty}^{+\infty} xf(x)dx$ 绝对收敛，则称积分 $\displaystyle \int_{-\infty}^{+\infty} xf(x)dx$ 的值为随机变量 $X$ 的数学期望，记为 $E(X)$</li></ul><h2 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h2><p>设 $Y$ 是随机变量 $X$ 的连续函数：$Y=g(X)$</p><ul><li>如果 $X$ 是离散型随机变量，它的分布律为 $P\lbrace X=x_k\rbrace = p_k,\hskip 1em k=1,2,\cdots$；若 $\displaystyle \sum_{k=1}^{\infty} g(x_k)p_k$ 绝对收敛，则有<span id="more"></span>$$\displaystyle E(Y)=E\big[g(X)\big]=\sum_{k=1}^{\infty} g(x_k)p_k$$</li><li>如果 $X$ 是连续型随机变量，它的概率密度为 $f(x)$，若 $\displaystyle \int_{-\infty}^{+\infty} g(x)f(x)dx$ 绝对收敛，则有<br>$$\displaystyle E(Y)=E\big[g(X)\big]=\int_{-\infty}^{+\infty} g(x)f(x)dx$$</li></ul><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>设 $C$ 是常数，$X,Y$ 是两个随机变量，</p><ul><li><p>$E(C) = C$</p></li><li><p>$E(CX)=CE(X)$，$E(CY)=CE(Y)$</p></li><li><p>$E(X+Y)=E(X)+E(Y)$</p><ul><li><span id="E-P-4">若 $X$ 和 $Y$ 相互独立，则 $E(XY)=E(X)E(Y)$</span></li></ul><blockquote><p>设二维随机变量 (X,Y) 的概率密度为 $f(x,y)$，其边缘概率密度为 $f_X(x)$，$f_Y(y)$ 所以，<br>\begin{align}<br>  E(X+Y) &amp;= \int_{-\infty}^{+\infty} \int_{-\infty}^{+\infty} (x+y)f(x,y)dxdy \<br>  &amp;= \int_{-\infty}^{+\infty} \int_{-\infty}^{+\infty} xf(x,y)dxdy + \int_{-\infty}^{+\infty} \int_{-\infty}^{+\infty} yf(x,y)dxdy \<br>  &amp;= E(X)+E(Y)<br>\end{align}<br>又若 $X$ 和 $Y$ 相互独立，则<br>\begin{align}<br>  E(XY) &amp;= \int_{-\infty}^{+\infty} \int_{-\infty}^{+\infty} xyf(x,y)dxdy \<br>  &amp;= \int_{-\infty}^{+\infty} \int_{-\infty}^{+\infty} xyf_X(x)f_Y(y)dxdy \<br>  &amp;= \left[ \int_{-\infty}^{+\infty} xf_X(x)dx \right]\left[ \int_{-\infty}^{+\infty} yf_Y(y)dy \right] = E(X)E(Y)<br>\end{align}</p></blockquote></li></ul><h1 id="方差"><a href="#方差" class="headerlink" title="方差"></a>方差</h1><p>设 $X$ 是一个随机变量，若 $E\big\lbrace [X-E(X)]^2 \big\rbrace$ 存在，则称 $E\big\lbrace [X-E(X)]^2 \big\rbrace$ 为 $X$ 的方差，记为 $D(X)$ 或 $Var(X)$。<br>实际上，方差就是随机变量 $X$ 的函数 $g(X)=(X-E(X))^2$ 的数学期望。</p><ul><li>若 $X$ 是一个离散型随机变量，且 $X$ 的分布律为： $\displaystyle P\lbrace X=x_k\rbrace = p_k,\hskip 1em k=1,2,\cdots$。则 $\displaystyle D(X)=\sum_{k=1}^{\infty} \big[ x_k-E(X) \big]^2p_k$</li><li>若 $X$ 是一个连续型随机变量，且 $X$ 的概率密度为： $f(x)$。则 $\displaystyle D(X)=\int_{-\infty}^{+\infty} \big[ x_k-E(X) \big]^2f(x)dx$</li></ul><h2 id="定理-1"><a href="#定理-1" class="headerlink" title="定理"></a>定理</h2><p>设 $X$ 是一个随机变量</p><ul><li><p>$\displaystyle D(X) = E(X^2)-\big[ E(X) \big]^2$</p><blockquote><p>\begin{align}<br>  D(X) &amp;= E\big\lbrace [X-E(X)]^2 \big\rbrace = E\big\lbrace X^2 - 2XE(X) + [E(X)]^2 \big\rbrace \<br>  &amp;= E(X^2) - 2E(X)E(X) + [E(X)]^2 \<br>  &amp;= E(X^2) - [E(X)]^2<br>\end{align}</p></blockquote></li></ul><h2 id="性质-1"><a href="#性质-1" class="headerlink" title="性质"></a>性质</h2><p>设 $C$ 是常数，$X,Y$ 是两个随机变量，</p><ul><li>$D(C)=0$</li><li>$D(CX) = C^2D(X)$，$D(X+C) = D(X)$</li><li>$D(X)=0$ 的充要条件是 $X$ 以概率 1 取常数 $E(X)$，即 $P\big\lbrace X=E(X) \big\rbrace=1$</li><li>$D(X+Y) = D(X)+D(Y)+2E\big\lbrace [X-E(X)][Y-E(Y)] \big\rbrace$<ul><li>若 $X$ 和 $Y$ 相互独立，则 $D(X+Y)=D(X)+D(Y)$<blockquote><p>\begin{align}<br>  D(X+Y) &amp;= E\big\lbrace [(X+Y)-E(X+Y)]^2 \big\rbrace  \<br>  &amp;= E\big\lbrace [(X-E(X))+(Y-E(Y))]^2 \big\rbrace  \<br>  &amp;= E\big\lbrace [X-E(X)]^2\big\rbrace + E\big\lbrace [Y-E(Y)]^2 \big\rbrace + 2E\big\lbrace [X-E(X)][Y-E(Y)] \big\rbrace \<br>  &amp;= D(X)+D(Y) + 2E\big\lbrace [X-E(X)][Y-E(Y)] \big\rbrace \<br>\end{align} 若 $X$ 和 $Y$ 相互独立，则<br>\begin{align}<br>  &amp; E\big\lbrace [X-E(X)][Y-E(Y)] \big\rbrace \<br>  =&amp; E\big\lbrace XY-XE(Y)-YE(X)+E(X)E(Y) \big\rbrace \<br>  =&amp; E\big\lbrace E(XY)-E(X)E(Y)-E(Y)E(X)+E(X)E(Y) \big\rbrace \<br>  =&amp; E\big\lbrace E(XY)-E(X)E(Y) \big\rbrace = 0<br>\end{align} 故 $D(X+Y)= D(X)+D(Y) + 2E\big\lbrace [X-E(X)][Y-E(Y)] \big\rbrace $</p></blockquote></li></ul></li></ul><h1 id="协方差"><a href="#协方差" class="headerlink" title="协方差"></a>协方差</h1><p>$E\big\lbrace [X-E(X)][Y-E(Y)] \big\rbrace$ 称为随机变量 $X$ 和 $Y$ 的协方差，记为 $Cov(X,Y)$，即<br>$$Cov(X,Y)=E\big\lbrace [X-E(X)][Y-E(Y)] \big\rbrace$$ 而 $\displaystyle \rho_{XY} = \frac{Cov(X,Y)}{\sqrt{D(X)}\sqrt{D(Y)}}$ 称为随机变量 $X$ 和 $Y$ 的相关系数</p><h2 id="性质-2"><a href="#性质-2" class="headerlink" title="性质"></a>性质</h2><ul><li>$Cov(X,Y)=Cov(Y,X)$，$Cov(X,X)=D(X)$</li><li>$Cov(X,Y)=E(XY)-E(X)E(Y)$<blockquote><p>\begin{align}<br>  Cov(X,Y) &amp;=E\big\lbrace [X-E(X)][Y-E(Y)] \big\rbrace \<br>  &amp;=E\big\lbrace XY-XE(Y)-YE(X)+E(X)E(Y) \big\rbrace \<br>  &amp;= E(XY)-E(X)E(Y)-E(Y)E(X)+E(X)E(Y) \<br>  &amp;= E(XY)-E(X)E(Y)<br>\end{align}</p></blockquote></li><li>若 $a$ 和 $b$ 是常数，则 $Cov(aX,bY)=abCov(X,Y)$<blockquote><p>$$Cov(aX,bY) = E(aXbY)-E(aX)E(bY) = abE(XY)-abE(X)E(Y) = abCov(X,Y)$$</p></blockquote></li><li>$Cov(X_1+X_2,Y)=Cov(X_1,Y)+Cov(X_2,Y)$ <blockquote><p>\begin{align}<br>  Cov(X,Y) &amp;= E\big\lbrace (X_1+X_2)Y\big\rbrace - E(X_1+X_2)E(Y) \<br>  &amp;= E(X_1Y)+E(X_2Y) - E(X_1)E(Y) - E(X_2)E(Y) \<br>  &amp;= \big\lbrace E(X_1Y)-E(X_1)E(Y) \big\rbrace + \big\lbrace E(X_2Y)-E(X_2)E(Y) \big\rbrace \<br>  &amp;= Cov(X_1,Y)+Cov(X_2,Y)<br>\end{align}</p></blockquote></li></ul><h1 id="矩"><a href="#矩" class="headerlink" title="矩"></a>矩</h1><p>设 $X$ 和 $Y$ 是随机变量，$k\in N^+$</p><ul><li>若 $E(X^k)$ 存在，称它为 $X$ 的 <strong>$k$ 阶原点矩</strong>，简称 <strong>$k$ 阶矩</strong></li><li>若 $E\big\lbrace [X-E(X)]^k \big\rbrace$ 存在，称它为 $X$ 的 <strong>$k$ 阶中心矩</strong></li><li>若 $E(X^kY^l)$ 存在，称它为 <strong>$X$ 和 $Y$ 的 $k+l$ 阶混合矩</strong> </li><li>若 $E\big\lbrace [X-E(X)]^k[Y-E(Y)]^l \big\rbrace$ 存在，称它为 <strong>$X$ 和 $Y$ 的 $k+l$ 阶混合中心矩</strong></li></ul><h1 id="协方差矩阵"><a href="#协方差矩阵" class="headerlink" title="协方差矩阵"></a>协方差矩阵</h1><p>设 $n$ 维随机变量 $(X_1,X_2,\cdots,X_n)$ 的二阶混合中心矩<br>$$c_{ij}=Cov(X_i,X_j)=E\big\lbrace [X_i-E(X_i)][X_j-E(X_j)] \big\rbrace, \hskip 1em i,j\in N^+$$<br>都存在，则称矩阵<br>\begin{align}<br>  \mathbf C=\left(\begin{matrix}<br>    c_{11} &amp; c_{12} &amp; \cdots &amp; c_{1n} \<br>    c_{21} &amp; c_{22} &amp; \cdots &amp; c_{2n} \<br>    \vdots &amp; \vdots &amp;        &amp; \vdots \<br>    c_{n1} &amp; c_{n2} &amp; \cdots &amp; c_{nn} \<br>  \end{matrix}\right)<br>\end{align} 为 $n$ 维随机变量 $(X_1,X_2,\cdots,X_n)$ 的 <strong>协方差矩阵</strong>。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;期望&quot;&gt;&lt;a href=&quot;#期望&quot; class=&quot;headerlink&quot; title=&quot;期望&quot;&gt;&lt;/a&gt;期望&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;设离散型随机变量 $X$ 的分布律为： $\displaystyle P\lbrace X=x_k\rbrace = p_k,\hskip 1em k=1,2,\cdots$。若级数 $\displaystyle \sum_{k=1}^\infty x_kp_k$ 绝对收敛，则称级数 $\displaystyle \sum_{k=1}^\infty x_kp_k$ 为变量 $X$ 的数学期望，记为 $E(X)$，即 $\displaystyle E(X)=\sum_{k=1}^\infty x_kp_k$&lt;/li&gt;
&lt;li&gt;设连续性随机变量 $X$ 的概率密度为： $f(x)$。若积分 $\displaystyle \int_{-\infty}^{+\infty} xf(x)dx$ 绝对收敛，则称积分 $\displaystyle \int_{-\infty}^{+\infty} xf(x)dx$ 的值为随机变量 $X$ 的数学期望，记为 $E(X)$&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;定理&quot;&gt;&lt;a href=&quot;#定理&quot; class=&quot;headerlink&quot; title=&quot;定理&quot;&gt;&lt;/a&gt;定理&lt;/h2&gt;&lt;p&gt;设 $Y$ 是随机变量 $X$ 的连续函数：$Y=g(X)$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 $X$ 是离散型随机变量，它的分布律为 $P\lbrace X=x_k\rbrace = p_k,\hskip 1em k=1,2,\cdots$；若 $\displaystyle \sum_{k=1}^{\infty} g(x_k)p_k$ 绝对收敛，则有</summary>
    
    
    
    
    <category term="学习笔记" scheme="http://littleclown.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="数学" scheme="http://littleclown.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="概率论" scheme="http://littleclown.github.io/tags/%E6%A6%82%E7%8E%87%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>线性代数基础之矩阵(1)</title>
    <link href="http://littleclown.github.io/study/math/linear-algebra/matrix/1/"/>
    <id>http://littleclown.github.io/study/math/linear-algebra/matrix/1/</id>
    <published>2017-03-09T04:18:44.000Z</published>
    <updated>2019-01-03T02:22:28.698Z</updated>
    
    <content type="html"><![CDATA[<p><span id="def1"><strong>【定义1】</strong></span> 由 $m\times n$ 个数 $a_{ij}(i=1,2,\cdots,m;j=1,2,\cdots,n)$ 有序地排成 $m$ 行 $n$ 列的数表<br>\begin{align}<br>  \left(\begin{matrix}<br>    a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n} \<br>    a_{21} &amp; a_{22} &amp; \cdots &amp; a_{2n} \<br>    \vdots &amp; \vdots &amp;        &amp; \vdots \<br>    a_{m1} &amp; a_{m2} &amp; \cdots &amp; a_{mn} \<br>  \end{matrix}\right)<br>\end{align} 称为一个 $m$ 行 $n$ 列的矩阵，简记为 $(a_{ij})_{m\times n}$</p><ul><li>如果两个矩阵有相同的行数和列数，则称他们是 <strong>同型的</strong> </li><li>如果两个同型矩阵 $\mathbf{A}=(a_{ij})<em>{m\times n}$、$\mathbf{B}=(b</em>{ij})<em>{m\times n}$ 的对应元素相同，即<br>$$ a</em>{ij} = b_{ij}, \hskip 2em i=1,2,\cdots,m; \hskip .5em j=1,2,\cdots, n$$<br>则称矩阵 $\mathbf{A}$ 和 $\mathbf{B}$ 相等，记作 $\mathbf{A}=\mathbf{B}$</li></ul><span id="more"></span><h1 id="矩阵的运算"><a href="#矩阵的运算" class="headerlink" title="矩阵的运算"></a>矩阵的运算</h1><h2 id="矩阵的加法和减法"><a href="#矩阵的加法和减法" class="headerlink" title="矩阵的加法和减法"></a>矩阵的加法和减法</h2><p><span id="def2"><strong>【定义2】</strong></span> 设有两个同型的矩阵 $\mathbf{A}=(a_{ij})<em>{m\times n},\mathbf{B}=(b</em>{ij})<em>{m\times n}$，则矩阵<br>\begin{align}<br>  \mathbf{C}&amp;=(c</em>{ij})<em>{m\times n}=(a</em>{ij}+b_{ij})<em>{m\times n} \<br>  &amp;=\left(\begin{matrix}<br>    a</em>{11}+b_{11} &amp; a_{11}+b_{11} &amp; \cdots &amp; a_{11}+b_{1n} \<br>    a_{21}+b_{21} &amp; a_{22}+b_{22} &amp; \cdots &amp; a_{2n}+b_{2n} \<br>    \vdots        &amp; \vdots        &amp;        &amp; \vdots        \<br>    a_{m1}+b_{11} &amp; a_{m2}+b_{m2} &amp; \cdots &amp; a_{mn}+b_{mn} \<br>  \end{matrix}\right)<br>\end{align} 称为矩阵 $\mathbf{A}$ 和 $\mathbf{A}$ 的和，记为 $\mathbf{C}=\mathbf{A}+\mathbf{B}$</p><h3 id="矩阵加法的性质"><a href="#矩阵加法的性质" class="headerlink" title="矩阵加法的性质"></a>矩阵加法的性质</h3><ul><li>交换律：$\mathbf{A}+\mathbf{B}=\mathbf{B}+\mathbf{A}$</li><li>结合律：$(\mathbf{A}+\mathbf{B})+\mathbf{C}=\mathbf{A}+(\mathbf{B}+\mathbf{C})$</li><li>加法零元 $\mathbf{O}$：$\mathbf{A}+\mathbf{O}=\mathbf{O}$ </li></ul><h2 id="矩阵的数乘"><a href="#矩阵的数乘" class="headerlink" title="矩阵的数乘"></a>矩阵的数乘</h2><p><span id="def3"><strong>【定义3】</strong></span> 矩阵 $\mathbf{A}=(a_{ij})<em>{m\times n}$，$\lambda$ 为常数，则矩阵 $(\lambda a</em>{ij})<em>{m\times n}$ 称为数 $\lambda$ 与矩阵 $\mathbf{A}$ 的乘积（简称 <strong>数乘</strong>），记为 $\lambda \mathbf{A}$，即<br>\begin{align}<br>  \lambda\mathbf{A} = (\lambda a</em>{ij})<em>{m\times n} = \left(\begin{matrix}<br>    \lambda a</em>{11} &amp; \lambda a_{12} &amp; \cdots &amp; \lambda a_{1n} \<br>    \lambda a_{21} &amp; \lambda a_{22} &amp; \cdots &amp; \lambda a_{2n} \<br>    \vdots         &amp; \vdots         &amp;        &amp; \vdots         \<br>    \lambda a_{m1} &amp; \lambda a_{m2} &amp; \cdots &amp; \lambda a_{mn} \<br>  \end{matrix}\right)<br>\end{align}</p><h3 id="矩阵数乘的性质"><a href="#矩阵数乘的性质" class="headerlink" title="矩阵数乘的性质"></a>矩阵数乘的性质</h3><ul><li>交换律及结合律：$(\lambda\mu)\mathbf{A}=\lambda(\mu\mathbf{A})=\mu(\lambda\mathbf{A})$</li><li>分配率：$\lambda(\mathbf{A}+\mathbf{B})=\lambda\mathbf{A}+\lambda\mathbf{B}$，$(\lambda+\mu)\mathbf{A}=\lambda\mathbf{A}+\mu\mathbf{A}$</li><li>乘法零元：$1\cdot\mathbf{A}=\mathbf{A}$，$(-1)\cdot \mathbf{A}=-\mathbf{A}$</li></ul><h2 id="矩阵乘法"><a href="#矩阵乘法" class="headerlink" title="矩阵乘法"></a>矩阵乘法</h2><p><span id="def4"><strong>【定义4】</strong></span> 设矩阵 $\mathbf{A}=(a_{ij})<em>{m\times t}$，$\mathbf{B}=(b</em>{ij})<em>{t\times n}$，称 $\mathbf{C}=(c</em>{ij})<em>{m\times n}$ 是 $\mathbf{A}$ 和 $\mathbf{B}$ 的乘积，若<br>\begin{align}<br>  \mathbf{C} = \mathbf{A}\mathbf{B} = \left(\begin{matrix}<br>    a</em>{11} &amp; a_{12} &amp; \cdots &amp; a_{1t} \<br>    a_{21} &amp; a_{22} &amp; \cdots &amp; a_{2t} \<br>    \vdots &amp; \vdots &amp;        &amp; \vdots \<br>    a_{m1} &amp; a_{m2} &amp; \cdots &amp; a_{mt} \<br>  \end{matrix}\right)<em>{m\times t}<br>  \left(\begin{matrix}<br>    b</em>{11} &amp; b_{12} &amp; \cdots &amp; b_{1s} \<br>    b_{21} &amp; b_{22} &amp; \cdots &amp; b_{2s} \<br>    \vdots &amp; \vdots &amp;        &amp; \vdots \<br>    b_{t1} &amp; b_{t2} &amp; \cdots &amp; b_{ts} \<br>  \end{matrix}\right)<em>{t\times s}<br>  = \sum</em>{i=1}^m\sum_{j=1}^n\sum_{k=1}^t a_{ik}b_{kj}<br>\end{align}</p><h3 id="矩阵乘法的性质"><a href="#矩阵乘法的性质" class="headerlink" title="矩阵乘法的性质"></a>矩阵乘法的性质</h3><ul><li>结合律：$(\mathbf{A}\mathbf{B})\mathbf{C}=\mathbf{A}(\mathbf{B}\mathbf{C})$</li><li>分配率：$\mathbf{A}(\mathbf{B}+\mathbf{C})=\mathbf{A}\mathbf{B}+\mathbf{A}\mathbf{C}$，$(\mathbf{B}+\mathbf{C})\mathbf{A}=\mathbf{B}\mathbf{A}+\mathbf{C}\mathbf{A}$</li><li>$(\lambda\mathbf{A})\mathbf{B}=\mathbf{A}(\lambda\mathbf{B})=\lambda(\mathbf{A}\mathbf{B})$（其中 $\lambda$ 为常数）</li></ul><h2 id="矩阵的转置"><a href="#矩阵的转置" class="headerlink" title="矩阵的转置"></a>矩阵的转置</h2><p><span id="def5"><strong>【定义5】</strong></span> $\mathbf A^T$ 为矩阵 $\mathbf A$ 的转置矩阵，若<br>\begin{align}<br>  A=\left(\begin{matrix}<br>    a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n} \<br>    a_{21} &amp; a_{22} &amp; \cdots &amp; a_{2n} \<br>    \vdots &amp; \vdots &amp;        &amp; \vdots \\<br>    a_{m1} &amp; a_{m2} &amp; \cdots &amp; a_{mn} \<br>  \end{matrix}\right)<em>{m\times n}<br>  , \hskip 1em<br>  \mathbf A^T=\left(\begin{matrix}<br>    a</em>{11} &amp; a_{21} &amp; \cdots &amp; a_{n1} \<br>    a_{12} &amp; a_{22} &amp; \cdots &amp; a_{n2} \<br>    \vdots &amp; \vdots &amp;        &amp; \vdots \\<br>    a_{1n} &amp; a_{2n} &amp; \cdots &amp; a_{nm} \<br>  \end{matrix}\right)_{n\times m}<br>\end{align}</p><h3 id="矩阵转置的性质"><a href="#矩阵转置的性质" class="headerlink" title="矩阵转置的性质"></a>矩阵转置的性质</h3><ul><li>$(\mathbf A^T)^T=\mathbf A$</li><li>$(\mathbf A\pm\mathbf B)^T=\mathbf A^T\pm\mathbf B^T$</li><li>$(\lambda\mathbf A)^T=\lambda\mathbf A$</li><li>$(\mathbf A\mathbf B)^T=\mathbf B^T\mathbf A^T$</li><li>$(\mathbf A_1\mathbf A_2\cdots\mathbf A_m)^T=\mathbf A_m^T\mathbf A_{m-1}^T\cdots A_1^T$</li></ul><h1 id="方阵"><a href="#方阵" class="headerlink" title="方阵"></a>方阵</h1><p>若 $m=n$，则称矩阵 $\mathbf A_{m\times n}$ 为 $n$ 阶方阵</p><h2 id="方阵的性质"><a href="#方阵的性质" class="headerlink" title="方阵的性质"></a>方阵的性质</h2><p>方阵 $\mathbf A$ 构成的行列式记为 <strong>$|\mathbf A|$</strong> 或 <strong>$\det(\mathbf A)$</strong></p><ul><li>$\mathbf A^m=\mathbf A\cdot\mathbf A\cdot \dotsc \cdot\mathbf A$</li><li>$|\lambda\mathbf A|=\lambda^n|\mathbf A|$</li><li>$|\mathbf A\mathbf B|=|\mathbf A||\mathbf B|$</li><li>$|\mathbf A^m|=|\mathbf A|^m$<br>其中，$\mathbf A$ 和 $\mathbf B$ 均为 $n$ 阶方阵，$\lambda$ 为常数，$m,n$ 为正整数<h2 id="n-阶单位方阵"><a href="#n-阶单位方阵" class="headerlink" title="n 阶单位方阵"></a>n 阶单位方阵</h2>若 $n$ 阶方阵 $\mathbf E_n$ 主对角线上的元素全为 1，且其余元素全为 0；则称 $E_n$ 为 $n$ 阶单位矩阵，即<br>\begin{align}<br>\mathbf E_n=\left(\begin{matrix}<br>  1      &amp; 0      &amp; \cdots &amp; 0      \<br>  0      &amp; 1      &amp; \cdots &amp; 0      \<br>  \vdots &amp; \vdots &amp; \ddots &amp; \vdots \<br>  0      &amp; 0      &amp;  0     &amp; 1      \<br>\end{matrix}\right)_{n\times n}<br>\end{align}<h3 id="单位方阵的性质"><a href="#单位方阵的性质" class="headerlink" title="单位方阵的性质"></a>单位方阵的性质</h3>若 $\mathbf A(m\times n)$ 为 $m$ 行 $n$ 列的矩阵，$E_m$ 和 $E_n$ 分别为 $m$ 阶和 $n$ 阶单位方阵</li><li>$\mathbf A_{m\times n}E_n=\mathbf A_{m\times n}$</li><li>$E_m\mathbf A_{m\times n}=\mathbf A_{m\times n}$</li></ul><h2 id="对角矩阵"><a href="#对角矩阵" class="headerlink" title="对角矩阵"></a>对角矩阵</h2><p>\begin{align}<br>  \left(\begin{matrix}<br>    a_{11} &amp; 0      &amp; \cdots &amp; 0      \<br>    0      &amp; a_{22} &amp; \cdots &amp; 0      \<br>    \vdots &amp; \vdots &amp; \ddots &amp; \vdots \<br>    0      &amp; 0      &amp; \cdots &amp; a_{nn} \<br>  \end{matrix}\right)_{n\times n}<br>\end{align}</p><h2 id="三角形矩阵"><a href="#三角形矩阵" class="headerlink" title="三角形矩阵"></a>三角形矩阵</h2><p>\begin{align}<br>  \begin{matrix}<br>    \left(\begin{matrix}<br>      a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n} \<br>      0      &amp; a_{22} &amp; \cdots &amp; 0      \<br>      \vdots &amp; \vdots &amp; \ddots &amp; \vdots \<br>      0      &amp; 0      &amp; \cdots &amp; a_{nn} \<br>    \end{matrix}\right)<em>{n\times n}<br>    &amp; \text{或} &amp;<br>    \left(\begin{matrix}<br>      a</em>{11} &amp; a_{12} &amp; \cdots &amp; 0      \<br>      a_{21} &amp; a_{22} &amp; \cdots &amp; 0      \<br>      \vdots &amp; \vdots &amp; \ddots &amp; \vdots \<br>      a_{n1} &amp; a_{n2} &amp; \cdots &amp; a_{nn} \<br>    \end{matrix}\right)_{n\times n}<br>    \\ \color{purple}{上三角矩形} &amp; \hskip 0em &amp; \color{purple}{下三角矩形}<br>  \end{matrix}<br>\end{align}</p><h2 id="对称矩阵"><a href="#对称矩阵" class="headerlink" title="对称矩阵"></a>对称矩阵</h2><p>\begin{align}<br>  \left(\bcancel{\begin{matrix}<br>    \nvdash<br>    a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n} \<br>    \hdashline<br>    a_{12} &amp; a_{22} &amp; \cdots &amp; a_{2n} \<br>    \vdots &amp; \vdots &amp; \ddots &amp; \vdots \<br>    a_{1n} &amp; a_{2n} &amp; \cdots &amp; a_{nn} \<br>  \end{matrix}}\right)<br>\end{align}</p><h2 id="反对称矩阵"><a href="#反对称矩阵" class="headerlink" title="反对称矩阵"></a>反对称矩阵</h2><p>\begin{align}<br>  \left(\begin{matrix}<br>  \end{matrix}\right)<br>\end{align}</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;span id=&quot;def1&quot;&gt;&lt;strong&gt;【定义1】&lt;/strong&gt;&lt;/span&gt; 由 $m\times n$ 个数 $a_{ij}(i=1,2,\cdots,m;j=1,2,\cdots,n)$ 有序地排成 $m$ 行 $n$ 列的数表&lt;br&gt;\begin{align}&lt;br&gt;  \left(\begin{matrix}&lt;br&gt;    a_{11} &amp;amp; a_{12} &amp;amp; \cdots &amp;amp; a_{1n} \&lt;br&gt;    a_{21} &amp;amp; a_{22} &amp;amp; \cdots &amp;amp; a_{2n} \&lt;br&gt;    \vdots &amp;amp; \vdots &amp;amp;        &amp;amp; \vdots \&lt;br&gt;    a_{m1} &amp;amp; a_{m2} &amp;amp; \cdots &amp;amp; a_{mn} \&lt;br&gt;  \end{matrix}\right)&lt;br&gt;\end{align} 称为一个 $m$ 行 $n$ 列的矩阵，简记为 $(a_{ij})_{m\times n}$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果两个矩阵有相同的行数和列数，则称他们是 &lt;strong&gt;同型的&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;如果两个同型矩阵 $\mathbf{A}=(a_{ij})&lt;em&gt;{m\times n}$、$\mathbf{B}=(b&lt;/em&gt;{ij})&lt;em&gt;{m\times n}$ 的对应元素相同，即&lt;br&gt;$$ a&lt;/em&gt;{ij} = b_{ij}, \hskip 2em i=1,2,\cdots,m; \hskip .5em j=1,2,\cdots, n$$&lt;br&gt;则称矩阵 $\mathbf{A}$ 和 $\mathbf{B}$ 相等，记作 $\mathbf{A}=\mathbf{B}$&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="数学" scheme="http://littleclown.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="线性代数" scheme="http://littleclown.github.io/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
    <category term="矩阵" scheme="http://littleclown.github.io/tags/%E7%9F%A9%E9%98%B5/"/>
    
  </entry>
  
  <entry>
    <title>线性代数基础之行列式</title>
    <link href="http://littleclown.github.io/study/math/linear-algebra/Study-Math-LinearAlgebra-1/"/>
    <id>http://littleclown.github.io/study/math/linear-algebra/Study-Math-LinearAlgebra-1/</id>
    <published>2017-03-08T05:47:43.000Z</published>
    <updated>2019-01-03T02:22:28.703Z</updated>
    
    <content type="html"><![CDATA[<h1 id="逆序数"><a href="#逆序数" class="headerlink" title="逆序数"></a>逆序数</h1><p><span id="def1"><strong>【定义1】</strong></span> $n$ 级排列 $i_1i_2\cdots i_n$ 的逆序数记为 $\tau(i_1i_2\cdots i_n)$。<br>比如，$\tau(123)=0$，而 $\tau(321)=3$，因为 32,31,21 是逆序，共 3 对。</p><ul><li>若 $\tau(i_1i_2\cdots i_n) \equiv 0\mod 2$ 则称为 <strong>偶排列</strong>；否则称为 <strong>奇排列</strong></li></ul><p><span id="theory1"><strong>【定理1】</strong></span> 若互换排列 $i_1i_2\cdots i_n$ 中两个数 $i_x$ 和 $i_y$ 的位置（不妨假设 $x&lt;y$），则<br>  $$\tau(i_1i_2\cdots i_x\cdots i_y\cdots i_n) \not\equiv \tau(i_1i_2\cdots i_y\cdots i_x\cdots i_n) \mod 2 \tag{1}$$</p><blockquote><ul><li>当 $y=x+1$ 时，也就是相邻两个数进行对换，由于和其它数的相对顺序没有发生改变；此时 <strong><a href="#theory1">定理1</a></strong> 成立</li><li>当 $y=x+k$ （其中 $k&gt;1$ 且 $k \in Z^+$）时，可以理解成：</li></ul></blockquote><ul><li>$i_y$ 先和 $i_{y-1}$ 交换，随之和 $i_{y-2}$ 交换，直到和 $i_{x}$ 交换，此时 $i_y$ 一共发生了 $y-x$ 次交换，且 $i_x$ 位于交换前 $i_{x+1}$ 的位置</li><li>然后 $i_x$ 和 $i_{x+1}$ 交换，直到和 $i_{y-1}$ 交换，一共交换了 $y-1-x$ 次</li></ul><blockquote><p>不难发现这样交换的结果和直接让 $i_x$ 和 $i_y$ 交换是一样的，相当于进行了 $(y-x)+(y-1-x)=2\times(y-x)-1$ 次相邻交换，而每次相邻交换 $\tau$ 的奇偶性都会发生改变（前述已经证明），故等价于 $(2\times(y-x)-1)\mod 2$ 次相邻交换<br>  综上，即可证明 <strong><a href="#theory1">定理1</a></strong></p></blockquote><span id="more"></span><h1 id="n-阶行列式"><a href="#n-阶行列式" class="headerlink" title="n 阶行列式"></a>n 阶行列式</h1><p><span id="def2"><strong>【定义2】</strong></span> 设 $n(\geqslant 2)$ 为自然数，由 $n^2$ 个数 $a_{ij}(i,j=1,2,\cdots,n)$ 组成的记号<br>\begin{align}<br>  D=\left| \begin{matrix}<br>    a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n} \<br>    a_{21} &amp; a_{22} &amp; \cdots &amp; a_{2n} \<br>    \vdots &amp; \vdots &amp; \ddots &amp; \vdots \<br>    a_{n1} &amp; a_{n2} &amp; \cdots &amp; a_{nn} \<br>  \end{matrix} \right|<br>\end{align}<br>称为一个 $n$ 阶行列式，其中 $a_{ij}$ 称为第 $i$ 行第 $j$ 列的元素。<br>行列式的值等于所有取值不同行不同列的 $n$ 个元素乘积的代数和：<br><span id="cal2"></span>$$D=\sum_{(j_1j_2\cdots j_n)} (-1)^{\tau(j_1j_2\cdots j_n)} a_{1j_1}a_{2j_2}\cdots a_{nj_n} \tag{2}$$<br>其中，$j_1j_2\cdots j_n$ 为 $n$ 级排列，$\sum_{(j_1j_2\cdots j_n)}$ 表示对所有的 $n$ 级排列求和。</p><p><span id="theory2"><strong>【定理2】</strong></span> <strong><a href="#cal2">式(2)</a></strong> 也可以写成<br><span id="cal3"></span><br>$$D=\sum_{(j_1j_2\cdots j_n)} (-1)^{\tau(i_1i_2\cdots i_n)+\tau(j_1j_2\cdots j_n)} a_{i_1j_1}a_{i_2j_2}\cdots a_{i_nj_n} \tag{3}$$</p><blockquote><p>将 $a_{i_1j_1}a_{i_2j_2}\cdots a_{i_nj_n}$ 重排成 $a_{1j’<em>1}a</em>{2j’<em>2}\cdots a</em>{nj’_n}$。<br>  该过程可以认为是发生了若干次交换；而每发生一次交换，排列 $i_1i_2\cdots i_n$ 和 $j_1j_2\cdots j_n$ 同时发生一次交换，而由 <strong><a href="#theory1">定理1</a></strong> 可知，每次交换，$\tau$ 的奇偶性就会发生改变，故 $\tau(i_1i_2\cdots i_n)+\tau(j_1j_2\cdots j_n)$ 的奇偶性不会改变。<br>  于是不难有 $$(-1)^{\tau(i_1i_2\cdots i_n)+\tau(j_1j_2\cdots j_n)} = (-1)^{\tau(12\cdots n)+\tau(j’_1j’_2\cdots j’_n)} = (-1)^{\tau(j’_1j’_2\cdots j’_n)}$$<br>  由乘法交换律和加法交换律即可证明 <strong><a href="#theory2">定理2</a></strong> 的正确性</p></blockquote><p><span id="deduction1"><strong>【推论1】</strong></span><br><span id="cal3-1"></span><br>$$D=\sum_{(j_1j_2\cdots j_n)} (-1)^{\tau(i_1i_2\cdots i_n)} a_{i_11}a_{i_22}\cdots a_{i_nn} \tag{3-1}$$</p><h1 id="行列式的性质"><a href="#行列式的性质" class="headerlink" title="行列式的性质"></a>行列式的性质</h1><p><span id="property1"><strong>【性质1】</strong></span> 将 $n$ 阶行列式 $D$ 的行和列互换，其值不变。即若<br>\begin{align}<br>  D=\left| \begin{matrix}<br>    a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n} \<br>    a_{21} &amp; a_{22} &amp; \cdots &amp; a_{2n} \<br>    \vdots &amp; \vdots &amp; \ddots &amp; \vdots \<br>    a_{n1} &amp; a_{n2} &amp; \cdots &amp; a_{nn} \<br>  \end{matrix} \right|<br>  \text{，}\hskip 2em<br>  D^T=\left| \begin{matrix}<br>    a_{11} &amp; a_{21} &amp; \cdots &amp; a_{n1} \<br>    a_{12} &amp; a_{22} &amp; \cdots &amp; a_{n2} \<br>    \vdots &amp; \vdots &amp; \ddots &amp; \vdots \<br>    a_{1n} &amp; a_{2n} &amp; \cdots &amp; a_{nn} \<br>  \end{matrix} \right|<br>\end{align}<br>则 $D=D^T$，且称 $D^T$ 为行列式 $D$ 的 <strong>转置</strong>。</p><blockquote><p>由 <strong><a href="#cal2">式2</a></strong> 及 <strong><a href="#cal3-1">式3-1</a></strong> 即可得证</p></blockquote><p><span id="property2"><strong>【性质2】</strong></span> 互换 $n$ 阶行列式的任意两行（列），行列式仅改变符号，即<br>\begin{align}<br>  \left| \begin{matrix}<br>    a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n} \<br>    \vdots &amp; \vdots &amp;        &amp; \vdots \<br>    a_{i1} &amp; a_{i2} &amp; \cdots &amp; a_{in} \<br>    \vdots &amp; \vdots &amp;        &amp; \vdots \<br>    a_{k1} &amp; a_{k2} &amp; \cdots &amp; a_{kn} \<br>    \vdots &amp; \vdots &amp;        &amp; \vdots \<br>    a_{n1} &amp; a_{n2} &amp; \cdots &amp; a_{nn} \<br>  \end{matrix} \right|<br>  = -\left| \begin{matrix}<br>    a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n} \<br>    \vdots &amp; \vdots &amp;        &amp; \vdots \<br>    a_{k1} &amp; a_{k2} &amp; \cdots &amp; a_{kn} \<br>    \vdots &amp; \vdots &amp;        &amp; \vdots \<br>    a_{i1} &amp; a_{i2} &amp; \cdots &amp; a_{in} \<br>    \vdots &amp; \vdots &amp;        &amp; \vdots \<br>    a_{n1} &amp; a_{n2} &amp; \cdots &amp; a_{nn} \<br>  \end{matrix} \right|<br>\end{align}<br><span id="deduction2"><strong>【推论2】</strong></span> 若行列式中某两行（列）的元素对应相等，则行列式为 0<br><span id="property3"><strong>【性质3】</strong></span> 行列式的某一行（列）的所有元素同乘以一个数 $\lambda$，等于以 $\lambda$ 乘以这整个行列式，即<br>\begin{align}<br>  \left| \begin{matrix}<br>    a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n} \<br>    \vdots &amp; \vdots &amp;        &amp; \vdots \<br>    \lambda a_{i1} &amp; \lambda a_{i2} &amp; \cdots &amp; \lambda a_{in} \<br>    \vdots &amp; \vdots &amp;        &amp; \vdots \<br>    a_{n1} &amp; a_{n2} &amp; \cdots &amp; a_{nn} \<br>  \end{matrix} \right|<br>  = \lambda\left| \begin{matrix}<br>    a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n} \<br>    \vdots &amp; \vdots &amp;        &amp; \vdots \<br>    a_{i1} &amp; a_{i2} &amp; \cdots &amp; a_{in} \<br>    \vdots &amp; \vdots &amp;        &amp; \vdots \<br>    a_{n1} &amp; a_{n2} &amp; \cdots &amp; a_{nn} \<br>  \end{matrix} \right|<br>\end{align}<br><span id="deduction3"><strong>【推论3】</strong></span> 若行列式中某两行（列）的元素对应成比例，则行列式为 0<br><span id="deduction4"><strong>【推论4】</strong></span> 若行列式中某行（列）的元素全为 0，则该行列式为 0<br><span id="property4"><strong>【性质4】</strong></span> 若行列式的某行（列）的各元素是两个数之和，则该行列式等于两个行列式之和，而这两个行列式除了这一行（列）以外，与原行列式的对应行（列）一样，即<br>\begin{align}<br>  \left| \begin{matrix}<br>    a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n} \<br>    \vdots &amp; \vdots &amp;        &amp; \vdots \<br>    a_{i1}+a’<em>{i1} &amp; a</em>{i2}+a’<em>{i2} &amp; \cdots &amp; a</em>{in}+a’<em>{in} \<br>    \vdots &amp; \vdots &amp;        &amp; \vdots \<br>    a</em>{n1} &amp; a_{n2} &amp; \cdots &amp; a_{nn} \<br>  \end{matrix} \right|<br>  =<br>  \left| \begin{matrix}<br>    a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n} \<br>    \vdots &amp; \vdots &amp;        &amp; \vdots \<br>    a_{i1} &amp; a_{i2} &amp; \cdots &amp; a_{in} \<br>    \vdots &amp; \vdots &amp;        &amp; \vdots \<br>    a_{n1} &amp; a_{n2} &amp; \cdots &amp; a_{nn} \<br>  \end{matrix} \right|<br>  +<br>  \left| \begin{matrix}<br>    a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n} \<br>    \vdots &amp; \vdots &amp;        &amp; \vdots \<br>    a’<em>{i1} &amp; a’</em>{i2} &amp; \cdots &amp; a’<em>{in} \<br>    \vdots &amp; \vdots &amp;        &amp; \vdots \<br>    a</em>{n1} &amp; a_{n2} &amp; \cdots &amp; a_{nn} \<br>  \end{matrix} \right|<br>\end{align}<br><span id="property5"><strong>【性质5】</strong></span> 若行列式的某行（列）的各元素乘以 $\lambda$ 后，加到另一行（列）的对应元素上，行列式的值不变，即<br>\begin{align}<br>  \left| \begin{matrix}<br>    a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n} \<br>    \vdots &amp; \vdots &amp;        &amp; \vdots \<br>    a_{i1} &amp; a_{i2} &amp; \cdots &amp; a_{in} \<br>    \vdots &amp; \vdots &amp;        &amp; \vdots \<br>    a_{k1} &amp; a_{k2} &amp; \cdots &amp; a_{kn} \<br>    \vdots &amp; \vdots &amp;        &amp; \vdots \<br>    a_{n1} &amp; a_{n2} &amp; \cdots &amp; a_{nn} \<br>  \end{matrix} \right|<br>  = \left| \begin{matrix}<br>    a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n} \<br>    \vdots &amp; \vdots &amp;        &amp; \vdots \<br>    a_{i1} &amp; a_{i2} &amp; \cdots &amp; a_{in} \<br>    \vdots &amp; \vdots &amp;        &amp; \vdots \<br>    a_{k1}+\lambda a_{i_1} &amp; a_{k2}+\lambda a_{i_2} &amp; \cdots &amp; a_{kn}+\lambda a_{i_n} \<br>    \vdots &amp; \vdots &amp;        &amp; \vdots \<br>    a_{n1} &amp; a_{n2} &amp; \cdots &amp; a_{nn} \<br>  \end{matrix} \right|<br>\end{align}</p><h1 id="行列式的计算"><a href="#行列式的计算" class="headerlink" title="行列式的计算"></a>行列式的计算</h1><h2 id="拉普拉斯展开定理"><a href="#拉普拉斯展开定理" class="headerlink" title="拉普拉斯展开定理"></a>拉普拉斯展开定理</h2><p><span id="def3"><strong>【定义3】（余子式）</strong></span> 在 $n$ 阶行列式中，把元素 $a_{ij}(i,j=1,2,\cdots,n)$ 所在的行和列划去后，剩下的 $(n-1)^2$ 个元素按原来的顺序构成的 $n-1$ 阶行列式<br>\begin{align}<br>  \left| \begin{matrix}<br>    a_{11} &amp; \cdots &amp; a_{i,j-1} &amp; a_{i,j+1} &amp; \cdots &amp; a_{1n} \<br>    \vdots &amp;        &amp; \vdots &amp; \vdots &amp;        &amp; \vdots \<br>    a_{i-1,1} &amp; \cdots &amp; a_{i-1,,j-1} &amp; a_{i-1,j+1} &amp; \cdots &amp; a_{i-1,n} \<br>    a_{i+1,1} &amp; \cdots &amp; a_{i+1,,j-1} &amp; a_{i+1,j+1} &amp; \cdots &amp; a_{i+1,n} \<br>    \vdots &amp;        &amp; \vdots &amp; \vdots &amp;        &amp; \vdots \<br>    a_{n1} &amp; \cdots &amp; a_{n,j-1} &amp; a_{n,j+1} &amp; \cdots &amp; a_{nn} \<br>  \end{matrix} \right|<br>\end{align}<br>称为元素 $a_{ij}$ 的 <strong>余子式</strong>，记作 $M_{ij}$；<br>余子式带上符号 $(-1)^{i+j}$ 称为 $a_{ij}$ 的 <strong>代数余子式</strong>，记作 $A_{ij}=(-1)^{i+j}M_{ij}$</p><p><span id="theory3"><strong>【定理3】 （拉普拉斯(Laplace)展开定理）</strong></span> $n$ 阶行列式等于它的任一行（列）的各元素与其对应的代数余子式乘积之和，即<br><span id="cal4-"></span> \begin{align}<br>  D=\sum_{k=1}^n a_{ik}A_{ik}, \hskip 2em i=1,2,3,\cdots,n \tag{4-1} \<br>  D=\sum_{k=1}^n a_{kj}A_{kj}, \hskip 2em j=1,2,3,\cdots,n \tag{4-2} \<br>\end{align}</p><blockquote><ul><li>当 $n=1,2$ 时定理显然成立</li><li>当 $n&gt;2$ 时（方便起见，用 $n$ 维向量来证明，仅用到向量的定义和向量的点乘），<span style="color: red;">为区分行列式符号及行列式值，以下使用 $\det D$ 表示行列式 $D$ 的值</span><br>记 $e_i=(\overbrace{0,0,\cdots}^{i-1\text{个}0},1,\underbrace{\cdots,0}<em>{n-i\text{个}0})^T$，$a_i=a</em>{11}e_1+a_{21}e_2+\cdots+a_{n1}e_n$</li></ul></blockquote><ul><li><span id="lemma3-1"><strong>【引理3-1】</strong></span> 若 $a_1=e_1$，则 $\det D=\det M_{11}$<ul><li>由于 $a_{11}=1,a_{1k}=0,k\neq 1$；结合 <strong><a href="#cal2">式2</a></strong> 有，<br>\begin{align}<br>\det D&amp;=\sum_{(j_1j_2\cdots j_n)} (-1)^{\tau(j_1j_2\cdots j_n)} a_{1j_1}a_{2j_2}\cdots a_{nj_n} \<br>&amp;=a_{11}\sum_{(j_2\cdots j_n)} (-1)^{\tau(j_2\cdots j_n)} a_{2j_2}\cdots a_{nj_n}<br>= \det M_{11} \<br>\end{align} <blockquote></blockquote></li></ul></li></ul><hr><ul><li><span id="deduction3-1-1"><strong>【推论】</strong></span> 若 $a_j=e_i$，则 $\det D=(-1)^{i+j}\det M_{ij}$<ul><li>仅需将行列式第 $j$ 列往左不断与相邻列往换，直至到达第一列（共计 $j-1$ 次交换）；再将第 $i$ 行往上不断与相邻行交换，直至到达第一行（共计 $i-1$ 次交换），此时得到行列式记为 $D’$。<br>根据上述交换规则人，不难发现，$M’<em>{11}=M</em>{11}$。<br>显然，$D’$ 的第一列 $a’<em>1=e_1$，由 <strong><a href="#lemma3-1">引理3-1</a></strong> 可知，$\det D’=\det M’</em>{11} = \det M_{11}$。<br>由行列式的 <strong><a href="#property2">性质2</a></strong> 可知，$\det D’=(-1)^{j-1+i-1}\det D=(-1)^{i+j}\det D$<br>故 $\det D = (-1)^{i+j}\det D’ = (-1)^{i+j}\det M_{11}$ <blockquote></blockquote></li></ul></li></ul><hr><blockquote><p>因为 $\det D=\det (a_1,a_2,\cdots,a_n)=\det (a_{11}e_1+\cdots+a_{n1}e_n,\cdots,a_{1n}e_1+\cdots+a_{nn}e_n)$<br>  由行列式的 <strong><a href="#property3">性质3</a></strong> 和 <strong><a href="#property4">性质4</a></strong> 以及 <strong><a href="#deduction3-1-1">推论</a></strong> 可知：<br>  \begin{align}<br>    \det D &amp;= \det (a_{11}e_1+\cdots+a_{n1}e_n,a_2,a_3,\cdots,a_n) \<br>    &amp;= a_{11}\det(e_1,a_2,\cdots,a_n)+a_{21}\det(e_2,a_2,\cdots,a_n)+\cdots+a_{n1}\det(e_n,a_2,\cdots,a_n) \<br>    &amp;= \sum_{i=1}^n (-1)^{i+1} a_{i1}\det M_{i1} =  \sum_{i=1}^n a_{i1}\det A_{i1}<br>  \end{align}<br>  同理可证 <strong><a href="#cal4-">式4-1</a><strong>、</strong><a href="#cal4-">式4-2</a></strong> 成立</p></blockquote><p><span id="theory4"><strong>【定理4】</strong> $n$ 阶行列式的任一行（列）的各元素与另外一行（列）对应元素的代数余子式的乘积之和等于 0，即<br><span id="cal5"></span>$$\sum_{k=1}^n a_{ik}A_{jk}=0 \hskip 1em \text{或} \hskip 1em \sum_{k=1}^n a_{ki}A_{kj}=0, \hskip 2em i\neq j \tag{5}$$</p><h1 id="克拉默法则"><a href="#克拉默法则" class="headerlink" title="克拉默法则"></a>克拉默法则</h1><p><span id="theory5"><strong>【定理5】 （克拉默法则）</strong> 如果含有 $n$ 个方程的 $n$ 元线性方程组<br><span id="cal6"></span>\begin{align}<br>  \left\lbrace \begin{aligned}<br>    &amp;a_{11}x_1+a_{12}x_2+\cdots+a_{1n}x_n = b_1 \<br>    &amp;a_{21}x_1+a_{22}x_2+\cdots+a_{2n}x_n = b_2 \<br>    &amp;\hskip 3em \cdots\cdots \<br>    &amp;a_{n1}x_1+a_{n2}x_2+\cdots+a_{nn}x_n = b_n \<br>  \end{aligned} \right.<br>  \tag{6}<br>\end{align}<br>的系数行列式<br>\begin{align}<br>  D = \left| \begin{matrix}<br>      a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n} \<br>      a_{21} &amp; a_{22} &amp; \cdots &amp; a_{2n} \<br>      \vdots &amp; \vdots &amp; \ddots &amp; \vdots \<br>      a_{n1} &amp; a_{n2} &amp; \cdots &amp; a_{nn} \<br>    \end{matrix} \right |<br>    \neq 0<br>\end{align}<br>则 <strong><a href="#cal6">线性方程组(6)</a></strong> 有唯一解，且其解为<br><span id="cal7"></span>$$x_1=\frac{D_1}{D},x_2=\frac{D_2}{D},\cdots,x_n=\frac{D_n}{D} \tag{7}$$<br>其中 $D_j(j=1,2,\cdots,n)$ 是用常数项 $b_1,b_2,\cdots,b_n$ 代替系数矩阵 $D$ 中第 $j$ 列对应元素得到的 $n$ 阶行列式，即<br>\begin{align}<br>  D_j = \left| \begin{matrix}<br>      a_{11} &amp; \cdots &amp; a_{1,j-1} &amp; b_1 &amp; a_{1,j+1} &amp; \cdots &amp; a_{1n} \<br>      a_{21} &amp; \cdots &amp; a_{2,j-1} &amp; b_2 &amp; a_{2,j+1} &amp; \cdots &amp; a_{2n} \<br>      \vdots &amp; \vdots &amp; \vdots &amp; \vdots &amp;        &amp; \vdots \<br>      a_{n1} &amp; \cdots &amp; a_{n,j-1} &amp; b_n &amp; a_{n,j+1} &amp; \cdots &amp; a_{nn} \<br>    \end{matrix} \right |<br>\end{align}</p><blockquote><ul><li>首先证明 <strong><a href="#cal7">式7</a></strong> 是 <strong><a href="#cal6">方程组6</a></strong> 的解<br>  由 <strong><a href="#theory3">拉普拉斯展开定理</a></strong> $D_j$ 按第 $j$ 展开得 $\displaystyle D_j=\sum_{k=1}^n b_kA_{kj}$<br>  将 <strong><a href="#cal7">式7</a></strong> 代入  <strong><a href="#cal6">方程组6</a></strong> 的第 $i(i=1,2,\cdots n)$ 个方程，得<br>\begin{align}<br>  &amp; a_{i1}x_1+a_{i2}x_2+\cdots+a_{in}x_n \<br>  =&amp; \sum_{j=1}^n a_{ij}x_j = \sum_{j=1}^n a_{ij}\frac{D_j}{D} \<br>  =&amp; \frac{1}{D} \sum_{j=1}^n a_{ij}\left(\sum_{k=1}^n b_kA_{kj}\right)<br>  = \frac{1}{D} \sum_{k=1}^n b_k\left(\sum_{j=1}^n a_{ij}A_{kj}\right) \tag{加法交换律} \<br>  =&amp; \frac{b_i}{D} \sum_{j=1}^n a_{ij}A_{kj} = \frac{b_i}{D}\cdot D=b_i \tag{定理4} \<br>\end{align}</li><li>再证明解的唯一性<br>若 $x’<em>1,x’<em>2,\cdots,x’<em>n$ 是 <strong><a href="#cal6">方程组6</a></strong> 的一组不同于 <strong><a href="#cal7">式7</a></strong> 的解；<br>用行列式 $D$ 的第 $j$ 列各元素的代数余子式 $A</em>{1j},A</em>{2j},\cdots,A</em>{nj}$ 分别乘以 <strong><a href="#cal6">方程组6</a></strong> 的第 1 个，第 2 个，$\cdots$，第 $n$ 个方程，并相加，得：<br>\begin{align}<br>  &amp; \left(\sum_{k=1}^n a_{k1}A_{kj}\right)x’<em>1 + \cdots + \left(\sum</em>{k=1}^n a_{kj}A_{kj}\right)x’<em>j + \cdots + \left(\sum</em>{k=1}^n a_{kn}A_{kj}\right)x’<em>n \<br>  =&amp; A</em>{kj} \sum_{i=1}^n\left(\sum_{k=1}^n a_{ki}\right)x’<em>i<br>  = A</em>{kj} \sum_{i=1}^n\sum_{k=1}^n a_{ki}x’<em>i<br>  = A</em>{kj} \sum_{k=1}^n b_k \<br>\end{align} 由 <strong><a href="#theory3">定理3</a></strong> 和 <strong><a href="#theory4">定理4</a></strong> 得 $$Dx’_j=D_j, \hskip 1em j=1,2,\cdots,n$$<br>由于 $D\neq 0$，故 $x’_j=\frac{D_j}{D}=x_j (j=1,2,\cdots,n)$，这与 <strong><a href="#cal7">式7</a></strong> 相同。</li></ul></blockquote><h1 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h1><p>参考文献：</p><ul><li>湖南大学 大学数学 3（2009 年 2 月 第 2 版）<br>参考链接： </li><li><em><strong><a href="http://blog.csdn.net/mathmetics/article/details/17504093">线性代数(二十四) ： 行列式的展开式—拉普拉斯公式</a></strong></em></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;逆序数&quot;&gt;&lt;a href=&quot;#逆序数&quot; class=&quot;headerlink&quot; title=&quot;逆序数&quot;&gt;&lt;/a&gt;逆序数&lt;/h1&gt;&lt;p&gt;&lt;span id=&quot;def1&quot;&gt;&lt;strong&gt;【定义1】&lt;/strong&gt;&lt;/span&gt; $n$ 级排列 $i_1i_2\cdots i_n$ 的逆序数记为 $\tau(i_1i_2\cdots i_n)$。&lt;br&gt;比如，$\tau(123)=0$，而 $\tau(321)=3$，因为 32,31,21 是逆序，共 3 对。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若 $\tau(i_1i_2\cdots i_n) \equiv 0\mod 2$ 则称为 &lt;strong&gt;偶排列&lt;/strong&gt;；否则称为 &lt;strong&gt;奇排列&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span id=&quot;theory1&quot;&gt;&lt;strong&gt;【定理1】&lt;/strong&gt;&lt;/span&gt; 若互换排列 $i_1i_2\cdots i_n$ 中两个数 $i_x$ 和 $i_y$ 的位置（不妨假设 $x&amp;lt;y$），则&lt;br&gt;  $$\tau(i_1i_2\cdots i_x\cdots i_y\cdots i_n) \not\equiv \tau(i_1i_2\cdots i_y\cdots i_x\cdots i_n) \mod 2 \tag{1}$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;当 $y=x+1$ 时，也就是相邻两个数进行对换，由于和其它数的相对顺序没有发生改变；此时 &lt;strong&gt;&lt;a href=&quot;#theory1&quot;&gt;定理1&lt;/a&gt;&lt;/strong&gt; 成立&lt;/li&gt;
&lt;li&gt;当 $y=x+k$ （其中 $k&amp;gt;1$ 且 $k \in Z^+$）时，可以理解成：&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;$i_y$ 先和 $i_{y-1}$ 交换，随之和 $i_{y-2}$ 交换，直到和 $i_{x}$ 交换，此时 $i_y$ 一共发生了 $y-x$ 次交换，且 $i_x$ 位于交换前 $i_{x+1}$ 的位置&lt;/li&gt;
&lt;li&gt;然后 $i_x$ 和 $i_{x+1}$ 交换，直到和 $i_{y-1}$ 交换，一共交换了 $y-1-x$ 次&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;不难发现这样交换的结果和直接让 $i_x$ 和 $i_y$ 交换是一样的，相当于进行了 $(y-x)+(y-1-x)=2\times(y-x)-1$ 次相邻交换，而每次相邻交换 $\tau$ 的奇偶性都会发生改变（前述已经证明），故等价于 $(2\times(y-x)-1)\mod 2$ 次相邻交换&lt;br&gt;  综上，即可证明 &lt;strong&gt;&lt;a href=&quot;#theory1&quot;&gt;定理1&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="数学" scheme="http://littleclown.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="线性代数" scheme="http://littleclown.github.io/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
    <category term="行列式" scheme="http://littleclown.github.io/tags/%E8%A1%8C%E5%88%97%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>初识 Ubuntu</title>
    <link href="http://littleclown.github.io/study/computer/os/ubuntu/1/"/>
    <id>http://littleclown.github.io/study/computer/os/ubuntu/1/</id>
    <published>2016-09-16T10:19:59.000Z</published>
    <updated>2019-01-03T02:22:28.676Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装-Ubuntu-双系统"><a href="#安装-Ubuntu-双系统" class="headerlink" title="安装 Ubuntu 双系统"></a>安装 Ubuntu 双系统</h1><ul><li>在 Windows 下分出硬盘空间，我分了 60G</li><li>下载 Ubuntu 镜像软件</li><li>下载 ultralSO 并将下载的 Ubuntu 镜像软件制作成 U 盘启动盘</li><li>安装 Ubuntu （在出现机器 logo 的时候按下 F12， 选择 USG HDD 启动）；设置分区：<ul><li>逻辑分区，200M，起始，Ext4 日志文件系统， /boot；（引导分区；200 M 足够）</li><li>逻辑分区，4000M，起始，交换空间；（交换分区；一般不大于物理内存）</li><li>逻辑分区，35000M，起始，Ext4 日志文件系统，/；（系统分区）</li><li>逻辑分区，剩下的空闲空间，起始，Ext4 日志文件系统，/home；（用户分区；存放个人文档）</li></ul></li><li>使用 EasyBSD 创建启动系统</li><li><strong><a href="http://blog.csdn.net/coderjyf/article/details/51241919">参考链接</a></strong>*<span id="more"></span></li></ul><h1 id="解决-install-f-错误问题"><a href="#解决-install-f-错误问题" class="headerlink" title="解决 install -f 错误问题"></a>解决 install -f 错误问题</h1><p>在 Ubuntu16.04 下安装网易云音乐时，下载好 <em><strong><a href="http://202.197.96.248/files/9178000000509FAF/s1.music.126.net/download/pc/netease-cloud-music_1.0.0_amd64_ubuntu16.04.deb">netease-cloud-music_1.0.0_amd64_ubuntu16.04.deb</a></strong></em> 后，执行 </p><pre><code>sudo dpkg -i netease-cloud-music_1.0.0_amd64_ubuntu16.04.deb</code></pre><p>提示要安装很多的依赖项；执行 </p><pre><code>sudo install -f </code></pre><p>结果有一个 <em><strong><a href="http://202.197.96.248/files/10780000002B11C0/ftp.cn.debian.org/debian/pool/main/o/openjpeg/libopenjpeg5_1.5.2-3.1_amd64.deb">libopenjpeg5_1.5.2-3.1_amd64.deb</a></strong></em> 下不下来；导致 apt-get 不可用。<br>直接从网上下好 libopenjpeg5_1.5.2-3.1_amd64.deb 并放在 /var/cache/apt/archives 下，再次执行</p><pre><code>sudo apt-get install -f </code></pre><p>结果还是一样的错，ls 发现清除了下下来的那个包。<br>重新下那个包，并在包所在目录下执行 </p><pre><code>sudo dpkg -i libopenjpeg5_1.5.2-3.1_amd64.deb</code></pre><p>成功安装该包；再执行 </p><pre><code>sudo apt-get install -f</code></pre><p>至此，成功解决问题。</p><h1 id="解决挂起和休眠无法唤醒"><a href="#解决挂起和休眠无法唤醒" class="headerlink" title="解决挂起和休眠无法唤醒"></a>解决挂起和休眠无法唤醒</h1><p>Ubuntu16.04 用的内核版本是 4.4.0-xx-xxxxxx，这个内核是引起系统挂起非正常死机的原因。<br>***<a href="http://kernel.ubuntu.com/~kernel-ppa/mainline/">下载新内核</a>***，这里我选择的是 v4.4.12-xenial 的内核。<span sytle="color: red; font-weight: bold;">注意，千万不要使用 v4.4.14-xenial 的内核！</span><br>进入想要安装的内核目录，下载三个文件（自己根据自己的系统选择）</p><ul><li>linux-headers-xxx_all.deb</li><li>linux-headers-xxx-generic_xxx.deb</li><li>linux-image-xxx-generic_xxx.deb</li></ul><p>下载好后，按照顺序进行安装</p><pre><code>sudo dpkg -i linux-headers-xxx_all.debsudo dpkg -i linux-headers-xxx-generic_xxx.debsudo dpkg -i linux-image-xxx-generic_xxx.deb</code></pre><h1 id="一些习惯性软件"><a href="#一些习惯性软件" class="headerlink" title="一些习惯性软件"></a>一些习惯性软件</h1><h2 id="QQ"><a href="#QQ" class="headerlink" title="QQ"></a>QQ</h2><ul><li>下载 <em><strong><a href="http://www.ubuntukylin.com/applications/showimg.php?lang=cn&id=23">wine-qq</a></strong></em></li><li>解压并打开 wine-qq…. 安装包，安装</li></ul><p><em><strong><a href="http://jingyan.baidu.com/article/e6c8503c6f5fa5e54f1a18de.html">参考链接</a></strong></em></p><h3 id="安装虚拟机"><a href="#安装虚拟机" class="headerlink" title="安装虚拟机"></a>安装虚拟机</h3><p>下载 <em><strong><a href="https://www.virtualbox.org/wiki/Linux_Downloads">virtualbox</a></strong></em></p><h2 id="使用深度终端"><a href="#使用深度终端" class="headerlink" title="使用深度终端"></a>使用深度终端</h2><p>原生的 Ubuntu 上的终端是不支持分屏的；另外，个人还是比较喜欢 deepin 的终端。</p><ul><li><p>添加 Linux Deepin 源</p><ul><li><p>编辑文件 /etc/apt/sources.list，再最后一行加上<br>deb <a href="http://packages.linuxdeepin.com/deepin">http://packages.linuxdeepin.com/deepin</a> trusty main non-free universe<br>deb-src <a href="http://packages.linuxdeepin.com/deepin">http://packages.linuxdeepin.com/deepin</a> trusty main non-free universe</p></li><li><p>添加 Linux Deepin 密匙文件</p><blockquote><p>导入密匙<br>  sudo wget <a href="http://packages.linuxdeepin.com/deepin/project/deepin-keyring.gpg">http://packages.linuxdeepin.com/deepin/project/deepin-keyring.gpg</a><br>  sudo gpg –import deepin-keyring.gpg<br>列出密匙<br>  sudo gpg –list-keys<br>导出密匙<br>  sudo gpg –export –armor 209088E7 | sudo apt-key add -</p></blockquote></li><li><p>更新软件源列表<br>sudo apt-get update</p></li><li><p>安装 deepin-terminal<br>sudo apt-get install deepin-terminal</p></li><li><p><em><strong><a href="http://blog.csdn.net/donglynn/article/details/51376688">参考链接</a></strong></em></p></li></ul></li><li><p>将 deepin-terminal 设置为默认终端</p><ul><li>安装 dconf-tools</li><li>打开 dconf-tools；图形化操作，点进 org &gt; gnome &gt; desktop &gt; applications &gt; terminala 将 exec 对应的值改成 deepin-terminal </li><li><em><strong><a href="http://www.jb51.net/os/Ubuntu/311686.html">参考链接</a></strong></em></li></ul></li></ul><h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><h3 id="号寄存器"><a href="#号寄存器" class="headerlink" title="+号寄存器"></a>+号寄存器</h3><p>解决方法是重装 vim</p><pre><code>sudo apt-get remove --purge vimsudo apt-get install build-essentialsudo apt-get install ncurses-devsudo apt-get install xorg-devsudo apt-get install libgtk2.0-devsudo apt-get install vim vim-scripts vim-gtk vim-gnomesudo apt-get install exuberant-ctags cscope  </code></pre><p><em><strong><a href="http://blog.csdn.net/lanchunhui/article/details/51476823">参考链接</a></strong></em></p><h3 id="配置-vim"><a href="#配置-vim" class="headerlink" title="配置 vim"></a>配置 vim</h3><ul><li>我的配置文件：***<a href="/2016/09/16/Study-OS-ubuntu-1/vimrc">.vimrc</a>***</li><li>插件：<ul><li>for HTML、css、javascript<blockquote><p>下载 <em><strong><a href="/2016/09/16/Study-OS-ubuntu-1/HTML.zip">HTML.zip</a></strong></em> 解压到 ~/.vim/ 下即可<br>下载 <em><strong><a href="/2016/09/16/Study-OS-ubuntu-1/css.vim">css.vim</a></strong></em>  拷贝到 ~/.vim/syntax 目录下即可<br>下载 <em><strong><a href="/2016/09/16/Study-OS-ubuntu-1/mark.vim">mark.vim</a></strong></em>  （用于 javascript 变量标记和检查）拷贝到 ~/.vim/plugin 目录下即可<br>下载 <em><strong><a href="/2016/09/16/Study-OS-ubuntu-1/javacript.vim">javascript.vim</a></strong></em> （用于语法高亮） 拷贝到 ~/.vim/syntax 目录下<br>  在 javascript.vim 下设置 </p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setlocal foldlevel=1</span><br></pre></td></tr></table></figure><p> 在 .vimrc 下添加</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">let b:javascript_fold=1 &quot; 打开 javascript 折叠</span><br><span class="line">let javascript_enable_domhtmlcss=1 &quot; 打开 javascript 对 dom、html、css 的支持</span><br><span class="line">&quot; html 标签自动补全（简陋版）</span><br><span class="line">  function! InsertHtmlTag()</span><br><span class="line">      let pat = &#x27;\c&lt;\w\+\s*\(\s\+\w\+\s*=\s*[\-/:&#x27;&#x27;#$;,().&quot;a-z0-9]\+\)*\s*&gt;&#x27;</span><br><span class="line">      normal! a&gt;</span><br><span class="line">      let save_cursor = getpos(&#x27;.&#x27;)</span><br><span class="line">      let result = matchstr(getline(save_cursor[1]), pat)</span><br><span class="line">      &quot;if (search(pat, &#x27;b&#x27;, save_cursor[1]) &amp;&amp; searchpair(&#x27;&lt;&#x27;,&#x27;&#x27;,&#x27;&gt;&#x27;,&#x27;bn&#x27;,0,  getline(&#x27;.&#x27;)) &gt; 0)</span><br><span class="line">      let lemon = search(pat, &#x27;b&#x27;, save_cursor[1])</span><br><span class="line">      if( lemon )</span><br><span class="line">          normal! lyiwf&gt;</span><br><span class="line">          normal! a&lt;/</span><br><span class="line">          normal! p</span><br><span class="line">          normal! a&gt;</span><br><span class="line">          normal! k</span><br><span class="line">      endif</span><br><span class="line">      :call cursor(save_cursor[1], save_cursor[2], save_cursor[3])</span><br><span class="line">      if( lemon ) </span><br><span class="line">          :execute &quot;normal! a\&lt;CR&gt;\&lt;CR&gt;&quot;</span><br><span class="line">             normal! k&gt;&gt;</span><br><span class="line">      endif</span><br><span class="line">  endfunction</span><br><span class="line">  autocmd FileType md inoremap &gt; &lt;ESC&gt;:call InsertHtmlTag()&lt;CR&gt;a</span><br><span class="line">  autocmd FileType html inoremap &gt; &lt;ESC&gt;:call InsertHtmlTag()&lt;CR&gt;a</span><br></pre></td></tr></table></figure></blockquote></li><li><em><strong><a href="http://www.cnblogs.com/Jason-Damon/archive/2011/10/31/2229692.html">vim 下web开发html css js插件</a></strong></em> </li><li><em><strong><a href="http://blog.csdn.net/doc_sgl/article/details/47205779#t10">把 vim 打造成牛逼的 C++ IDE</a></strong></em></li><li><em><strong><a href="http://www.tuicool.com/articles/QBnAr2">YouCompleteMe</a></strong></em>git clone <a href="https://github.com/VundleVim/Vundle.vim.git">https://github.com/VundleVim/Vundle.vim.git</a> ~/.vim/bundle/Vundle.vim         </li></ul></li></ul><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p>安装</p><pre><code>sudo apt-get install git</code></pre><p>设置</p><pre><code>git config --global user.name &quot;xxxx&quot; # 设置用户名git config --global user.email &quot;xxxx@xxx.com&quot; # 设置用户邮箱</code></pre><p>解决中文乱码</p><pre><code>git config --global core.quotepath falsegit config --global gui.encoding utf-8 # 设置 git gui 的界面编码git config --global i18n.commitencoding utf-8 # 设置 commit log 提交时使用 utf-8 编码# git config --global i18n.logoutputencoding gbk # 设置在 git log 时将 utf-8 编码转换成 utf-8编码export LESSCHARSET=utf-8 # 使得 git log 可以正常使用中文</code></pre><p>新建 ssh 密匙</p><pre><code>cd ~/.sshssh-keygen -t rsa -C &quot;xxx@xxx.com&quot;ssh-agent bashssh-add id_rsa</code></pre><p>将 id_rsa.pub 部署到 github 上，测试：</p><pre><code>ssh git@github.com</code></pre><p><em><strong><a href="http://www.asheep.cn/skill/git-ssh-key.html">参考链接</a></strong></em><br><em><strong><a href="http://blog.csdn.net/yunnywu/article/details/50553908">参考链接</a></strong></em></p><h2 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h2><pre><code>sudo apt-get install python-pip （默认 python2.7）sudo apt-get install python3-pip （基于 python3.x)</code></pre><h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><ul><li>下载 <em><strong><a href="http://www.oracle.com/technetwork/cn/java/javase/downloads/jdk8-downloads-2133151-zhs.html">java</a></strong></em></li><li>将下载文件（应该是一个 tar.gz 结尾的文件）解压到 /opt<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf xxx.tar.gz</span><br><span class="line">sudo mv xxx /opt</span><br></pre></td></tr></table></figure></li><li>在解压后的目录下找到 bin 目录，创建 java 软链接（源文件一定要使用绝对路径）到 /bin/ 目录下<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln /opt/jdk1.8.0_101/bin/java /bin/java</span><br></pre></td></tr></table></figure></li><li>设置 java 环境<br>打开 /etc/profile<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/opt/jdk1.8.0_92</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</span><br><span class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li></ul><h2 id="chrome"><a href="#chrome" class="headerlink" title="chrome"></a>chrome</h2><pre><code>sudo apt-get install google-chrome-stable</code></pre><h2 id="youdao-dict"><a href="#youdao-dict" class="headerlink" title="youdao-dict"></a>youdao-dict</h2><ul><li>下载 <em><strong><a href="http://cidian.youdao.com/index-linux.html">youdao-dict_1.1.0-0-ubuntu_amd64.deb</a></strong></em></li><li>到该目录下安装<br>sudo dpkg -i youdao-dict_1.1.0-0-ubuntu_amd64.deb</li><li>如果失败，请参考 <em><strong><a href="http://www.cnblogs.com/scplee/archive/2016/05/13/5489024.html">Ubuntu16.04 安装有道词典</a></strong></em></li></ul><h2 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h2><p>现下好 ***<a href="https://nodejs.org/en/">nodejs</a>***。应该是一个 xxx.tar.xz 文件。假设该文件所在目录为 /lemon：</p><pre><code>xz -d xxx.tar.xztar -xvf xxx.tarln -s /lemon/bin/node /usr/local/bin/nodeln -s /lemon/bin/npm  /usr/local/bin/npm</code></pre><p>.tar.xz 文件解压后即可执行，建立软链接使得全局可以使用。<br><strong>建立软链接时一定要用绝对路径</strong>。<br><em><strong><a href="http://www.cnblogs.com/8765h/p/4777746.html">参考链接</a></strong></em></p><h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><p>使用 npm 命令安装 hexo，你会发现安装的位置在你 npm 下，所以需要建立软链接以使得全局可以使用。</p><pre><code>sudo npm install -g hexo-cliln -s /lemon/bin/hexo /usr/local/bin/hexo</code></pre><h2 id="R"><a href="#R" class="headerlink" title="R"></a>R</h2><pre><code>sudo apt-get install r-base</code></pre><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><pre><code>sudo apt-get install mysql-client mysql-server</code></pre><h2 id="mongodb"><a href="#mongodb" class="headerlink" title="mongodb"></a>mongodb</h2><pre><code>tar -zxvf mongodb-linux-x86_64-ubuntu1604-3.4.0.tgz</code></pre><h2 id="TTF-字体"><a href="#TTF-字体" class="headerlink" title="TTF 字体"></a>TTF 字体</h2><p>先下好字体，比如 consolas.ttf 字体；安装命令如下：</p><pre><code>sudo cp consolas.ttf /usr/share/fonts/truetype/sudo fc-cache -f -v</code></pre><h2 id="tex-live"><a href="#tex-live" class="headerlink" title="tex-live"></a>tex-live</h2><p>下载 ***<a href="http://tug.org/texlive/acquire-netinstall.html">intall-tl-unx.tar.gz</a>***，执行</p><pre><code>tar -xvzf intall-tl-unx.tar.gz</code></pre><p>在解压后的文件夹中找到 install.tl，在终端中执行</p><pre><code>sudo ./install-tl</code></pre><p><em><strong><a href="https://zhuanlan.zhihu.com/p/20069414?refer=LaTeX">参考链接</a></strong></em></p><p>或者，可以下载 texlive2016.iso 文件：</p><ul><li><p><em><strong><a href="http://mirrors.ustc.edu.cn/CTAN/systems/texlive/Images/texlive2016.iso">中科大镜像</a></strong></em></p></li><li><p><em><strong><a href="https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/texlive2016.iso">清华镜像</a></strong></em></p></li><li><p><em><strong><a href="http://mirrors.aliyun.com/CTAN/systems/texlive/Images/texlive2016.iso">阿里云镜像</a></strong></em><br>为了使用图形化安装界面，安装 perl 的 tk 组件：</p><p>sudo apt-get install perl-tk<br>到 texlive2016.iso 目录下，执行</p><p>sudo mount -o loop texlive2016.iso /mnt<br>cd /mnt<br>sudo ./install-tl -gui<br>在图形化界面中安装，<strong>创建符号链接选是</strong>。<br>安装完成后，卸载镜像文件</p><p>cd /; sudo umount /mnt</p></li></ul><p><em><strong><a href="http://www.linuxidc.com/Linux/2016-08/133913.htm">参考链接</a></strong></em><br>关于字体的问题，只要安装好 <code>simfang.ttf</code>、<code>simhei.ttf</code>、<code>simkai.ttf</code>、<code>simsun.ttf</code> 应该问题就不大了。</p><h1 id="JavaEE"><a href="#JavaEE" class="headerlink" title="JavaEE"></a>JavaEE</h1><h2 id="Tomcat-安装"><a href="#Tomcat-安装" class="headerlink" title="Tomcat 安装"></a>Tomcat 安装</h2><p>下载 <em><strong><a href="http://tomcat.apache.org/download-90.cgi">Core&gt;tar.gz</a></strong></em><br>安装配置</p><pre><code>tar -zxvf apache-tomcat-9.0.0.M10 sudo mv apache-tomcat-9.0.0.M10 /optcd /opt/apache-tomcat-9.0.0.M10/binsudo ./startup.sh # 开启 tomcat</code></pre><p>打开浏览器， <code>localhost:8080</code> 即可访问到 tomcat 的页面。<br>查看监控信息</p><pre><code>cd /opt/apache-tomcat-9.0.0.Min/logstail -f catalina.out</code></pre><p><em><strong><a href="http://www.tuicool.com/articles/iYZZFf">参考链接</a></strong></em></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;安装-Ubuntu-双系统&quot;&gt;&lt;a href=&quot;#安装-Ubuntu-双系统&quot; class=&quot;headerlink&quot; title=&quot;安装 Ubuntu 双系统&quot;&gt;&lt;/a&gt;安装 Ubuntu 双系统&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;在 Windows 下分出硬盘空间，我分了 60G&lt;/li&gt;
&lt;li&gt;下载 Ubuntu 镜像软件&lt;/li&gt;
&lt;li&gt;下载 ultralSO 并将下载的 Ubuntu 镜像软件制作成 U 盘启动盘&lt;/li&gt;
&lt;li&gt;安装 Ubuntu （在出现机器 logo 的时候按下 F12， 选择 USG HDD 启动）；设置分区：&lt;ul&gt;
&lt;li&gt;逻辑分区，200M，起始，Ext4 日志文件系统， /boot；（引导分区；200 M 足够）&lt;/li&gt;
&lt;li&gt;逻辑分区，4000M，起始，交换空间；（交换分区；一般不大于物理内存）&lt;/li&gt;
&lt;li&gt;逻辑分区，35000M，起始，Ext4 日志文件系统，/；（系统分区）&lt;/li&gt;
&lt;li&gt;逻辑分区，剩下的空闲空间，起始，Ext4 日志文件系统，/home；（用户分区；存放个人文档）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用 EasyBSD 创建启动系统&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://blog.csdn.net/coderjyf/article/details/51241919&quot;&gt;参考链接&lt;/a&gt;&lt;/strong&gt;*</summary>
    
    
    
    
    <category term="Ubuntu" scheme="http://littleclown.github.io/tags/Ubuntu/"/>
    
    <category term="技术" scheme="http://littleclown.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端学习之 css(1)</title>
    <link href="http://littleclown.github.io/study/codding/projects/web/frontend/css/1/"/>
    <id>http://littleclown.github.io/study/codding/projects/web/frontend/css/1/</id>
    <published>2016-09-14T13:35:17.000Z</published>
    <updated>2019-01-03T02:22:28.639Z</updated>
    
    <content type="html"><![CDATA[<h1 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h1><ul><li>border-radius<br>圆角边框效果<ul><li>语法<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>: <span class="number">5px</span>; <span class="comment">/* 四个角的半径均为 5px 的圆角 */</span></span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">5px</span> <span class="number">7px</span>; <span class="comment">/* 左上角和右下角半径为 5px；右上角和左下角半径为 7px*/</span></span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">5px</span> <span class="number">4px</span> <span class="number">3px</span> <span class="number">7px</span>; <span class="comment">/*依次为 左上角、右上角、右下角、左下角*/</span></span><br></pre></td></tr></table></figure>使用 <code>border-radius</code> 时，需要给边框设置宽度和高度</li><li>效果<br>  可以使用 <code>border-radius</code> 画实心圆，只要满足：height=width, border-radius=$\frac{1}{2} \times $width。</li></ul></li></ul><span id="more"></span><ul><li><p>box-shadow<br>向盒子添加阴影效果；支持多重添加</p><ul><li>语法<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: X 偏移量 Y 偏移量 [阴影模糊半径] [阴影扩展半径] [阴影颜色] [投影方式];</span><br></pre></td></tr></table></figure>X 偏移量和 Y 偏移量可以看做光线投影过来的方向；投影方式：设置了 <code>inset</code> 时为 <strong>内部阴影</strong>，否则为 <strong>外部阴影</strong></li><li><em><strong><a href="http://www.imooc.com/code/382">参考链接</a></strong></em></li></ul></li><li><p>border-image<br>为边框应用背景图片</p><ul><li>语法<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border-image</span>: <span class="built_in">url</span>(<span class="string">xxx.png</span>) <span class="number">70</span> <span class="number">70</span> <span class="number">70</span> <span class="number">70</span> 延伸方式</span><br></pre></td></tr></table></figure>其中，延伸方式为：<code>round</code> （平铺）；<code>repeat</code> （重复）；<code>stretch</code> （拉伸）</li><li><em><strong><a href="http://www.imooc.com/code/383">参考链接</a></strong></em></li></ul></li></ul><h1 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h1><ul><li>渐变色彩<ul><li>线性渐变<ul><li>语法<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">linear-gradient(方向,颜色点<span class="number">1</span>,颜色点<span class="number">2</span>,...颜色点n);</span><br></pre></td></tr></table></figure>方向可以用角度表示，单位为 deg，如： 0deg、90deg、123deg 等<br>  方向也可以用关键字表示，如：<code>to top</code>、<code>to right</code>、<code>to bottom</code>、<code>to left</code>、<code>to top left</code> 等<br>颜色点：每个颜色点有一个颜色值表示，在线上依次紧邻排布</li><li><em><strong><a href="http://www.imooc.com/code/617">参考链接</a></strong></em></li></ul></li><li>径向渐变<ul><li>语法<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">radial-gradient(center, shape, size, <span class="attribute">color</span>-stop1, ..., <span class="attribute">color</span>-stopn);</span><br></pre></td></tr></table></figure><ul><li>center 渐变的起点；可以为百分比；默认在图形的中心</li><li>shape  渐变的形状： <code>ellipse</code> 表示椭圆形，<code>circle</code> 表示圆形，默认为 <code>ellipse</code>；<ul><li>size 大小：<code>closest-side</code> 最近边；<code>closest-corner</code> 最近角；<code>fathest-side</code> 最远边；<code>fathest-corner</code> 最远角；</li></ul></li><li>start-color 颜色点</li></ul></li><li><em><strong><a href="http://www.cnblogs.com/rainman/p/5133685.html">参考链接</a></strong></em></li></ul></li></ul></li></ul><h1 id="文字与字体"><a href="#文字与字体" class="headerlink" title="文字与字体"></a>文字与字体</h1><ul><li>text-overflow<br>用于说明文字溢出时用什么方式显示： <code>clip</code> 表示剪切；<code>ellipsis</code> 表示显示省略标记。<br>为了产生理想的省略号的效果，还需 <strong>强制文本在一行内显示 <code>white-space: nowrap;</code></strong> 及 <strong>溢出内容隐藏 <code>overflow: hidden;</code></strong><ul><li>语法<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br></pre></td></tr></table></figure></li><li><em><strong><a href="http://www.imooc.com/code/630">参考链接</a></strong></em></li></ul></li><li>word-wrap<br>用来指定当前行溢出时是否断开换行<ul><li>语法<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">word-wrap</span>: normal | break-word;</span><br></pre></td></tr></table></figure>其中，<code>normal</code>（默认值） 表示控制连续文本换行；<code>break-word</code> 表示内容将在边界内换行</li></ul></li><li>@font-face<ul><li>语法<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: 字体名称;</span><br><span class="line">  <span class="attribute">src</span>: 字体文件在服务器上的相对或绝对路径；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>这样就可以加载出本地没有但服务器上有的字体了</li></ul></li><li>text-shadow<ul><li>语法<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-shadow</span>: X-Offset Y-Offset Blur Color;</span><br></pre></td></tr></table></figure>其中，X-Offset 表示阴影的水平偏移距离；Y-Offset 表示阴影的垂直偏移距离； Blur 表示阴影的模糊程度，值越大越模糊（不可为负）；Color 表示阴影的颜色</li><li><em><strong><a href="http://www.imooc.com/code/645">参考链接</a></strong></em></li></ul></li></ul><h1 id="与背景相关的样式"><a href="#与背景相关的样式" class="headerlink" title="与背景相关的样式"></a>与背景相关的样式</h1><ul><li><p>background-origin<br>设置元素背景图片的 <strong>原始起始位置</strong></p><ul><li><p>语法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-origin</span>: border-box | padding-box | content-box;</span><br></pre></td></tr></table></figure><p>参数分别表示背景图片从 <strong>边框</strong>、<strong>内边框（默认值）</strong>、<strong>内容区域</strong> 显示<br><strong style="color: red;">注意，这个属性仅当背景为 no-repeat 时有效；否则将从 <i>边框</i> 开始显示。</strong></p></li><li><p><em><strong><a href="http://www.imooc.com/code/657">参考链接</a></strong></em></p></li></ul></li><li><p>background-clip<br>对背景图片做适当 <strong>裁剪</strong> 以适应实际需要</p><ul><li><p>语法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-clip</span>: border-box | padding-box | content-box | no-clip;</span><br></pre></td></tr></table></figure><p>参数分别表示从 <strong>边框</strong>、<strong>内边框（默认值）</strong>、<strong>内容区域</strong> 向外裁剪背景; <code>no-clip</code> 表示不裁剪</p></li><li><p><em><strong><a href="http://www.imooc.com/code/658">参考链接</a></strong></em></p></li></ul></li><li><p>background-size<br>设置背景图片的大小，以 <strong>长度值</strong> 或 <strong>百分比</strong> 显示；还可以通过 <strong>contain</strong> 和 <strong>cover</strong> 来对图片进行缩放</p><ul><li>语法<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-size</span>: auto | &lt;长度值&gt; | &lt;百分比&gt; | contain | cover;</span><br></pre></td></tr></table></figure></li><li>取值说明<ol><li><code>auto</code>：默认值，不改变背景图片的原是尺寸</li><li><code>&lt;长度值&gt;</code>：<strong>成对出现时</strong>，如：<code>background-size: 20px 30px;</code> 表示将背景图片宽度设为 20px，高度设为 30px；<strong>只设置一个值时</strong>，表示长宽值相同</li><li><code>&lt;百分比&gt;</code>：<strong>成对出现时</strong>，如：<code>background-size: 20% 30%;</code> 表示将背景图片宽度设为其所在容器的宽度的 20%，高度设为其所在容器的宽度的 30%；<strong>只设置一个值时</strong>，表示长宽比例相同</li><li><code>cover</code>：将背景图片缩放至铺满整个容器为止</li><li><code>contain</code>：将背景图片缩放至某一边抵住容器边缘（上下抵住 ，或左右抵住）</li></ol></li><li><em><strong><a href="http://www.imooc.com/code/691">参考链接</a></strong></em></li></ul></li><li><p>multiple backgrounds</p><ul><li><em><strong><a href="http://www.imooc.com/code/692">多背景技术</a></strong></em></li></ul></li><li><p><em><strong><a href="http://www.imooc.com/code/1881">综合练习1</a></strong></em></p></li></ul><h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><table><thead><tr><th align="center">属性选择器</th><th align="center">功能描述</th></tr></thead><tbody><tr><td align="center">E[att^=”val”]</td><td align="center">选择匹配拥有属性 att 且 <strong>att 属性值是以 val 开头的字符串</strong> 的元素 E</td></tr><tr><td align="center">E[att$=”val”]</td><td align="center">选择匹配拥有属性 att 且 <strong>att 属性值是以 val 结尾的字符串</strong> 的元素 E</td></tr><tr><td align="center">E[att*=”val”]</td><td align="center">选择匹配拥有属性 att 且 <strong>att 属性值中存在一子串为 val 的字符串</strong> 的元素 E</td></tr></tbody></table><h2 id="结构性伪类选择器"><a href="#结构性伪类选择器" class="headerlink" title="结构性伪类选择器"></a>结构性伪类选择器</h2><h3 id="根选择器-root"><a href="#根选择器-root" class="headerlink" title="根选择器 :root"></a><strong>根选择器 :root</strong></h3><p>在 HTML 文档中，根元素始终是 &lt;html&gt;。<br>通过 :root 选择器可以设置背景颜色</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123; </span><br><span class="line">  <span class="attribute">background</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 或者 */</span></span><br><span class="line"><span class="selector-tag">html</span> &#123; </span><br><span class="line">  <span class="attribute">background</span>: purple;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="否定选择器-not"><a href="#否定选择器-not" class="headerlink" title="否定选择器 :not"></a><strong>否定选择器 :not</strong></h3><p>选择除符合否定条件的所有元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:not</span>(<span class="selector-attr">[id=<span class="string">&quot;XXX&quot;</span>]</span>) &#123; </span><br><span class="line">  <span class="attribute">background</span>: purple; <span class="comment">/*对所有 id 不是 &quot;XXX&quot; 的 div 元素有效 */</span> </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:not</span>(<span class="selector-attr">[type=<span class="string">&quot;submit&quot;</span>]</span>) &#123; </span><br><span class="line">  <span class="attribute">background</span>: orange; <span class="comment">/*对所有不是 submit 类型的 input 元素有效*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="空选择器-empty"><a href="#空选择器-empty" class="headerlink" title="空选择器 :empty"></a><strong>空选择器 :empty</strong></h3><p>选择没有任何内容（空白字符也不可有）的元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:empty</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 对于 &lt;div&gt;&lt;/div&gt; 有效； 对于 &lt;div&gt; &lt;/div&gt; 无效。 */</span></span><br></pre></td></tr></table></figure><h3 id="目标选择器-target"><a href="#目标选择器-target" class="headerlink" title="目标选择器 :target"></a><strong>目标选择器 :target</strong></h3><!-- <iframe src="target1.html" width="200" height="400" style="float: right; padding-top: 0em;"></iframe> --><p>匹配文档（页面）的 <strong>url 的某个标识符的目标元素</strong>。<br>具体来说，触发元素的 url 中的标识符通常会包含一个 #号，后面带有一个 <strong>标识符名称</strong>。</p><p>html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#brand&quot;</span>&gt;</span>Brand<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;brand&quot;</span>&gt;</span></span><br><span class="line">  content for Brand.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#jake&quot;</span>&gt;</span>Jake<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;jake&quot;</span>&gt;</span></span><br><span class="line">  content for jake.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#aron&quot;</span>&gt;</span>Aron<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;aron&quot;</span>&gt;</span></span><br><span class="line">  content for aron.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#brand</span><span class="selector-pseudo">:target</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: orange;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#jake</span><span class="selector-pseudo">:target</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: blue;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#aron</span><span class="selector-pseudo">:target</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong><a href="http://www.imooc.com/code/736">参考链接</a></strong></em></p><h3 id="子包含选择器-E-gt-F"><a href="#子包含选择器-E-gt-F" class="headerlink" title="子包含选择器 E &gt; F"></a><strong>子包含选择器 E &gt; F</strong></h3><p>匹配 <code>满足的 E 的元素</code> 的 <code>满足 F 的子元素</code>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span><span class="selector-class">.lemon</span> <span class="selector-tag">td</span> &gt; <span class="selector-tag">p</span> &#123; &#125; <span class="comment">/* 匹配 td 的子元素中所有的 p 元素；且 td 从 table 继承，该 table 元素有一个 lemon 的 class 属性 */</span></span><br></pre></td></tr></table></figure><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><table><thead><tr><th align="center">选择器</th><th align="center">用法</th><th align="center">参考链接</th></tr></thead><tbody><tr><td align="center">:first-child</td><td align="center">顾名思义</td><td align="center"><em><strong><a href="http://www.imooc.com/code/737">imooc</a></strong></em></td></tr><tr><td align="center">:last-child</td><td align="center">顾名思义</td><td align="center"><em><strong><a href="http://www.imooc.com/code/738">imooc</a></strong></em></td></tr><tr><td align="center">:nth-child(n)</td><td align="center"><ul><li>匹配父元素第 $n$ 个子元素</li><li>可以采用 $3n+1$ 以匹配第 1、4、7… 个子元素</li><li>可以用 <code>even</code> 表示 $2n$，<code>odd</code> 表示 $2n+1$</li></ul></td><td align="center"><em><strong><a href="http://www.imooc.com/code/739">imooc</a></strong></em></td></tr><tr><td align="center">:nth-last-child(n)</td><td align="center">与 <code>:nth-child(n)</code> 相比是 <code>逆序</code> 计数的</td><td align="center"><em><strong><a href="http://www.imooc.com/code/740">imooc</a></strong></em></td></tr><tr><td align="center">:first-of-type</td><td align="center"><ul><li>和 <code>:first-child</code> 类似，但匹配同类型的元素中第一个兄弟元素</li><li>可以指定多个类型</li></ul></td><td align="center"><em><strong><a href="http://www.imooc.com/code/809">imooc</a></strong></em></td></tr><tr><td align="center">:last-of-type</td><td align="center">顾名思义</td><td align="center"><em><strong><a href="http://www.imooc.com/code/811">imooc</a></strong></em></td></tr><tr><td align="center">:nth-of-type(n)</td><td align="center">顾名思义</td><td align="center"><em><strong><a href="http://www.imooc.com/code/810">imooc</a></strong></em></td></tr><tr><td align="center">:nth-last-of-type(n)</td><td align="center">顾名思义</td><td align="center"><em><strong><a href="http://www.imooc.com/code/812">imooc</a></strong></em></td></tr><tr><td align="center">:only-child</td><td align="center"><ul><li>匹配父元素仅有一个元素的元素</li><li>如，<code>li:only-child&#123;&#125;</code> 匹配的是仅含一个子元素，且该子元素为 <code>li</code> 的子元素<br/>（也就是这个 <code>li</code> 元素）</li></ul></td><td align="center"><em><strong><a href="http://www.imooc.com/code/813">imooc</a></strong></em></td></tr><tr><td align="center">:only-of-type</td><td align="center">与 <code>:only-child</code> 类似，只是把匹配条件改为：指定类型的元素仅有一个</td><td align="center"><em><strong><a href="http://www.imooc.com/code/814">imooc</a></strong></em></td></tr></tbody></table><h2 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h2><h3 id="selection"><a href="#selection" class="headerlink" title="::selection"></a>::selection</h3><p>用来匹配网页上鼠标选择的文本。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">::selection</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">  <span class="attribute">color</span>: purple;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="before-和-after"><a href="#before-和-after" class="headerlink" title=":before 和 :after"></a>:before 和 :after</h3><p>用来给元素的前面或后面插入内容，经常和 <code>content</code> 配合使用；<code>content</code> 属性指定插入的内容。</p><h1 id="变形与动画"><a href="#变形与动画" class="headerlink" title="变形与动画"></a>变形与动画</h1><h2 id="rotate"><a href="#rotate" class="headerlink" title="rotate()"></a>rotate()</h2><p>rotate() 函数让元素顺时针旋转，接受度数作为参数。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* rotate(xdeg) 表示顺时针旋转 x 度 */</span></span><br><span class="line">-webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">20deg</span>); <span class="comment">/* for chrome */</span></span><br><span class="line">-moz-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">20deg</span>); <span class="comment">/* for firefox */</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">20deg</span>);</span><br></pre></td></tr></table></figure><h2 id="skew"><a href="#skew" class="headerlink" title="skew()"></a>skew()</h2><p>skew() 函数能让元素倾斜显示；比如对一个矩形使用 skew(argx,argy)，那么显示的时候的时候，原来垂直于 x 轴的边将沿逆时针方向旋转 argx；而原来垂直于 y 轴的边将沿逆时针方向旋转 argy。（<strong style="color: red">注意：这里的坐标系沿屏幕向右为 x 轴正方向，屏幕向下为 y 轴正方向</strong>）<br>skewX() 仅接受一个参数，且仅是元素在水平方向上扭曲变形；<br>skewY() 仅接受一个参数，且仅是元素在垂直方向上扭曲变形；<br><em><strong><a href="http://www.imooc.com/code/925">参考链接</a></strong></em></p><h2 id="scale"><a href="#scale" class="headerlink" title="scale()"></a>scale()</h2><p>scale() 函数能让元素缩放显示；它接受两个参数：scale(X,Y)。但是，如果只有一个参数，则对 Y 的缩放倍数是一样的。<br>scaleX() 仅接受一个参数，且表示元素在 X 轴方向上缩放；<br>scaleY() 仅接受一个参数，且表示元素在 Y 轴方向上缩放；</p><h2 id="translate"><a href="#translate" class="headerlink" title="translate()"></a>translate()</h2><p>translate() 函数可以将元素向指定的方向移动，且 <strong style="color: red">不影响页面上的其它组件</strong>。<br>translate() 接受两个参数：translate(X,Y)。也就是朝 X 方向和 Y 方向移动的距离。<br>translateX() 仅接受一个参数，且表示元素在 X 轴方向移动。<br>translateY() 仅接受一个参数，且表示元素在 Y 轴方向移动。<br>例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="matrix"><a href="#matrix" class="headerlink" title="matrix()"></a>matrix()</h2>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;边框&quot;&gt;&lt;a href=&quot;#边框&quot; class=&quot;headerlink&quot; title=&quot;边框&quot;&gt;&lt;/a&gt;边框&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;border-radius&lt;br&gt;圆角边框效果&lt;ul&gt;
&lt;li&gt;语法&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;border-radius&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;5px&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;/* 四个角的半径均为 5px 的圆角 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;border-radius&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;5px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;7px&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;/* 左上角和右下角半径为 5px；右上角和左下角半径为 7px*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;border-radius&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;5px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;7px&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;/*依次为 左上角、右上角、右下角、左下角*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
使用 &lt;code&gt;border-radius&lt;/code&gt; 时，需要给边框设置宽度和高度&lt;/li&gt;
&lt;li&gt;效果&lt;br&gt;  可以使用 &lt;code&gt;border-radius&lt;/code&gt; 画实心圆，只要满足：height=width, border-radius=$\frac{1}{2} \times $width。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="web 开发" scheme="http://littleclown.github.io/tags/web-%E5%BC%80%E5%8F%91/"/>
    
    <category term="前端" scheme="http://littleclown.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="css" scheme="http://littleclown.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>组合游戏基础之 SG 函数和 SG 定理</title>
    <link href="http://littleclown.github.io/study/math/combinatorial-game/SG/"/>
    <id>http://littleclown.github.io/study/math/combinatorial-game/SG/</id>
    <published>2016-09-04T09:28:53.000Z</published>
    <updated>2019-01-03T02:22:28.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NP-状态描述"><a href="#NP-状态描述" class="headerlink" title="NP 状态描述"></a>NP 状态描述</h1><ul><li>无法进行任何移动的局面为 P-position</li><li>可以移动到 P-position 的局面为 N-position</li><li>任意移动都到达 N-position 的局面为 P-position</li></ul><h1 id="Nim-游戏"><a href="#Nim-游戏" class="headerlink" title="Nim 游戏"></a>Nim 游戏</h1><p>Nim 游戏是组合游戏中的经典游戏，描述如下：<br>有 $n$ 堆石子，第 $i$ 堆有 $x_i$ 颗石子。$A$、$B$ 两人轮流取石子，每次仅能选择一堆不为空的石子进行操作：取走至少一颗石子。不能操作的人输。</p><p>关于 Nim 游戏有一个著名的结论：当且仅当 $x_1\oplus x_2\oplus\cdots\oplus x_n=0$ 时，先手获胜；否则后手胜。<br>证明很简单，当 $X=x_1\oplus x_2\oplus\cdots\oplus x_n\neq 0$ 时，设 $X$ 的二进制最高位为 $k$，那么一定存在一个 $x_i$ 其第 $k$ 位为 1。我们只需要从第 $i$ 堆石子中取走 $X\oplus x_i$ 个（显然，$X\oplus x_i &lt; x_i$，所以此操作是有效的），那么新的游戏状态下：$x_1\oplus x_2\oplus\cdots(x_i\oplus X)\oplus x_n=X\oplus X=0$。<br>事实上，这也是构造 Nim 游戏方案的方法。</p><span id="more"></span><hr><p>接下来，介绍 $SG$ 函数和 $SG$ 定理，$SG$ 函数和 $SG$ 定理是解决一类组合游戏的有力工具。</p><h1 id="SG-函数"><a href="#SG-函数" class="headerlink" title="SG 函数"></a>SG 函数</h1><p>对于任意状态 $x$，定义 $SG(x)=mex(S)$；其中，$S$ 是 $x$ 的所有后继状态的 $SG$ 函数值集合，$mex(S)$ 表示不在 $S$ 中的最小非负整数。 特别地，当 $S$ 为空集，即 $x$ 没有后继节点时，$SG(x)=0$。<br>不难验证：<br>\begin{align}<br>  x~\text{is}\left\lbrace<br>    \begin{aligned}<br>      &amp;\text{P-position}, &amp;SG(x)=0 \<br>      &amp;\text{N-position}, &amp;SG(x)\neq0 \<br>    \end{aligned}<br>  \right.<br>\end{align}</p><h1 id="SG-定理"><a href="#SG-定理" class="headerlink" title="SG 定理"></a>SG 定理</h1><p><strong>游戏和的 $SG$ 函数等于各子游戏的 $SG$ 函数的 $Nim$ 和。</strong><br>具体来说，若游戏 $A$ 可以看做由 $n$ 个互不干扰的子游戏 $(A_1,A_2,\cdots,A_n)$ 构成；也就是对于游戏任一状态 $(x_1,x_2,\cdots,x_n)$，只能选择一个子游戏 $A_i(1\leqslant i\leqslant n)$ 进行操作，得到状态 $(x_1,x_2,\cdots,x’_i,\cdots,x_n)$；那么，$SG_A\big((x_1,x_2,\cdots,x_n)\big)=SG_{A_1}(x_1)\oplus SG_{A_2}(x_2)\oplus \cdots\oplus SG_{A_n}(x_n)$。</p><h2 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h2><p>不妨假设当前游戏状态为 $X=(x_1,x_2,\cdots,x_n)$；记 $X$ 的所有后继状态集合为 $S$；<br>并记 $b=SG_{A_1}(x_1)\oplus SG_{A_2}(x_2)\oplus \cdots\oplus SG_{A_n}(x_n)$。<br>我们的证明分两步：</p><ol><li>$\forall_{0\leqslant a &lt; b},\exists_{X’\in S} SG_{A}(X’) = a.$</li><li>$\forall_{X’\in S} SG_{A}(X’) \neq b.$</li></ol><h3 id="step-1"><a href="#step-1" class="headerlink" title="step 1"></a>step 1</h3><p>记 $c=b\oplus a$；因为 $a &lt; b$，所以必有：若 $c$ 的二进制最高位为 $k$，则 $b$ 的二进制第 $k$ 位也为 1；否则必有 $a &gt; b$。于是必有 $x_i \in X$ 满足 $SG_{A_i}(x_i)$ 的二进制第 $k$ 位为 1。<br>令 $d=c\oplus SG_{A_i}(x_i)$，不难验证：$d &lt; SG_{A_i}(x_i)$。<br>所以，根据 $SG$ 函数的定义可知，子游戏 $A_i$ 必有一个 $SG$ 值为 $d$ 的后继节点 $x_i’$。此时，<br>\begin{align}<br>   &amp;SG_{A_1}(x_1)\oplus SG_{A_2}(x_2)\oplus \cdots\oplus SG_{A_i}(x_i’)\cdots\oplus SG_{A_n}(x_n)\<br>  =&amp;SG_{A_1}(x_1)\oplus SG_{A_2}(x_2)\oplus \cdots\oplus \big(SG_{A_i}(x_i’)=d=c\oplus SG_{A_i}(x_i)=b\oplus a\oplus SG_{A_i}(x_i)\big)\cdots\oplus SG_{A_n}(x_n)\<br>  =&amp;\big(SG_{A_1}(x_1)\oplus SG_{A_2}(x_2)\oplus \cdots\oplus SG_{A_i}(x_i)\cdots\oplus SG_{A_n}(x_n)\big)\oplus b\oplus a\<br>  =&amp;b\oplus b\oplus a=a.<br>\end{align}</p><h3 id="step-2"><a href="#step-2" class="headerlink" title="step 2"></a>step 2</h3><p>不妨操作子游戏 $A_i$ 到状态 $x_i’$ 得到游戏状态 $X’=(x_1,x_2,\cdots,x_i’,\cdots,x_n)$。<br>由 $SG$ 函数的定义可知，$SG_{A_i}(x_i’) \neq SG_{A_i}(x_i)$，即 $SG_{A_i}(x_i’)\oplus SG_{A_i}(x_i)\neq 0$。那么：<br>\begin{align}<br>   &amp;SG_{A_1}(x_1)\oplus SG_{A_2}(x_2)\oplus \cdots\oplus SG_{A_i}(x_i’)\cdots\oplus SG_{A_n}(x_n)\<br>  =&amp;SG_{A_1}(x_1)\oplus SG_{A_2}(x_2)\oplus \cdots\oplus \Big(\big(SG_{A_i}(x_i’)\oplus SG_{A_i}(x_i)\big)\oplus SG_{A_i}(x_i)\Big)\cdots\oplus SG_{A_n}(x_n)\<br>  =&amp;b\oplus SG_{A_i}(x_i’)\oplus SG_{A_i}(x_i) \neq b.<br>\end{align}</p><p><em><strong><a href="http://blog.csdn.net/philipsweng/article/details/48395375">参考链接</a></strong></em></p><h1 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h1><p>由 $SG$ 函数的定义，不难联系到 Nim 游戏。实际上，我们可以用解决 Nim 游戏的方法来构造一般组合游戏的方案。只需要顺着将 $SG(X)$ 变成 0 的方向做出决策就好了。<br>在实际问题上，通常 $x$ 是一个很大的数，但是一般 $SG$ 函数是有规律的（总要给点活路= =），然后只要本地打表找规律。。。</p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><table><thead><tr><th align="center">problems</th><th align="center">categories</th><th align="left">solution/code</th></tr></thead><tbody><tr><td align="center"><em><strong><a href="http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1661">51Nod/1661</a></strong></em></td><td align="center">$SG$ 函数（本地打表找规律）</td><td align="left"><em><strong><a href="/study/math/combinatorial-game/SG/01.cpp" title="Code">Code</a></strong></em></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;NP-状态描述&quot;&gt;&lt;a href=&quot;#NP-状态描述&quot; class=&quot;headerlink&quot; title=&quot;NP 状态描述&quot;&gt;&lt;/a&gt;NP 状态描述&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;无法进行任何移动的局面为 P-position&lt;/li&gt;
&lt;li&gt;可以移动到 P-position 的局面为 N-position&lt;/li&gt;
&lt;li&gt;任意移动都到达 N-position 的局面为 P-position&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Nim-游戏&quot;&gt;&lt;a href=&quot;#Nim-游戏&quot; class=&quot;headerlink&quot; title=&quot;Nim 游戏&quot;&gt;&lt;/a&gt;Nim 游戏&lt;/h1&gt;&lt;p&gt;Nim 游戏是组合游戏中的经典游戏，描述如下：&lt;br&gt;有 $n$ 堆石子，第 $i$ 堆有 $x_i$ 颗石子。$A$、$B$ 两人轮流取石子，每次仅能选择一堆不为空的石子进行操作：取走至少一颗石子。不能操作的人输。&lt;/p&gt;
&lt;p&gt;关于 Nim 游戏有一个著名的结论：当且仅当 $x_1\oplus x_2\oplus\cdots\oplus x_n=0$ 时，先手获胜；否则后手胜。&lt;br&gt;证明很简单，当 $X=x_1\oplus x_2\oplus\cdots\oplus x_n\neq 0$ 时，设 $X$ 的二进制最高位为 $k$，那么一定存在一个 $x_i$ 其第 $k$ 位为 1。我们只需要从第 $i$ 堆石子中取走 $X\oplus x_i$ 个（显然，$X\oplus x_i &amp;lt; x_i$，所以此操作是有效的），那么新的游戏状态下：$x_1\oplus x_2\oplus\cdots(x_i\oplus X)\oplus x_n=X\oplus X=0$。&lt;br&gt;事实上，这也是构造 Nim 游戏方案的方法。&lt;/p&gt;</summary>
    
    
    
    
    <category term="学习笔记" scheme="http://littleclown.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="组合游戏" scheme="http://littleclown.github.io/tags/%E7%BB%84%E5%90%88%E6%B8%B8%E6%88%8F/"/>
    
    <category term="SG 定理" scheme="http://littleclown.github.io/tags/SG-%E5%AE%9A%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>网络流专题</title>
    <link href="http://littleclown.github.io/acm/special-topic/graph-theory/network-flow/"/>
    <id>http://littleclown.github.io/acm/special-topic/graph-theory/network-flow/</id>
    <published>2016-07-30T05:16:55.000Z</published>
    <updated>2019-01-03T02:22:28.466Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>由于网络流问题难点在于建模，实现网络流的代码几乎可以不变，为此，特将下文中将会多次使用到的代码给罗列出来。</p><h2 id="ISAP"><a href="#ISAP" class="headerlink" title="ISAP"></a>ISAP</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> ISAP &#123;<span class="comment">/*&#123;&#123;&#123;*/</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">10000</span>+<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> from, to, cap, flow;</span><br><span class="line">        <span class="built_in">edge</span>(<span class="keyword">int</span> from=<span class="number">0</span>, <span class="keyword">int</span> to=<span class="number">0</span>, <span class="keyword">int</span> cap=<span class="number">0</span>, <span class="keyword">int</span> flow=<span class="number">0</span>):</span><br><span class="line">            <span class="built_in">from</span>(from), <span class="built_in">to</span>(to), <span class="built_in">cap</span>(cap), <span class="built_in">flow</span>(flow) &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> s, t, n;</span><br><span class="line">    <span class="keyword">int</span> cnt[MAXN];</span><br><span class="line">    <span class="keyword">int</span> cur[MAXN];</span><br><span class="line">    <span class="keyword">int</span> path[MAXN];</span><br><span class="line">    <span class="keyword">int</span> dist[MAXN];</span><br><span class="line">    std:: vector&lt;edge&gt; edges;</span><br><span class="line">    std:: vector&lt;<span class="keyword">int</span>&gt; G[MAXN];</span><br><span class="line">    std:: queue&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to, <span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> siz = edges.<span class="built_in">size</span>();</span><br><span class="line">        edges.<span class="built_in">push_back</span>(<span class="built_in">edge</span>(from, to, cap, <span class="number">0</span>));</span><br><span class="line">        edges.<span class="built_in">push_back</span>(<span class="built_in">edge</span>(to, from, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">        G[from].<span class="built_in">push_back</span>(siz);</span><br><span class="line">        G[to].<span class="built_in">push_back</span>(siz+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">        Q.<span class="built_in">push</span>(t);</span><br><span class="line">        dist[t] = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">while</span>( !Q.<span class="built_in">empty</span>() ) &#123;</span><br><span class="line">            <span class="keyword">int</span> o = Q.<span class="built_in">front</span>(); Q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; G[o].<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">                edge&amp; e = edges[G[o][i]];</span><br><span class="line">                <span class="keyword">if</span>( dist[e.to] == INF &amp;&amp; e.cap == <span class="number">0</span> ) &#123;</span><br><span class="line">                    dist[e.to] = dist[o] + <span class="number">1</span>;</span><br><span class="line">                    Q.<span class="built_in">push</span>(e.to);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">augment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mif = INF; </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> o=t; o != s;) &#123;</span><br><span class="line">            edge&amp; e = edges[path[o]];</span><br><span class="line">            mif = std:: <span class="built_in">min</span>(mif, e.cap-e.flow);</span><br><span class="line">            o = e.from;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> o=t; o != s;) &#123;</span><br><span class="line">            edges[path[o]].flow += mif;</span><br><span class="line">            edges[path[o]^<span class="number">1</span>].flow -= mif;</span><br><span class="line">            o = edges[path[o]].from;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mif;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxflow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">BFS</span>();</span><br><span class="line">        <span class="built_in">memset</span>(cur, <span class="number">0</span>, <span class="keyword">sizeof</span> cur);</span><br><span class="line">        <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span> cnt);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; n; ++i) </span><br><span class="line">            <span class="keyword">if</span>( dist[i] &lt; n ) ++cnt[dist[i]];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> o=s; dist[o] &lt; n; ) &#123;</span><br><span class="line">            <span class="keyword">if</span>( o == t ) ans += <span class="built_in">augment</span>(), o = s;</span><br><span class="line">            <span class="keyword">bool</span> ok = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=cur[o]; i &lt; G[o].<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">                edge&amp; e = edges[G[o][i]];</span><br><span class="line">                <span class="keyword">if</span>( e.cap &gt; e.flow &amp;&amp; dist[o] == dist[e.to]+<span class="number">1</span> ) &#123;</span><br><span class="line">                    ok = <span class="literal">true</span>;</span><br><span class="line">                    cur[o] = i;</span><br><span class="line">                    path[e.to] = G[o][i];</span><br><span class="line">                    o = e.to;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>( !ok ) &#123;</span><br><span class="line">                <span class="keyword">int</span> d = n<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; G[o].<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">                    edge&amp; e = edges[G[o][i]];</span><br><span class="line">                    <span class="keyword">if</span>( e.cap &gt; e.flow ) d = std:: <span class="built_in">min</span>(d, dist[e.to]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>( --cnt[dist[o]] == <span class="number">0</span> ) <span class="keyword">break</span>;</span><br><span class="line">                ++cnt[dist[o] = d+<span class="number">1</span>];</span><br><span class="line">                cur[o] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span>( o != s ) o = edges[path[o]].from;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line">&#125;;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br></pre></td></tr></table></figure><h2 id="Dinic"><a href="#Dinic" class="headerlink" title="Dinic"></a>Dinic</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Dinic &#123;<span class="comment">/*&#123;&#123;&#123;*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> from, to, cap, flow;</span><br><span class="line">        <span class="built_in">edge</span>(<span class="keyword">int</span> from=<span class="number">0</span>, <span class="keyword">int</span> to=<span class="number">0</span>, <span class="keyword">int</span> cap=<span class="number">0</span>, <span class="keyword">int</span> flow=<span class="number">0</span>):</span><br><span class="line">            <span class="built_in">from</span>(from), <span class="built_in">to</span>(to), <span class="built_in">cap</span>(cap), <span class="built_in">flow</span>(flow) &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> s, t;</span><br><span class="line">    <span class="keyword">int</span> cur[MAXN];</span><br><span class="line">    <span class="keyword">int</span> dist[MAXN];</span><br><span class="line">    std:: queue&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">    std:: vector&lt;edge&gt; edges;</span><br><span class="line">    std:: vector&lt;<span class="keyword">int</span>&gt; G[MAXN];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to, <span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> siz = edges.<span class="built_in">size</span>();</span><br><span class="line">        edges.<span class="built_in">push_back</span>(<span class="built_in">edge</span>(from, to, cap, <span class="number">0</span>));</span><br><span class="line">        edges.<span class="built_in">push_back</span>(<span class="built_in">edge</span>(to, from, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">        G[from].<span class="built_in">push_back</span>(siz);</span><br><span class="line">        G[to].<span class="built_in">push_back</span>(siz+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dist, <span class="number">-1</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line"></span><br><span class="line">        Q.<span class="built_in">push</span>(s);</span><br><span class="line">        dist[s] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>( !Q.<span class="built_in">empty</span>() ) &#123;</span><br><span class="line">            <span class="keyword">int</span> o = Q.<span class="built_in">front</span>(); Q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; G[o].<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">                edge&amp; e = edges[G[o][i]];</span><br><span class="line">                <span class="keyword">if</span>( dist[e.to] != <span class="number">-1</span> || e.cap &lt;= e.flow ) <span class="keyword">continue</span>;</span><br><span class="line">                dist[e.to] = dist[o]+<span class="number">1</span>;</span><br><span class="line">                Q.<span class="built_in">push</span>(e.to);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dist[t] != <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> minflow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( o == t || minflow == <span class="number">0</span> ) <span class="keyword">return</span> minflow;</span><br><span class="line">        <span class="keyword">int</span> flow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span>&amp; i=cur[o]; i &lt; G[o].<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            edge&amp; e = edges[G[o][i]];</span><br><span class="line">            <span class="keyword">if</span>( dist[e.to] == dist[o]+<span class="number">1</span> ) &#123;</span><br><span class="line">                <span class="keyword">int</span> f = <span class="built_in">DFS</span>(e.to, std:: <span class="built_in">min</span>(minflow, e.cap-e.flow));</span><br><span class="line">                <span class="keyword">if</span>( f &lt;= <span class="number">0</span> ) <span class="keyword">continue</span>;</span><br><span class="line">                e.flow += f;</span><br><span class="line">                edges[G[o][i]^<span class="number">1</span>].flow -= f;</span><br><span class="line">                flow += f;</span><br><span class="line">                minflow -= f;</span><br><span class="line">                <span class="keyword">if</span>( minflow == <span class="number">0</span> ) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxflow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>( <span class="built_in">BFS</span>() ) &#123;</span><br><span class="line">            <span class="built_in">memset</span>(cur, <span class="number">0</span>, <span class="keyword">sizeof</span> cur);</span><br><span class="line">            ans += <span class="built_in">DFS</span>(s, INF);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line">&#125;;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br></pre></td></tr></table></figure><h2 id="MCMF"><a href="#MCMF" class="headerlink" title="MCMF"></a>MCMF</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> MCMF &#123;<span class="comment">/*&#123;&#123;&#123;*/</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">10000</span>+<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> from, to, cap, flow, cost;</span><br><span class="line">        <span class="built_in">edge</span>(<span class="keyword">int</span> from=<span class="number">0</span>, <span class="keyword">int</span> to=<span class="number">0</span>, <span class="keyword">int</span> cap=<span class="number">0</span>, <span class="keyword">int</span> flow=<span class="number">0</span>, <span class="keyword">int</span> cost=<span class="number">0</span>):</span><br><span class="line">            <span class="built_in">from</span>(from), <span class="built_in">to</span>(to), <span class="built_in">cap</span>(cap), <span class="built_in">flow</span>(flow), <span class="built_in">cost</span>(cost) &#123;&#125;</span><br><span class="line">    &#125;; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> s, t;</span><br><span class="line">    <span class="keyword">int</span> cost, flow;</span><br><span class="line">    <span class="keyword">int</span> path[MAXN];</span><br><span class="line">    <span class="keyword">int</span> dist[MAXN];</span><br><span class="line">    std:: vector&lt;edge&gt; edges;</span><br><span class="line">    std:: vector&lt;<span class="keyword">int</span>&gt; G[MAXN];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> source=<span class="number">0</span>, <span class="keyword">int</span> converge=<span class="number">1</span>, <span class="keyword">int</span> N=MAXN)</span> </span>&#123;</span><br><span class="line">        s = source; </span><br><span class="line">        t = converge;</span><br><span class="line">        cost = <span class="number">0</span>;</span><br><span class="line">        flow = <span class="number">0</span>;</span><br><span class="line">        edges.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; N; ++i) G[i].<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to, <span class="keyword">int</span> cap, <span class="keyword">int</span> cost)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> siz = edges.<span class="built_in">size</span>();</span><br><span class="line">        edges.<span class="built_in">push_back</span>(<span class="built_in">edge</span>(from, to, cap, <span class="number">0</span>, cost));</span><br><span class="line">        edges.<span class="built_in">push_back</span>(<span class="built_in">edge</span>(to, from, <span class="number">0</span>, <span class="number">0</span>, -cost));</span><br><span class="line">        G[from].<span class="built_in">push_back</span>(siz);</span><br><span class="line">        G[to].<span class="built_in">push_back</span>(siz+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">SPFA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> std:: queue&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">bool</span> inq[MAXN];</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">        Q.<span class="built_in">push</span>(s);</span><br><span class="line">        inq[s] = <span class="literal">true</span>;</span><br><span class="line">        dist[s] = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">while</span>( !Q.<span class="built_in">empty</span>() ) &#123;</span><br><span class="line">            <span class="keyword">int</span> o = Q.<span class="built_in">front</span>(); Q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; G[o].<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">                edge&amp; e = edges[G[o][i]];</span><br><span class="line">                <span class="keyword">if</span>( e.cap &gt; e.flow &amp;&amp; dist[e.to] &gt; dist[o]+e.cost ) &#123;</span><br><span class="line">                    dist[e.to] = dist[o] + e.cost;</span><br><span class="line">                    path[e.to] = G[o][i];</span><br><span class="line">                    <span class="keyword">if</span>( inq[e.to] ) <span class="keyword">continue</span>;</span><br><span class="line">                    inq[e.to] = <span class="literal">true</span>;</span><br><span class="line">                    Q.<span class="built_in">push</span>(e.to);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            inq[o] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> dist[t] != INF;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std:: <span class="function">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; <span class="title">mincostmaxflow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>( <span class="built_in">SPFA</span>() ) &#123;</span><br><span class="line">            <span class="keyword">int</span> mif = INF;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> o=t; o != s;) &#123;</span><br><span class="line">                edge&amp; e = edges[path[o]];</span><br><span class="line">                mif = std:: <span class="built_in">min</span>(mif, e.cap-e.flow);</span><br><span class="line">                o = e.from;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> o = t; o != s;) &#123;</span><br><span class="line">                edges[path[o]].flow += mif;</span><br><span class="line">                edges[path[o]^<span class="number">1</span>].flow -= mif;</span><br><span class="line">                o = edges[path[o]].from;</span><br><span class="line">            &#125;</span><br><span class="line">            flow += mif;</span><br><span class="line">            cost += mif*dist[t];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> std:: <span class="built_in">make_pair</span>(flow, cost);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line">&#125;;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br></pre></td></tr></table></figure><h2 id="read"><a href="#read" class="headerlink" title="read"></a>read</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;<span class="comment">/*&#123;&#123;&#123;*/</span></span><br><span class="line">    <span class="keyword">bool</span> positive = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(; c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>; c=<span class="built_in">getchar</span>())</span><br><span class="line">        <span class="keyword">if</span>( c == <span class="string">&#x27;-&#x27;</span> ) positive = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(; c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c=<span class="built_in">getchar</span>())</span><br><span class="line">        s = s*<span class="number">10</span> + c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> positive? s: -s;</span><br><span class="line">&#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br></pre></td></tr></table></figure><span id="more"></span><h1 id="网络流-24-题"><a href="#网络流-24-题" class="headerlink" title="网络流 24 题"></a>网络流 24 题</h1><h2 id="01"><a href="#01" class="headerlink" title="01"></a>01</h2><span id="01">**Power OJ/1736 *[飞行员配对方案问题](https://www.oj.swust.edu.cn/problem/show/1736)***</span>经典的二分图模型。- 外籍飞行员作为左侧点，英国飞行员作为右侧点，可以互相配合的飞行员之间连一条容量为 1 的边- 建立源点 $s$，并从 $s$ 对左侧的每个点引一条容量为 1 的边- 建立汇点 $t$，并从右侧的每个点向 $t$ 引一条容量为 1 的边<p>跑最大流。<br>至于方案，仅需考虑满流的边 $\left&lt; \mu,\nu \right&gt;$（其中 $\mu \in$ 左侧的点集，$\nu \in$ 右侧的点集），那么 $\mu$ 和 $\nu$ 是一对搭档。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> ISAP:: <span class="built_in">solve</span>(<span class="keyword">int</span> N, <span class="keyword">int</span> M) &#123;<span class="comment">/*&#123;&#123;&#123;*/</span></span><br><span class="line">    s = <span class="number">0</span>; t = M+<span class="number">1</span>; n = M+<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="built_in">maxflow</span>();</span><br><span class="line">    <span class="keyword">if</span>( ans &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> o=<span class="number">0</span>; o &lt; N; ++o) &#123;</span><br><span class="line">            edge&amp; e = edges[G[<span class="number">0</span>][o]];</span><br><span class="line">            <span class="keyword">if</span>( e.cap == e.flow ) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; i: G[e.to]) &#123;</span><br><span class="line">                    edge&amp; e2 = edges[i];</span><br><span class="line">                    <span class="keyword">if</span>( e2.cap == e2.flow ) &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, e.to, e2.to);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;No Solution!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">int</span> M = <span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;= N; ++i) </span><br><span class="line">        ISAP:: <span class="built_in">addedge</span>(<span class="number">0</span>, i, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=N+<span class="number">1</span>; i &lt;= M; ++i)</span><br><span class="line">        ISAP:: <span class="built_in">addedge</span>(i, M+<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>( <span class="literal">true</span> ) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">int</span> v = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">if</span>( u == <span class="number">-1</span> &amp;&amp; v == <span class="number">-1</span> ) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>( u &gt; v ) std:: <span class="built_in">swap</span>(u, v);</span><br><span class="line">        ISAP:: <span class="built_in">addedge</span>(u, v, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ISAP:: <span class="built_in">solve</span>(N, M);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br></pre></td></tr></table></figure><h2 id="02"><a href="#02" class="headerlink" title="02"></a>02</h2><span id="02">**Power OJ/1737 *[太空飞行计划问题](https://www.oj.swust.edu.cn/problem/show/1737)***</span>经典的最大权闭合图问题。关于最大权闭合图可以参见 ***[网络流基础之最大权闭合图](http://littleclown.github.io/2016/07/24/Study-GT-network-flow-Maximum-weight-Closure-of-a-Graph/)***。- 设实验 $i$ 获利为 $x\_i$，实验仪器 $j$ 花费为 $y\_j$- 将每个实验与实验所需仪器连边，且容量设为 $\infty$- 建立源点 $s$，并从 $s$ 对所有的实验引一条容量为 $\alpha\times x+\beta$ 的边（其中，$\alpha$ 与 $\beta$ 的作用及取值在 ***[网络流基础之最大权闭合图](http://littleclown.github.io/2016/07/24/Study-GT-network-flow-Maximum-weight-Closure-of-a-Graph/)*** 一文中有详细讨论）- 建立汇点 $t$，并从所有的实验仪器向 $t$ 引一条容量为 $\alpha\times y$ 的边<p>跑最大流，$\big(\sum x \big)$-最大流量 即是答案。<br>至于方案，仅需考虑满流的边所连接的节点即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> ISAP:: <span class="built_in">solve</span>(<span class="keyword">int</span> M, <span class="keyword">int</span> N, <span class="keyword">int</span> tot) &#123;<span class="comment">/*&#123;&#123;&#123;*/</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">bool</span> used[MAXN];</span><br><span class="line">        <span class="keyword">static</span> std:: stack&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line">        <span class="built_in">memset</span>(used, <span class="number">0</span>, <span class="keyword">sizeof</span> used);</span><br><span class="line"></span><br><span class="line">        s = <span class="number">0</span>; t = M+N+<span class="number">1</span>; n = M+N+<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = tot-<span class="built_in">maxflow</span>();</span><br><span class="line">        </span><br><span class="line">        st.<span class="built_in">push</span>(s);</span><br><span class="line">        <span class="keyword">while</span>( !st.<span class="built_in">empty</span>() ) &#123;</span><br><span class="line">            <span class="keyword">int</span> o = st.<span class="built_in">top</span>(); st.<span class="built_in">pop</span>();</span><br><span class="line">            used[o] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; i: G[o]) &#123;</span><br><span class="line">                edge&amp; e = edges[i];</span><br><span class="line">                <span class="keyword">if</span>( e.cap &gt; e.flow &amp;&amp; !used[e.to] ) </span><br><span class="line">                    st.<span class="built_in">push</span>(e.to);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;= M; ++i) <span class="keyword">if</span>( used[i] ) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i); <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;= N; ++i) <span class="keyword">if</span>( used[M+i] ) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i); <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans&gt;&gt;<span class="number">16</span>);</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> partail = (<span class="number">1</span>&lt;&lt;<span class="number">16</span>)<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">10000</span>], *ss;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">nextint</span><span class="params">(<span class="keyword">char</span>* &amp;s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(; *s &lt; <span class="string">&#x27;0&#x27;</span> || *s &gt; <span class="string">&#x27;9&#x27;</span>; s++)</span><br><span class="line">        <span class="keyword">if</span>( *s == <span class="string">&#x27;\n&#x27;</span> ) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(; *s &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; *s &lt;= <span class="string">&#x27;9&#x27;</span>; s++)</span><br><span class="line">        num = num*<span class="number">10</span> + *s-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> M = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">int</span> N = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;= M; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span>(ss=s; (*ss=<span class="built_in">getchar</span>()) == <span class="string">&#x27;\n&#x27;</span>; );</span><br><span class="line">        <span class="keyword">for</span>(ss=s+<span class="number">1</span>; (*ss=<span class="built_in">getchar</span>()) != <span class="string">&#x27;\n&#x27;</span>; ++ss);</span><br><span class="line">        ss = s;</span><br><span class="line">        <span class="keyword">int</span> val = <span class="built_in">nextint</span>(ss)&lt;&lt;<span class="number">16</span>|<span class="number">1</span>;</span><br><span class="line">        ISAP:: <span class="built_in">addedge</span>(<span class="number">0</span>, i, val);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> id; (id=<span class="built_in">nextint</span>(ss)) != <span class="number">-1</span>;)</span><br><span class="line">            ISAP:: <span class="built_in">addedge</span>(i, M+id, INF);</span><br><span class="line">        tot += val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> val = <span class="built_in">read</span>()&lt;&lt;<span class="number">16</span>;</span><br><span class="line">        ISAP:: <span class="built_in">addedge</span>(M+i, M+N+<span class="number">1</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ISAP:: <span class="built_in">solve</span>(M, N, tot);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br></pre></td></tr></table></figure><h2 id="03"><a href="#03" class="headerlink" title="03"></a>03</h2><span id="03">**Power OJ/1738 *[最小路径覆盖问题](https://www.oj.swust.edu.cn/problem/show/1738)***</span>经典的有向无环图最小路径覆盖问题。- 最小路径覆盖要求的是有向无环图，将原图每个点拆成两个，显然新图是一个二分图- 求出二分图最大匹配，最小路径覆盖数=原图点数-新图最大匹配数。<p>简单证明：初始时可以看做有 $N$ 个长度为 0 的路径，每得到一个匹配相当于合并两条路径。<br>至于方案，从左侧任意一个未访问过的点出发，经沿着交替路走，得到的就是最小路径覆盖中的一条路径。<br>考虑到使用网络流求出路径比较麻烦 = =，仅给出二分图的 <strong>增广路算法</strong> 的实现。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span><span class="comment">/*&#123;&#123;&#123;*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> hungary &#123;</span><br><span class="line">    <span class="keyword">int</span> L, R;</span><br><span class="line">    std:: vector&lt;<span class="keyword">int</span>&gt; G[MAXN];</span><br><span class="line">    <span class="keyword">int</span> left[MAXN], right[MAXN];</span><br><span class="line">    <span class="keyword">bool</span> mark[MAXN];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> L=<span class="number">0</span>, <span class="keyword">int</span> R=<span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">        hungary:: L = L;</span><br><span class="line">        hungary:: R = R;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>; u &lt;= L; ++u ) G[u].<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">match</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; G[u].<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = G[u][i];</span><br><span class="line">            <span class="keyword">if</span>( !mark[v] ) &#123;</span><br><span class="line">                mark[v] = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span>( !left[v] || <span class="built_in">match</span>(left[v]) ) &#123;</span><br><span class="line">                    left[v] = u;</span><br><span class="line">                    right[u] = v;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(left, <span class="number">0</span>, <span class="keyword">sizeof</span> left);</span><br><span class="line">        <span class="built_in">memset</span>(right, <span class="number">0</span>, <span class="keyword">sizeof</span> right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>; u &lt;= L; ++u) <span class="keyword">if</span>( !right[u] ) &#123;</span><br><span class="line">            <span class="built_in">memset</span>(mark, <span class="number">0</span>, <span class="keyword">sizeof</span> mark);</span><br><span class="line">            <span class="keyword">if</span>( <span class="built_in">match</span>(u) ) ++ans;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memset</span>(mark, <span class="number">0</span>, <span class="keyword">sizeof</span> mark);</span><br><span class="line">        mark[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> o=<span class="number">1</span>; o &lt;= L; ++o) <span class="keyword">if</span>( !mark[o] ) &#123;</span><br><span class="line">            mark[o] = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, o);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> u=right[o]; !mark[u]; u=right[u]) &#123;</span><br><span class="line">                mark[u] = <span class="literal">true</span>; </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>, u);</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, L-ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> positive = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(; c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>; c=<span class="built_in">getchar</span>())</span><br><span class="line">        <span class="keyword">if</span>( c == <span class="string">&#x27;-&#x27;</span> ) positive = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(; c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c=<span class="built_in">getchar</span>())</span><br><span class="line">        s = s*<span class="number">10</span> + c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> positive? s: -s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">int</span> M = <span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">    hungary:: <span class="built_in">init</span>(N, N);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;= M; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">int</span> v = <span class="built_in">read</span>();</span><br><span class="line">        hungary:: G[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hungary:: <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br></pre></td></tr></table></figure><h2 id="04"><a href="#04" class="headerlink" title="04"></a>04</h2><span id="04">**Power OJ/1739 *[魔术球问题](https://www.oj.swust.edu.cn/problem/show/1739)***</span>经典的有向无环图最小路径覆盖问题。- 同样地，拆点得到二分图结构- 如果 $\mu$ 是左侧的点，$\nu$ 是右侧的点，且 $\mu+\nu$ 是一个完全平方数，那么连一条从 $\mu$ 到 $\nu$ 的边- 逐渐加点，直到最小覆盖数超过给定值终止- 假如在 $N+1$ 的时候终止，可以考虑对于前面 $N$ 个点中会与 $N+1$ 形成完全平方数的点删掉最后一条边，再跑一遍最大匹配。<p>路径的问题和 <em><strong><a href="#03">03</a></strong></em> 一样，不再赘述。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span><span class="comment">/*&#123;&#123;&#123;*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">10000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> hungary &#123;</span><br><span class="line">    <span class="keyword">int</span> L, R;</span><br><span class="line">    <span class="keyword">bool</span> mark[MAXN];</span><br><span class="line">    <span class="keyword">int</span> left[MAXN], right[MAXN];</span><br><span class="line">    std:: vector&lt;<span class="keyword">int</span>&gt; G[MAXN];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> L=<span class="number">0</span>, <span class="keyword">int</span> R=<span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">        hungary:: L = L;</span><br><span class="line">        hungary:: R = R;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>; u &lt;= L; ++u ) G[u].<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">match</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; G[u].<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = G[u][i];</span><br><span class="line">            <span class="keyword">if</span>( !mark[v] ) &#123;</span><br><span class="line">                mark[v] = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span>( !left[v] || <span class="built_in">match</span>(left[v]) ) &#123;</span><br><span class="line">                    left[v] = u;</span><br><span class="line">                    right[u] = v;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxmatch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>; u &lt;= L; ++u) <span class="keyword">if</span>( !right[u] ) &#123;</span><br><span class="line">            <span class="built_in">memset</span>(mark, <span class="number">0</span>, <span class="keyword">sizeof</span> mark);</span><br><span class="line">            <span class="keyword">if</span>( <span class="built_in">match</span>(u) ) ++ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> std:: vector&lt;<span class="keyword">int</span>&gt; A;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;= <span class="number">100</span>; ++i) A.<span class="built_in">push_back</span>(i*i);</span><br><span class="line">        <span class="built_in">memset</span>(left, <span class="number">0</span>, <span class="keyword">sizeof</span> left);</span><br><span class="line">        <span class="built_in">memset</span>(right, <span class="number">0</span>, <span class="keyword">sizeof</span> right);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">init</span>(N, N);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;= N; ++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; a: A) <span class="keyword">if</span>( a-i &gt;= <span class="number">1</span> &amp;&amp; a-i &lt; i ) G[a-i].<span class="built_in">push_back</span>(i);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="built_in">maxmatch</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>( <span class="literal">true</span> ) &#123;</span><br><span class="line">            ++L, ++R;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; a: A) <span class="keyword">if</span>( a-L &gt;= <span class="number">1</span> &amp;&amp; a-L &lt; L ) G[a-L].<span class="built_in">push_back</span>(L);</span><br><span class="line">            ans += <span class="built_in">maxmatch</span>();</span><br><span class="line">            <span class="keyword">if</span>( L-ans &gt; N ) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; a: A) <span class="keyword">if</span>( a-L &gt;= <span class="number">1</span> &amp;&amp; a-L &lt; L ) G[a-L].<span class="built_in">pop_back</span>();</span><br><span class="line">        right[left[L]] = <span class="number">0</span>;</span><br><span class="line">        --L; --R;</span><br><span class="line">        <span class="built_in">maxmatch</span>();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, L);</span><br><span class="line">        <span class="built_in">memset</span>(mark, <span class="number">0</span>, <span class="keyword">sizeof</span> mark);</span><br><span class="line">        mark[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> o=<span class="number">1</span>; o &lt;= L; ++o) <span class="keyword">if</span>( !mark[o] ) &#123;</span><br><span class="line">            mark[o] = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, o);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> u=right[o]; !mark[u]; u=right[u]) &#123;</span><br><span class="line">                mark[u] = <span class="literal">true</span>; </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>, u);</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N; std:: cin &gt;&gt; N;</span><br><span class="line">    hungary:: <span class="built_in">solve</span>(N);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br></pre></td></tr></table></figure><h2 id="05"><a href="#05" class="headerlink" title="05"></a>05</h2><span id="05">**Power OJ/1740 *[圆桌问题](https://www.oj.swust.edu.cn/problem/show/1740)***</span>经典的二分图多重匹配问题。- 将不同单位作为左侧点，不同圆桌作为右侧点，每个左侧点与每个右侧点连接一条容量为 1 的边- 建立源点 $s$，并从 $s$ 向所有的左侧点引一条容量为 $cap\_i$ （第 $i$ 个单位的人数）的边- 建立汇点 $t$，并从所有的右侧点向 $t$ 引一条容量为 $cap\_j$ （第 $j$ 张圆桌的容量）的边跑最大流。- 若满流，则有解，方案仅需考虑每个左侧点引出的满流边即可- 若不能满流，则无解<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> ISAP:: <span class="built_in">solve</span>(<span class="keyword">int</span> M, <span class="keyword">int</span> N, <span class="keyword">int</span> tot) &#123;<span class="comment">/*&#123;&#123;&#123;*/</span></span><br><span class="line">    s = <span class="number">0</span>; t = M+N+<span class="number">1</span>; n = M+N+<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="built_in">maxflow</span>();</span><br><span class="line">    <span class="keyword">if</span>( ans &lt; tot ) &#123; <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>); <span class="keyword">return</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> o=<span class="number">1</span>; o &lt;= M; ++o) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; i: G[o]) &#123;</span><br><span class="line">            edge&amp; e = edges[i];</span><br><span class="line">            <span class="keyword">if</span>( e.cap &gt; <span class="number">0</span> &amp;&amp; e.cap == e.flow ) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, e.to-M);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> M = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">int</span> N = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;= M; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> val = <span class="built_in">read</span>();</span><br><span class="line">        tot += val;</span><br><span class="line">        ISAP:: <span class="built_in">addedge</span>(<span class="number">0</span>, i, val);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j &lt;= N; ++j)</span><br><span class="line">            ISAP:: <span class="built_in">addedge</span>(i, M+j, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> val = <span class="built_in">read</span>();</span><br><span class="line">        ISAP:: <span class="built_in">addedge</span>(M+i, N+M+<span class="number">1</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    ISAP:: <span class="built_in">solve</span>(M, N, tot);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br></pre></td></tr></table></figure><h2 id="06"><a href="#06" class="headerlink" title="06"></a>06</h2><span id="06">**Power OJ/1741 *[最长递增子序列问题](https://www.oj.swust.edu.cn/problem/show/1741)***</span>经典的最多最长不相交路径问题。不妨记第 $i$ 个数大小为 $A\_i$。 为了保证每个点只使用一次，拆点。不妨假设原序列第 $i$ 个数对应点 $x\_i$，将其拆成 $x\_i$ 和 $x'\_i$。1. 定义 $dp[i]$ 为以第 $i$ 个数为结尾的最长上升子序列的长度，$O(N^2)$ 的动态规划2. 记最长上升子序列长度为 $ans=\max\big\lbrace dp[i] \big| 1\leqslant i\leqslant N\big\rbrace$。  - 对于任意 $1\leqslant i\leqslant N$，从 $x\_i$ 向 $x'\_i$ 引一条容量为 1 的边（以保证第 $i$ 个数只使用一次）  - 若 $A\_i < A\_j$ 且 $dp[i]+1=dp[j]$，则从 $x\_i'$ 向 $x\_j$ 引一条容量为 1 的边  - 建立源点 $s$，从 $s$ 向 $\big\lbrace x\_i \big| 1\leqslant i\leqslant N$ 且 $dp[i]=1 \big\rbrace$ 引一条容量为 1 的边  - 建立汇点 $t$，从 $\big\lbrace x'\_i \big| 1\leqslant i\leqslant N$ 且 $dp[i]=ans  \big\rbrace$ 向 $t$ 引一条容量为 1 的边  跑最大流即可。3. 在 2. 的基础上，仅需将从源点出发的边及到达汇点的边（不包括反向边）的容量全改为无穷即可<p>原题描述不严谨，如果第一问答案为 2，第三问中，方案 $\big\lbrace x_1,x_N \big\rbrace$ 只能记做一次。<br>最后需要注意的是，当 $N=1$ 时，第三问要特判。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">400</span>+<span class="number">10</span>;<span class="comment">/*&#123;&#123;&#123;*/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[MAXN], in[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;= N; ++i) in[i] = <span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;= N; ++i) </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j &lt; i; ++j)</span><br><span class="line">            <span class="keyword">if</span>( in[i] &gt; in[j] ) </span><br><span class="line">                dp[i] = std:: <span class="built_in">max</span>(dp[i], dp[j]+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;= N; ++i) ans = std:: <span class="built_in">max</span>(ans, dp[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;= N; ++i) &#123; </span><br><span class="line">        <span class="keyword">if</span>( dp[i] == <span class="number">1</span> ) ISAP:: <span class="built_in">addedge</span>(<span class="number">0</span>, i&lt;&lt;<span class="number">1</span>, INF);</span><br><span class="line">        ISAP:: <span class="built_in">addedge</span>(i&lt;&lt;<span class="number">1</span>, i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>( dp[i] == ans ) ISAP:: <span class="built_in">addedge</span>(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, <span class="number">1</span>, INF);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;= N; ++i) </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j &lt;= N; ++j)</span><br><span class="line">            <span class="keyword">if</span>( in[i] &lt; in[j] &amp;&amp; dp[i]+<span class="number">1</span> == dp[j] )</span><br><span class="line">                ISAP:: <span class="built_in">addedge</span>(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, j&lt;&lt;<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    ISAP:: s = <span class="number">0</span>;</span><br><span class="line">    ISAP:: t = <span class="number">1</span>;</span><br><span class="line">    ISAP:: n = N+<span class="number">1</span>&lt;&lt;<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ISAP:: <span class="built_in">maxflow</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( ans == <span class="number">1</span> ) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, N);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; e: ISAP:: edges) e.flow = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; i: ISAP:: G[<span class="number">2</span>]) &#123;</span><br><span class="line">        <span class="keyword">auto</span>&amp; e = ISAP:: edges[i];</span><br><span class="line">        <span class="keyword">if</span>( e.to == <span class="number">3</span> ) &#123; </span><br><span class="line">            e.cap = INF;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; i: ISAP:: G[N&lt;&lt;<span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">auto</span>&amp; e = ISAP:: edges[i];</span><br><span class="line">        <span class="keyword">if</span>( e.to == (N&lt;&lt;<span class="number">1</span>|<span class="number">1</span>) ) &#123;</span><br><span class="line">            e.cap = INF;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ISAP:: <span class="built_in">maxflow</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br></pre></td></tr></table></figure><h2 id="07"><a href="#07" class="headerlink" title="07"></a>07</h2><span id="07">**COGS/732 *[试题库](http://cojs.tk/cogs/problem/problem.php?pid=732)***</span>如 **[05](#05)**，经典的二分图多重匹配问题。- 将每道题与其所属类型连接一条容量为 1 的边- 建立源点 $s$，从 $s$ 向每道试题引一条容量为 1 的边- 建立汇点 $t$，从每个类型向 $t$ 引一条容量为该类型所需要的题数的边<p>跑最大流，仅当流量为所有类型所需要的题数总和时有解。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> ISAP:: <span class="built_in">solve</span>(<span class="keyword">int</span> K, <span class="keyword">int</span> N, <span class="keyword">int</span> limit) &#123;<span class="comment">/*&#123;&#123;&#123;*/</span></span><br><span class="line">    s = <span class="number">0</span>; t = N+K+<span class="number">1</span>; n = N+K+<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>( <span class="built_in">maxflow</span>() != limit ) &#123; <span class="built_in">puts</span>(<span class="string">&quot;NoSolution!&quot;</span>); <span class="keyword">return</span> ; &#125; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> o=<span class="number">1</span>; o &lt;= K; ++o) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d:&quot;</span>, o);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; G[N+o].<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            edge&amp; e = edges[G[N+o][i]];</span><br><span class="line">            <span class="keyword">if</span>( e.to &lt;= N &amp;&amp; e.flow == <span class="number">-1</span> ) <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>, e.to);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">400</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;testlib.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;testlib.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line">    <span class="keyword">int</span> K = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">int</span> N = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">int</span> limit = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;= K; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> val = <span class="built_in">read</span>();</span><br><span class="line">        limit += val;</span><br><span class="line">        ISAP:: <span class="built_in">addedge</span>(N+i, N+K+<span class="number">1</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        ISAP:: <span class="built_in">addedge</span>(<span class="number">0</span>, i, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> M = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">while</span>( M-- ) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = <span class="built_in">read</span>();</span><br><span class="line">            ISAP:: <span class="built_in">addedge</span>(i, N+j, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    ISAP:: <span class="built_in">solve</span>(K, N, limit); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br></pre></td></tr></table></figure><h2 id="08"><a href="#08" class="headerlink" title="08"></a>08</h2><span id="08">**Power OJ/1743 *[机器人路径规划问题](https://www.oj.swust.edu.cn/problem/show/1743)***</span>**暂缺**<h2 id="09"><a href="#09" class="headerlink" title="09"></a>09</h2><span id="09">**Power OJ/1744 *[方格取数问题](https://www.oj.swust.edu.cn/problem/show/1744)***</span>经典的二分图点权最大独立集。将方格二染色得到二分图- 对于左侧的点，向其对应方格的前后左右方格对应的点连接一条容量为$\infty$的边- 建立源点 $s$，从 $s$ 向左侧的点分别引一条`容量为该点所对应的方格中的数`的边- 建立汇点 $t$，从右侧的点分别引一条`容量为该店所对应的方格中的数`的边<p>跑最大流，方格中的数的和 - 最大流量 即是答案。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;<span class="comment">/*&#123;&#123;&#123;*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> row = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">int</span> col = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> r=<span class="number">1</span>; r &lt;= row; ++r)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> c=<span class="number">1</span>; c &lt;= col; ++c) &#123;</span><br><span class="line">            ++idx;</span><br><span class="line">            <span class="keyword">int</span> val = <span class="built_in">read</span>();</span><br><span class="line">            tot += val;</span><br><span class="line">            <span class="keyword">if</span>( (r+c) &amp; <span class="number">1</span> ) ISAP:: <span class="built_in">addedge</span>(idx, row*col+<span class="number">1</span>, val);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                ISAP:: <span class="built_in">addedge</span>(<span class="number">0</span>, idx, val);</span><br><span class="line">                <span class="keyword">if</span>( c &gt; <span class="number">1</span> ) ISAP:: <span class="built_in">addedge</span>(idx, idx<span class="number">-1</span>, INF);</span><br><span class="line">                <span class="keyword">if</span>( r &gt; <span class="number">1</span> ) ISAP:: <span class="built_in">addedge</span>(idx, idx-col, INF);</span><br><span class="line">                <span class="keyword">if</span>( c &lt; col ) ISAP:: <span class="built_in">addedge</span>(idx, idx+<span class="number">1</span>, INF);</span><br><span class="line">                <span class="keyword">if</span>( r &lt; row ) ISAP:: <span class="built_in">addedge</span>(idx, idx+col, INF);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    ISAP:: s = <span class="number">0</span>;</span><br><span class="line">    ISAP:: t = row*col + <span class="number">1</span>;</span><br><span class="line">    ISAP:: n = row*col + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, tot - ISAP:: <span class="built_in">maxflow</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br></pre></td></tr></table></figure><h2 id="10"><a href="#10" class="headerlink" title="10"></a>10</h2><span id="10">**Power OJ/1745 *[餐巾计划问题](https://www.oj.swust.edu.cn/problem/show/1745)***</span>最小费用最大流。设第 $i$ 天有 $A\_i$ 条脏毛巾（可以是之前的脏毛巾累积下来的），需要 $B\_i$ 条干净的毛巾。将第 $i$ 天拆成两个点 $\alpha\_i$，$\beta\_i$。- 建立源点 $s$  * 从 $s$ 向 $\alpha\_i$ 引一条容量为 $B\_i$、`单位流量费用为 0`的边（表示每天会产生 $B\_i$ 条脏毛巾）  * 从 $s$ 向 $\beta\_i$ 引一条容量为 $B\_i$（或者大于等于 $B\_i$ 皆可）、`单位流量费用为新毛巾的费用`的边（表示每天可以购买的新毛巾数）- 建立汇点 $t$  * 从 $\beta\_i$ 向 $t$ 引一条容量为 $B\_i$、`单位流量费用为 0` 的边（表示每天需要的干净的毛巾数）- 如果 $i+m+1 \leqslant j$（此 OJ 本题数据有点不一样，应为 $i+m \leqslant j$），那么从 $A\_i$ 向 $B\_j$ 引一条容量为 $\infty$（大于 $\displaystyle \sum\_{k=1}^i B\_k$ 即可）、单位流量费用为 $f$ 的边（表示第 $i$ 天快洗可以提供给第 $j$ 天；这里有这样一个事实：如果第 $j+k$ 天需要用到快洗的毛巾，那么大可以将脏毛巾攒到第 $i+k$ 天快洗）- 慢细连边类似- 最后，对于 $i < N$，从 $A\_i$ 向 $A\_{i+1}$ 引一条容量为 $\infty$、`单位流量费用为 0` 的边（表示每天留下来的脏毛巾可以免费留到第二天洗）<p>跑最小费用最大流即可，由于每天新毛巾可以直接供应 $B_i$ 条，因此必然可以满流。最小费用即为答案。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;<span class="comment">/*&#123;&#123;&#123;*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">int</span> p = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">int</span> m = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">int</span> f = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">int</span> s = <span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">    MCMF:: <span class="built_in">init</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> val = <span class="built_in">read</span>();</span><br><span class="line">        MCMF:: <span class="built_in">addedge</span>(<span class="number">0</span>, i&lt;&lt;<span class="number">1</span>, val, <span class="number">0</span>);</span><br><span class="line">        MCMF:: <span class="built_in">addedge</span>(<span class="number">0</span>, i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, val, p);</span><br><span class="line">        MCMF:: <span class="built_in">addedge</span>(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, <span class="number">1</span>, val, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>( i+<span class="number">1</span> &lt;= N ) MCMF:: <span class="built_in">addedge</span>(i&lt;&lt;<span class="number">1</span>, (i+<span class="number">1</span>)&lt;&lt;<span class="number">1</span>, INF, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>( i+m &lt;= N ) MCMF:: <span class="built_in">addedge</span>(i&lt;&lt;<span class="number">1</span>, (i+m)&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, INF, f);</span><br><span class="line">        <span class="keyword">if</span>( i+n &lt;= N ) MCMF:: <span class="built_in">addedge</span>(i&lt;&lt;<span class="number">1</span>, (i+n)&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, INF, s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std:: pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; ans = MCMF:: <span class="built_in">mincostmaxflow</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans.second);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br></pre></td></tr></table></figure><h2 id="11"><a href="#11" class="headerlink" title="11"></a>11</h2><span id="11">**Power OJ/1746 *[航空路线问题](https://www.oj.swust.edu.cn/problem/show/1746)***</span>最大费用最大流。其实是求两条最长的不相交路径。- 为了保证每个城市只访问一次，需要拆点；不妨将第 $i$ 个城市拆成 $\alpha\_i$ 和 $\beta\_i$，且从 $\alpha\_i$ 向 $\beta\_i$ 引一条容量为 1，费用为 1 的边- 如果 $i < j$ 且城市 $i$ 和 城市 $j$ 之间有直达航线，那么向 $\beta\_i$ 和 $\alpha\_j$ 连接一条容量为 1，费用为 0 的边<p>跑最大费用最大流（只增广两次），方案根据满流边判断即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span><span class="comment">/*&#123;&#123;&#123;*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> MCMF &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1000</span>+<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> from, to, cap, flow, cost;</span><br><span class="line">        <span class="built_in">edge</span>(<span class="keyword">int</span> from=<span class="number">0</span>, <span class="keyword">int</span> to=<span class="number">0</span>, <span class="keyword">int</span> cap=<span class="number">0</span>, <span class="keyword">int</span> flow=<span class="number">0</span>, <span class="keyword">int</span> cost=<span class="number">0</span>):</span><br><span class="line">            <span class="built_in">from</span>(from), <span class="built_in">to</span>(to), <span class="built_in">cap</span>(cap), <span class="built_in">flow</span>(flow), <span class="built_in">cost</span>(cost) &#123;&#125;</span><br><span class="line">    &#125;; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> s, t;</span><br><span class="line">    <span class="keyword">int</span> path[MAXN];</span><br><span class="line">    <span class="keyword">int</span> dist[MAXN];</span><br><span class="line">    std:: vector&lt;edge&gt; edges;</span><br><span class="line">    std:: vector&lt;<span class="keyword">int</span>&gt; G[MAXN];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to, <span class="keyword">int</span> cap, <span class="keyword">int</span> cost)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> siz = edges.<span class="built_in">size</span>();</span><br><span class="line">        edges.<span class="built_in">push_back</span>(<span class="built_in">edge</span>(from, to, cap, <span class="number">0</span>, cost));</span><br><span class="line">        edges.<span class="built_in">push_back</span>(<span class="built_in">edge</span>(to, from, <span class="number">0</span>, <span class="number">0</span>, -cost));</span><br><span class="line">        G[from].<span class="built_in">push_back</span>(siz);</span><br><span class="line">        G[to].<span class="built_in">push_back</span>(siz+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">SPFA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> std:: queue&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">bool</span> inq[MAXN];</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line"> </span><br><span class="line">        Q.<span class="built_in">push</span>(s);</span><br><span class="line">        inq[s] = <span class="literal">true</span>;</span><br><span class="line">        dist[s] = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">while</span>( !Q.<span class="built_in">empty</span>() ) &#123;</span><br><span class="line">            <span class="keyword">int</span> o = Q.<span class="built_in">front</span>(); Q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; G[o].<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">                edge&amp; e = edges[G[o][i]];</span><br><span class="line">                <span class="keyword">if</span>( e.cap &gt; e.flow &amp;&amp; dist[e.to] &gt; dist[o]+e.cost ) &#123;</span><br><span class="line">                    dist[e.to] = dist[o] + e.cost;</span><br><span class="line">                    path[e.to] = G[o][i];</span><br><span class="line">                    <span class="keyword">if</span>( inq[e.to] ) <span class="keyword">continue</span>;</span><br><span class="line">                    inq[e.to] = <span class="literal">true</span>;</span><br><span class="line">                    Q.<span class="built_in">push</span>(e.to);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            inq[o] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> dist[t] != INF;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(std:: vector&lt;<span class="keyword">int</span>&gt;&amp; ans, <span class="keyword">int</span> o)</span> </span>&#123;</span><br><span class="line">        ans.<span class="built_in">push_back</span>(o&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; i: G[o]) &#123;</span><br><span class="line">            edge&amp; e = edges[i];</span><br><span class="line">            <span class="keyword">if</span>( e.flow == <span class="number">1</span> ) <span class="built_in">DFS</span>(ans, e.to|<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">(std:: string* in)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> std:: vector&lt;<span class="keyword">int</span>&gt; ans[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>( !<span class="built_in">SPFA</span>() ) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> o = t; o != s;) &#123;</span><br><span class="line">                edges[path[o]].flow += <span class="number">1</span>;</span><br><span class="line">                edges[path[o]^<span class="number">1</span>].flow -= <span class="number">1</span>;</span><br><span class="line">                o = edges[path[o]].from;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; i: G[<span class="number">3</span>]) &#123;</span><br><span class="line">            edge&amp; e = edges[i];</span><br><span class="line">            <span class="keyword">if</span>( e.flow == <span class="number">2</span> ) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="number">2</span>);</span><br><span class="line">                std:: cout &lt;&lt; in[<span class="number">1</span>] &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; in[t&gt;&gt;<span class="number">1</span>] &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; in[<span class="number">1</span>] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ans[<span class="number">0</span>].<span class="built_in">push_back</span>(s&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        ans[<span class="number">1</span>].<span class="built_in">push_back</span>(s&gt;&gt;<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; i: G[<span class="number">3</span>]) &#123;</span><br><span class="line">            edge&amp; e = edges[i];</span><br><span class="line">            <span class="keyword">if</span>( e.flow == <span class="number">1</span> ) &#123;</span><br><span class="line">                <span class="built_in">DFS</span>(ans[idx++], e.to|<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ans[<span class="number">1</span>].<span class="built_in">pop_back</span>();</span><br><span class="line">        std:: <span class="built_in">reverse</span>(ans[<span class="number">1</span>].<span class="built_in">begin</span>(), ans[<span class="number">1</span>].<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[<span class="number">0</span>].<span class="built_in">size</span>() + ans[<span class="number">1</span>].<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; a: ans[<span class="number">0</span>]) std:: cout &lt;&lt; in[a] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; a: ans[<span class="number">1</span>]) std:: cout &lt;&lt; in[a] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> positive = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(; c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>; c=<span class="built_in">getchar</span>())</span><br><span class="line">        <span class="keyword">if</span>( c == <span class="string">&#x27;-&#x27;</span> ) positive = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(; c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c=<span class="built_in">getchar</span>())</span><br><span class="line">        s = s*<span class="number">10</span> + c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> positive? s: -s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">100</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">std:: unordered_map&lt;std:: string, <span class="keyword">int</span>&gt; ump;</span><br><span class="line">std:: string in[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">int</span> M = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        std:: cin &gt;&gt; in[i];</span><br><span class="line">        ump[in[i]] = i;</span><br><span class="line">        <span class="keyword">if</span>( i == <span class="number">1</span> || i == N ) MCMF:: <span class="built_in">addedge</span>(i&lt;&lt;<span class="number">1</span>, i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, <span class="number">2</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">else</span> MCMF:: <span class="built_in">addedge</span>(i&lt;&lt;<span class="number">1</span>, i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;= M; ++i) &#123;</span><br><span class="line">        std:: string s, t;</span><br><span class="line">        std:: cin &gt;&gt; s &gt;&gt; t;</span><br><span class="line">        <span class="keyword">int</span> ids = ump[s];</span><br><span class="line">        <span class="keyword">int</span> idt = ump[t];</span><br><span class="line">        <span class="keyword">if</span>( ids &gt; idt ) std:: <span class="built_in">swap</span>(ids, idt);</span><br><span class="line">        <span class="keyword">if</span>( ids == <span class="number">1</span> &amp;&amp; idt == N ) MCMF:: <span class="built_in">addedge</span>(ids&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, idt&lt;&lt;<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">else</span> MCMF:: <span class="built_in">addedge</span>(ids&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, idt&lt;&lt;<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    MCMF:: s = <span class="number">1</span>&lt;&lt;<span class="number">1</span>;</span><br><span class="line">    MCMF:: t = N&lt;&lt;<span class="number">1</span>|<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>( !MCMF:: <span class="built_in">solve</span>(in) ) <span class="built_in">puts</span>(<span class="string">&quot;No Solution!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br></pre></td></tr></table></figure><h2 id="12"><a href="#12" class="headerlink" title="12"></a>12</h2><span id="12">**Power OJ/1747 *[软件补丁问题](https://www.oj.swust.edu.cn/problem/show/1747)***</span>更像一个状压 $dp$。抽象出图的结构，跑最短路即可。定义 $s$ 为当前软件的错误状态，如果 $s$ 中包含 $B1[i]$ 的所有错误，且不包含 $B2[i]$ 中的所有错误，那么存在一条从 $s$ 到 $s-F1[i]+F2[i]$（这里的‘-’指集合运算），且花费为 $cost[i]$ 的边。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span><span class="comment">/*&#123;&#123;&#123;*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> solve &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXN = (<span class="number">1</span>&lt;&lt;<span class="number">20</span>) + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> B1, B2;</span><br><span class="line">        <span class="keyword">int</span> F1, F2;</span><br><span class="line">        <span class="keyword">int</span> cost;</span><br><span class="line">        <span class="built_in">node</span>(<span class="keyword">int</span> B1=<span class="number">0</span>, <span class="keyword">int</span> B2=<span class="number">0</span>, <span class="keyword">int</span> F1=<span class="number">0</span>, <span class="keyword">int</span> F2=<span class="number">0</span>, <span class="keyword">int</span> cost=<span class="number">0</span>):</span><br><span class="line">            <span class="built_in">B1</span>(B1), <span class="built_in">B2</span>(B2), <span class="built_in">F1</span>(F1), <span class="built_in">F2</span>(F2), <span class="built_in">cost</span>(cost) &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> s, t;</span><br><span class="line">    <span class="keyword">int</span> dist[MAXN];</span><br><span class="line">    std:: vector&lt;node&gt; nodes;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">char</span>* s, <span class="keyword">int</span>&amp; x, <span class="keyword">int</span>&amp; y)</span> </span>&#123;</span><br><span class="line">        x = y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; s[i]; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>( s[i] == <span class="string">&#x27;+&#x27;</span> ) x |= <span class="number">1</span>&lt;&lt;i;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>( s[i] == <span class="string">&#x27;-&#x27;</span> ) y |= <span class="number">1</span>&lt;&lt;i;</span><br><span class="line">        &#125;     </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">SPFA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">bool</span> inq[MAXN];</span><br><span class="line">        <span class="keyword">static</span> std:: queue&lt;<span class="keyword">int</span>&gt; Q; </span><br><span class="line"></span><br><span class="line">        <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line"></span><br><span class="line">        Q.<span class="built_in">push</span>(s);</span><br><span class="line">        dist[s] = <span class="number">0</span>;</span><br><span class="line">        inq[s] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>( !Q.<span class="built_in">empty</span>() ) &#123;</span><br><span class="line">            <span class="keyword">int</span> o = Q.<span class="built_in">front</span>(); Q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; e: nodes) &#123;</span><br><span class="line">                <span class="keyword">if</span>( (o&amp;e.B1) == e.B1 &amp;&amp; (o&amp;e.B2) == <span class="number">0</span> ) &#123;</span><br><span class="line">                    <span class="keyword">int</span> u = (o&amp;e.F1) | e.F2;</span><br><span class="line">                    <span class="keyword">if</span>( dist[u] &gt; dist[o]+e.cost ) &#123;</span><br><span class="line">                        dist[u] = dist[o]+e.cost;</span><br><span class="line">                        <span class="keyword">if</span>( !inq[u] ) &#123;</span><br><span class="line">                            inq[u] = <span class="literal">true</span>;</span><br><span class="line">                            Q.<span class="built_in">push</span>(u);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            inq[o] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dist[t] != INF? dist[t]: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> positive = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(; c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>; c=<span class="built_in">getchar</span>())</span><br><span class="line">        <span class="keyword">if</span>( c == <span class="string">&#x27;-&#x27;</span> ) positive = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(; c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c=<span class="built_in">getchar</span>())</span><br><span class="line">        s = s*<span class="number">10</span> + c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> positive? s: -s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">int</span> M = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">int</span> B1, B2, F1, F2, cost, re;</span><br><span class="line">    <span class="keyword">char</span> in[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">    re = (<span class="number">1</span>&lt;&lt;N)<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; M; ++i) &#123;</span><br><span class="line">        cost = <span class="built_in">read</span>();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, in);</span><br><span class="line">        solve:: <span class="built_in">update</span>(in, B1, B2);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, in);</span><br><span class="line">        solve:: <span class="built_in">update</span>(in, F2, F1);</span><br><span class="line">        F1 = re^F1;</span><br><span class="line">        solve:: nodes.<span class="built_in">push_back</span>(solve:: <span class="built_in">node</span>(B1, B2, F1, F2, cost));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    solve:: s = re;</span><br><span class="line">    solve:: t = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, solve:: <span class="built_in">SPFA</span>());</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br></pre></td></tr></table></figure><h2 id="汇总"><a href="#汇总" class="headerlink" title="汇总"></a>汇总</h2><table><thead><tr><th align="center">problems</th><th align="center">categories</th><th align="center">solution</th><th align="center">code</th></tr></thead><tbody><tr><td align="center"><em><strong><a href="https://www.oj.swust.edu.cn/problem/show/1736">Power OJ/1736</a></strong></em></td><td align="center">二分图最大匹配</td><td align="center"><em><strong><a href="#01">01</a></strong></em></td><td align="center"><em><strong><a href="/acm/special-topic/graph-theory/network-flow/01.cpp" title="Code">Code</a></strong></em></td></tr><tr><td align="center"><em><strong><a href="https://www.oj.swust.edu.cn/problem/show/1737">Power OJ/1737</a></strong></em></td><td align="center">最大权闭合图</td><td align="center"><em><strong><a href="#02">02</a></strong></em></td><td align="center"><em><strong><a href="/acm/special-topic/graph-theory/network-flow/02.cpp" title="Code">Code</a></strong></em></td></tr><tr><td align="center"><em><strong><a href="https://www.oj.swust.edu.cn/problem/show/1738">Power OJ/1738</a></strong></em></td><td align="center">最小路径覆盖</td><td align="center"><em><strong><a href="#03">03</a></strong></em></td><td align="center"><em><strong><a href="/acm/special-topic/graph-theory/network-flow/03.cpp" title="Code">Code</a></strong></em></td></tr><tr><td align="center"><em><strong><a href="https://www.oj.swust.edu.cn/problem/show/1739">Power OJ/1739</a></strong></em></td><td align="center">最小路径覆盖</td><td align="center"><em><strong><a href="#04">04</a></strong></em></td><td align="center"><em><strong><a href="/acm/special-topic/graph-theory/network-flow/04.cpp" title="Code">Code</a></strong></em></td></tr><tr><td align="center"><em><strong><a href="https://www.oj.swust.edu.cn/problem/show/1740">Power OJ/1740</a></strong></em></td><td align="center">二分图多重匹配</td><td align="center"><em><strong><a href="#05">05</a></strong></em></td><td align="center"><em><strong><a href="/acm/special-topic/graph-theory/network-flow/05.cpp" title="Code">Code</a></strong></em></td></tr><tr><td align="center"><em><strong><a href="https://www.oj.swust.edu.cn/problem/show/1741">Power OJ/1741</a></strong></em></td><td align="center">最多最长不相交路径</td><td align="center"><em><strong><a href="#06">06</a></strong></em></td><td align="center"><em><strong><a href="/acm/special-topic/graph-theory/network-flow/06.cpp" title="Code">Code</a></strong></em></td></tr><tr><td align="center"><em><strong><a href="http://cojs.tk/cogs/problem/problem.php?pid=732">COGS/732</a></strong></em></td><td align="center">二分图多重匹配</td><td align="center"><em><strong><a href="#07">07</a></strong></em></td><td align="center"><em><strong><a href="/acm/special-topic/graph-theory/network-flow/07.cpp" title="Code">Code</a></strong></em></td></tr><tr><td align="center"><em><strong><a href="https://www.oj.swust.edu.cn/problem/show/1743">Power OJ/1743</a></strong></em></td><td align="center"><strong>暂缺</strong></td><td align="center"><em><strong><a href="#08">08</a></strong></em></td><td align="center"><strong>暂缺</strong></td></tr><tr><td align="center"><em><strong><a href="https://www.oj.swust.edu.cn/problem/show/1744">Power OJ/1744</a></strong></em></td><td align="center">二分图点权最大独立集</td><td align="center"><em><strong><a href="#09">09</a></strong></em></td><td align="center"><em><strong><a href="/acm/special-topic/graph-theory/network-flow/09.cpp" title="Code">Code</a></strong></em></td></tr><tr><td align="center"><em><strong><a href="https://www.oj.swust.edu.cn/problem/show/1745">Power OJ/1745</a></strong></em></td><td align="center">最小费用最大流（难在建图）</td><td align="center"><em><strong><a href="#10">10</a></strong></em></td><td align="center"><em><strong><a href="/acm/special-topic/graph-theory/network-flow/10.cpp" title="Code">Code</a></strong></em></td></tr><tr><td align="center"><em><strong><a href="https://www.oj.swust.edu.cn/problem/show/1746">Power OJ/1746</a></strong></em></td><td align="center">最大费用最大流</td><td align="center"><em><strong><a href="#11">11</a></strong></em></td><td align="center"><em><strong><a href="/acm/special-topic/graph-theory/network-flow/11.cpp" title="Code">Code</a></strong></em></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;实现&quot;&gt;&lt;a href=&quot;#实现&quot; class=&quot;headerlink&quot; title=&quot;实现&quot;&gt;&lt;/a&gt;实现&lt;/h1&gt;&lt;p&gt;由于网络流问题难点在于建模，实现网络流的代码几乎可以不变，为此，特将下文中将会多次使用到的代码给罗列出来。&lt;/p&gt;
&lt;h2 id=&quot;ISAP&quot;&gt;&lt;a href=&quot;#ISAP&quot; class=&quot;headerlink&quot; title=&quot;ISAP&quot;&gt;&lt;/a&gt;ISAP&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; ISAP &amp;#123;&lt;span class=&quot;comment&quot;&gt;/*&amp;#123;&amp;#123;&amp;#123;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; MAXN = &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; INF = &lt;span class=&quot;number&quot;&gt;0x3f3f3f3f&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;edge&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; from, to, cap, flow;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;edge&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; from=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; to=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cap=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; flow=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;from&lt;/span&gt;(from), &lt;span class=&quot;built_in&quot;&gt;to&lt;/span&gt;(to), &lt;span class=&quot;built_in&quot;&gt;cap&lt;/span&gt;(cap), &lt;span class=&quot;built_in&quot;&gt;flow&lt;/span&gt;(flow) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; s, t, n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cnt[MAXN];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cur[MAXN];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; path[MAXN];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; dist[MAXN];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    std:: vector&amp;lt;edge&amp;gt; edges;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    std:: vector&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; G[MAXN];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    std:: queue&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; Q;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addedge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; from, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; to, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cap)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; siz = edges.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        edges.&lt;span class=&quot;built_in&quot;&gt;push_back&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;edge&lt;/span&gt;(from, to, cap, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        edges.&lt;span class=&quot;built_in&quot;&gt;push_back&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;edge&lt;/span&gt;(to, from, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        G[from].&lt;span class=&quot;built_in&quot;&gt;push_back&lt;/span&gt;(siz);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        G[to].&lt;span class=&quot;built_in&quot;&gt;push_back&lt;/span&gt;(siz+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BFS&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(dist, &lt;span class=&quot;number&quot;&gt;0x3f&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt; dist);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Q.&lt;span class=&quot;built_in&quot;&gt;push&lt;/span&gt;(t);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dist[t] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;( !Q.&lt;span class=&quot;built_in&quot;&gt;empty&lt;/span&gt;() ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; o = Q.&lt;span class=&quot;built_in&quot;&gt;front&lt;/span&gt;(); Q.&lt;span class=&quot;built_in&quot;&gt;pop&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; G[o].&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;(); ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                edge&amp;amp; e = edges[G[o][i]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( dist[e.to] == INF &amp;amp;&amp;amp; e.cap == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    dist[e.to] = dist[o] + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    Q.&lt;span class=&quot;built_in&quot;&gt;push&lt;/span&gt;(e.to);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;augment&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; mif = INF; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; o=t; o != s;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            edge&amp;amp; e = edges[path[o]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mif = std:: &lt;span class=&quot;built_in&quot;&gt;min&lt;/span&gt;(mif, e.cap-e.flow);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            o = e.from;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; o=t; o != s;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            edges[path[o]].flow += mif;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            edges[path[o]^&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;].flow -= mif;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            o = edges[path[o]].from;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mif;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;maxflow&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;BFS&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(cur, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt; cur);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(cnt, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt; cnt);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; ++i) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( dist[i] &amp;lt; n ) ++cnt[dist[i]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ans = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; o=s; dist[o] &amp;lt; n; ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( o == t ) ans += &lt;span class=&quot;built_in&quot;&gt;augment&lt;/span&gt;(), o = s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; ok = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=cur[o]; i &amp;lt; G[o].&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;(); ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                edge&amp;amp; e = edges[G[o][i]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( e.cap &amp;gt; e.flow &amp;amp;&amp;amp; dist[o] == dist[e.to]+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    ok = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    cur[o] = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    path[e.to] = G[o][i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    o = e.to;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( !ok ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; d = n&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; G[o].&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;(); ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    edge&amp;amp; e = edges[G[o][i]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( e.cap &amp;gt; e.flow ) d = std:: &lt;span class=&quot;built_in&quot;&gt;min&lt;/span&gt;(d, dist[e.to]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( --cnt[dist[o]] == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ) &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ++cnt[dist[o] = d+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                cur[o] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( o != s ) o = edges[path[o]].from;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;span class=&quot;comment&quot;&gt;/*&amp;#125;&amp;#125;&amp;#125;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;Dinic&quot;&gt;&lt;a href=&quot;#Dinic&quot; class=&quot;headerlink&quot; title=&quot;Dinic&quot;&gt;&lt;/a&gt;Dinic&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; Dinic &amp;#123;&lt;span class=&quot;comment&quot;&gt;/*&amp;#123;&amp;#123;&amp;#123;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;edge&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; from, to, cap, flow;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;edge&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; from=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; to=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cap=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; flow=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;from&lt;/span&gt;(from), &lt;span class=&quot;built_in&quot;&gt;to&lt;/span&gt;(to), &lt;span class=&quot;built_in&quot;&gt;cap&lt;/span&gt;(cap), &lt;span class=&quot;built_in&quot;&gt;flow&lt;/span&gt;(flow) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; s, t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cur[MAXN];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; dist[MAXN];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    std:: queue&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; Q;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    std:: vector&amp;lt;edge&amp;gt; edges;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    std:: vector&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; G[MAXN];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addedge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; from, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; to, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cap)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; siz = edges.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        edges.&lt;span class=&quot;built_in&quot;&gt;push_back&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;edge&lt;/span&gt;(from, to, cap, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        edges.&lt;span class=&quot;built_in&quot;&gt;push_back&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;edge&lt;/span&gt;(to, from, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        G[from].&lt;span class=&quot;built_in&quot;&gt;push_back&lt;/span&gt;(siz);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        G[to].&lt;span class=&quot;built_in&quot;&gt;push_back&lt;/span&gt;(siz+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BFS&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(dist, &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt; dist);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Q.&lt;span class=&quot;built_in&quot;&gt;push&lt;/span&gt;(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dist[s] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;( !Q.&lt;span class=&quot;built_in&quot;&gt;empty&lt;/span&gt;() ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; o = Q.&lt;span class=&quot;built_in&quot;&gt;front&lt;/span&gt;(); Q.&lt;span class=&quot;built_in&quot;&gt;pop&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; G[o].&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;(); ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                edge&amp;amp; e = edges[G[o][i]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( dist[e.to] != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; || e.cap &amp;lt;= e.flow ) &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                dist[e.to] = dist[o]+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Q.&lt;span class=&quot;built_in&quot;&gt;push&lt;/span&gt;(e.to);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dist[t] != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DFS&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; o, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; minflow)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( o == t || minflow == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; minflow;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; flow = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;amp; i=cur[o]; i &amp;lt; G[o].&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;(); ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            edge&amp;amp; e = edges[G[o][i]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( dist[e.to] == dist[o]+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; f = &lt;span class=&quot;built_in&quot;&gt;DFS&lt;/span&gt;(e.to, std:: &lt;span class=&quot;built_in&quot;&gt;min&lt;/span&gt;(minflow, e.cap-e.flow));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( f &amp;lt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ) &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                e.flow += f;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                edges[G[o][i]^&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;].flow -= f;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                flow += f;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                minflow -= f;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( minflow == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ) &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; flow;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;maxflow&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ans = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;( &lt;span class=&quot;built_in&quot;&gt;BFS&lt;/span&gt;() ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(cur, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt; cur);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ans += &lt;span class=&quot;built_in&quot;&gt;DFS&lt;/span&gt;(s, INF);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;span class=&quot;comment&quot;&gt;/*&amp;#125;&amp;#125;&amp;#125;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;MCMF&quot;&gt;&lt;a href=&quot;#MCMF&quot; class=&quot;headerlink&quot; title=&quot;MCMF&quot;&gt;&lt;/a&gt;MCMF&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; MCMF &amp;#123;&lt;span class=&quot;comment&quot;&gt;/*&amp;#123;&amp;#123;&amp;#123;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; MAXN = &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; INF = &lt;span class=&quot;number&quot;&gt;0x3f3f3f3f&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;edge&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; from, to, cap, flow, cost;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;edge&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; from=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; to=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cap=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; flow=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cost=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;from&lt;/span&gt;(from), &lt;span class=&quot;built_in&quot;&gt;to&lt;/span&gt;(to), &lt;span class=&quot;built_in&quot;&gt;cap&lt;/span&gt;(cap), &lt;span class=&quot;built_in&quot;&gt;flow&lt;/span&gt;(flow), &lt;span class=&quot;built_in&quot;&gt;cost&lt;/span&gt;(cost) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; s, t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cost, flow;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; path[MAXN];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; dist[MAXN];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    std:: vector&amp;lt;edge&amp;gt; edges;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    std:: vector&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; G[MAXN];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; source=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; converge=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; N=MAXN)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        s = source; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        t = converge;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cost = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        flow = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        edges.&lt;span class=&quot;built_in&quot;&gt;clear&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; N; ++i) G[i].&lt;span class=&quot;built_in&quot;&gt;clear&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addedge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; from, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; to, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cap, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cost)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; siz = edges.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        edges.&lt;span class=&quot;built_in&quot;&gt;push_back&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;edge&lt;/span&gt;(from, to, cap, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, cost));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        edges.&lt;span class=&quot;built_in&quot;&gt;push_back&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;edge&lt;/span&gt;(to, from, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, -cost));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        G[from].&lt;span class=&quot;built_in&quot;&gt;push_back&lt;/span&gt;(siz);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        G[to].&lt;span class=&quot;built_in&quot;&gt;push_back&lt;/span&gt;(siz+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SPFA&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; std:: queue&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; Q;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; inq[MAXN];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(dist, &lt;span class=&quot;number&quot;&gt;0x3f&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt; dist);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Q.&lt;span class=&quot;built_in&quot;&gt;push&lt;/span&gt;(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        inq[s] = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dist[s] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;( !Q.&lt;span class=&quot;built_in&quot;&gt;empty&lt;/span&gt;() ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; o = Q.&lt;span class=&quot;built_in&quot;&gt;front&lt;/span&gt;(); Q.&lt;span class=&quot;built_in&quot;&gt;pop&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; G[o].&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;(); ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                edge&amp;amp; e = edges[G[o][i]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( e.cap &amp;gt; e.flow &amp;amp;&amp;amp; dist[e.to] &amp;gt; dist[o]+e.cost ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    dist[e.to] = dist[o] + e.cost;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    path[e.to] = G[o][i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( inq[e.to] ) &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    inq[e.to] = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    Q.&lt;span class=&quot;built_in&quot;&gt;push&lt;/span&gt;(e.to);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            inq[o] = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dist[t] != INF;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    std:: &lt;span class=&quot;function&quot;&gt;pair&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&quot;title&quot;&gt;mincostmaxflow&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;( &lt;span class=&quot;built_in&quot;&gt;SPFA&lt;/span&gt;() ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; mif = INF;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; o=t; o != s;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                edge&amp;amp; e = edges[path[o]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                mif = std:: &lt;span class=&quot;built_in&quot;&gt;min&lt;/span&gt;(mif, e.cap-e.flow);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                o = e.from;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; o = t; o != s;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                edges[path[o]].flow += mif;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                edges[path[o]^&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;].flow -= mif;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                o = edges[path[o]].from;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            flow += mif;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cost += mif*dist[t];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; std:: &lt;span class=&quot;built_in&quot;&gt;make_pair&lt;/span&gt;(flow, cost);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;span class=&quot;comment&quot;&gt;/*&amp;#125;&amp;#125;&amp;#125;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;read&quot;&gt;&lt;a href=&quot;#read&quot; class=&quot;headerlink&quot; title=&quot;read&quot;&gt;&lt;/a&gt;read&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;span class=&quot;comment&quot;&gt;/*&amp;#123;&amp;#123;&amp;#123;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; positive = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; c = &lt;span class=&quot;built_in&quot;&gt;getchar&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; s = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(; c &amp;lt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt; || c &amp;gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;9&amp;#x27;&lt;/span&gt;; c=&lt;span class=&quot;built_in&quot;&gt;getchar&lt;/span&gt;())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( c == &lt;span class=&quot;string&quot;&gt;&amp;#x27;-&amp;#x27;&lt;/span&gt; ) positive = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(; c &amp;gt;= &lt;span class=&quot;string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt; &amp;amp;&amp;amp; c &amp;lt;= &lt;span class=&quot;string&quot;&gt;&amp;#x27;9&amp;#x27;&lt;/span&gt;; c=&lt;span class=&quot;built_in&quot;&gt;getchar&lt;/span&gt;())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        s = s*&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; + c-&lt;span class=&quot;string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; positive? s: -s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;comment&quot;&gt;/*&amp;#125;&amp;#125;&amp;#125;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="ACM" scheme="http://littleclown.github.io/tags/ACM/"/>
    
    <category term="解题报告" scheme="http://littleclown.github.io/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
    <category term="二分图" scheme="http://littleclown.github.io/tags/%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    
    <category term="网络流" scheme="http://littleclown.github.io/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
    <category term="专题训练" scheme="http://littleclown.github.io/tags/%E4%B8%93%E9%A2%98%E8%AE%AD%E7%BB%83/"/>
    
  </entry>
  
  <entry>
    <title>网络流基础之最大权闭合图</title>
    <link href="http://littleclown.github.io/study/codding/graph-theory/network-flow/maximum-weight-Closure-of-a-Graph/"/>
    <id>http://littleclown.github.io/study/codding/graph-theory/network-flow/maximum-weight-Closure-of-a-Graph/</id>
    <published>2016-07-24T06:06:44.000Z</published>
    <updated>2019-01-03T02:22:28.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>对于有向图 $G=(V,E)$，其中 $V$ 为 $G$ 的点集，$E$ 为 $G$ 的边集。</p><ul><li><strong>割集</strong>: 一个 $s$–$t$ 割 $[S,T]$ 是 $V$ 的一种划分，使得 $s\in S$、$t\in T$</li><li><strong>最小割</strong>: 一个 $s$–$t$ 割的容量是 $\displaystyle c(S,T) = \sum_{(\mu,\nu) \in (S\times T)\bigcap E} c(\mu,\nu)$；容量最小的割集称为最小割</li><li><strong>简单割</strong>：若一个 $s$–$t$ 割满足割中的每条边都只与源点 $s$ 或汇点 $t$ 相连，则称该割为简单割</li><li><strong>闭合图</strong>：若点集 $V’ \in V$ 是一个闭合图，那么对于 $\forall \left&lt; \mu, \nu\right &gt; \in E$，若 $\mu \in V’$ 则必有 $\nu \in V’$</li><li><strong>最大权闭合图</strong>： 一个点权和最大的闭合图<span id="more"></span><img src="1.png" style="float:middle"></li></ul><p>上图中，有 9 个闭合图（含空集）：$\emptyset$，$\lbrace 3,4,5 \rbrace$，$\lbrace 4,5 \rbrace$，$\lbrace 5 \rbrace$，$\lbrace 1,2,4,5 \rbrace$，$\lbrace 2,5 \rbrace$，$\lbrace 2,4,5 \rbrace$，$\lbrace 2,3,4,5 \rbrace$，$\lbrace 1,2,3,4,5 \rbrace$。其中，惟一的最大权闭合图为 $\lbrace 3,4,5 \rbrace$，且权和为 4。</p><h2 id="最大流最小割定理"><a href="#最大流最小割定理" class="headerlink" title="最大流最小割定理"></a>最大流最小割定理</h2><p>设 $f$ 为流网络 $G=(V,E)$ 中的一个流, 该流网络的源节点为 $s$, 汇点为 $t$, 则下面的条件是等价的:</p><ul><li>$f$ 是 $G$ 的一个最大流</li><li>残流网络 $G_f$ 不包含任何增广路径</li><li>$|f|=c(S,T)$, 其中 $[S,T]$ 是流网络 $G$ 的最小割</li></ul><h1 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h1><p>将原图转化为网络 $N=(V_N, E_N)$：</p><ul><li>将原图中的所有有向边 $\left&lt; \mu, \nu\right &gt; \in E$ 替换为容量为 $c(\mu,\nu)=\infty$ 的有向边 $\left&lt; \mu,\nu \right &gt; \in E_N$</li><li>在此基础上增加源点 $s$ 和汇点 $t$</li><li>由源点向原图中的所有正权点 $\nu(\omega_\nu &gt; 0)$ 连接一条容量为 $c(s,\nu)=\omega_\nu$ 的有向边 $\left&lt; s,\nu \right &gt; \in E_N$</li><li>由原图中的所有负权点 $\nu(\omega_\nu &lt; 0)$ 连接一条容量为 $c(\nu,t)=-\omega_\nu$ 的有向边 $\left&lt; \nu,t \right &gt; \in E_N$</li></ul><p>也就是<br>\begin{align}<br>&amp;V_N=V \bigcup \lbrace s,t \rbrace \<br>&amp;E_N=E \bigcup \big\lbrace \left&lt; s,\nu \right&gt; \big| \nu\in V, \omega_\nu &gt; 0 \big\rbrace \bigcup \big\lbrace \left&lt; \nu,t \right&gt; \big| \nu\in V, \omega_\nu &lt; 0 \big\rbrace \<br>&amp;\left \lbrace \begin{aligned}<br>&amp;c(\mu,\nu)=\infty &amp; \left&lt; \mu,\nu \right&gt; \in E \<br>&amp;c(s,\nu)=\omega_\nu &amp; \omega_\nu &gt; 0 \<br>&amp;c(\nu,t)=-\omega_\nu &amp; \omega_\nu &lt; 0<br>\end{aligned} \right.<br>\end{align}</p><p>这里 $\displaystyle \infty &gt; \sum_{\nu \in V} \big| W_\nu \big|$。</p><p>原图 $G$ 构成的网络 $N$ 如下图<br><img src="2.png" style="float:middle"></p><p>先给出结论：</p><blockquote><p>若</p></blockquote><ul><li>原图所有正权点的点权和为 $totalval$</li><li>对该网络跑最大流，且最大流为 $maxflow$， 所得到的最小割为 $[S,T]$</li></ul><blockquote><p>那么</p></blockquote><ul><li>原图的最大权闭合图的<strong>权和为 $totalval-maxflow$</strong></li><li>并且，$S-\lbrace s \rbrace$ 为原图<strong>点数最少</strong>的<strong>最大权闭合图</strong></li></ul><h1 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h1><p><span id="1">【引理 1】</span> 本问题的网络 $N$ 中，最小割是简单割。<br>简单地说明一下，由于除与源点 $s$ 或汇点 $t$ 直接相连的边的容量是有限的，其它边是无限的，那么最小割中显然不会出现容量为无限的边（因为强行割断所有与源点相连的边可以构成一个割集，且割的容量是有限的，最小割的容量不会比这个大），所以该最小割是简单割。</p><hr><p>记 $G_1$ 是原图 $G$ 的一个 <code>闭合子图</code>，$V_1$ 为 $G_1$ 的点集；$\overline{V_1}$ 为点集 $V_1$ 在原图 $G$ 中的补集，即 $V_1 \bigcup \overline{V_1}=V$。<br><span id="2">【引理 2】</span> 网络 $N$ 的简单割 $[S,T]$ 与图 $G$ 的闭合子图 $G_1$ 存在一个一一对应关系：$V_1 \bigcup \lbrace s \rbrace = S$。</p><ul><li>闭合图对应简单割：即 $S=V_1 \bigcup \lbrace s \rbrace$，$T=\overline{V_1} \bigcup \lbrace t \rbrace$，求证 $[S,T]$ 为简单割。<blockquote><p>因为 $V_1$ 是一个闭合图，所以不存在 $\left&lt; \mu,\nu \right&gt; \in E$，其中 $\mu \in S-\lbrace s \rbrace$，$\nu \in T-\lbrace t \rbrace$。也就是不存在不与源汇有关联的边，其两个端点分别在 $V_1$ 和 $\overline{V_1}$ 中，所以 $[S,T]$ 是一个割集。由 <strong><a href="#1">引理 1</a></strong> 可知，$[S,T]$ 是一个简单割。</p></blockquote></li><li>简单割对应闭合图：即证明 $V_1=S-\lbrace s \rbrace$ 是一个闭合图。<blockquote><p>若 $\mu \in S-\lbrace s \rbrace$，$\nu \in T-\lbrace t \rbrace$；显然不存在边 $\left&lt; \mu,\nu \right&gt; \in E$，否则与 $[S,T]$ 是割集矛盾（因为 $c(\mu,\nu)=\infty$）。</p></blockquote></li></ul><hr><p>记 $V^+$ 为 $V$ 中 <code>点权为正</code> 的最大点集，$V^-$ 为 $V$ 中 <code>点权为负</code> 的最大点集；类似地，定义 $V_1^+$、$V_1^-$、$\overline{V_1}^+$、$\overline{V_1}^-$。<br><span id="3">【引理 3】</span> 在 <strong><a href="#2">引理 2</a></strong> 的一 一对应关系下（即 $V_1\bigcup\lbrace s \rbrace=S$、$\overline{V_1}\bigcup\lbrace t \rbrace=T$），有：<br><span id="eq1">$$\displaystyle c[S,T]=\sum_{\nu\in \overline{V_1}^+} \omega_\nu + \sum_{\nu\in V_1^-} \left( -\omega_\nu \right) \tag{1}$$</span></p><blockquote><p>显然，$\displaystyle \Big[S,T\Big] = \left[\lbrace s\rbrace,\overline{V_1}\right] \bigcup \Big[\lbrace t\rbrace,V_1\Big] \bigcup \left[\overline{V_1},V_1\right]$ （分析构造图的源汇关联情况不难得出结论）</p></blockquote><ul><li>$[S,T]$ 是简单割，故 $\left[\overline{V_1},V_1\right] = \emptyset$</li><li>$s$ 只与正权点连边，故 $\left[\lbrace s\rbrace,\overline{V_1}\right] = \left[\lbrace s\rbrace,\overline{V_1}^+\right] $ </li><li>$t$ 只与负权点连边，故 $\left[\lbrace t\rbrace,V_1\right] = \left[\lbrace t\rbrace,V_1^-\right] $ <blockquote><p>因此，$\displaystyle \Big[S,T\Big] = \left[\lbrace s\rbrace,\overline{V_1}^+\right] \bigcup \Big[\lbrace t\rbrace,V_1^-\Big]$；即可证明 <strong><a href="#eq1">(1)</a></strong> 式</p></blockquote></li></ul><hr><p><span id="4">【引理 4】（最优性）</span> 当网络 $N$ 取得最小割时，其对应的图 $G$ 的闭合图（$V_1=S-{s}$）将取得最大权</p><blockquote><p>按照定义，闭合图的权值为 <strong>正权点的权的绝对值和 - 负权点的权的绝对值和</strong>，即<br>    <span id="eq2">$$\omega(V_1) = \sum_{\nu\in V_1^+}\omega_\nu - \sum_{\nu\in V_1^-}(-\omega_\nu) \tag{2}$$</span><br>    由 <strong><a href="#eq1">(1)</a><strong>、</strong><a href="#eq2">(2)</a></strong> 式，可得：<br>    \begin{align}<br>      \omega(V_1) + c[S,T]<br>      &amp;= \sum_{\nu\in V_1^+}\omega_\nu - \sum_{\nu\in V_1^-}(-\omega_\nu) + \sum_{\nu\in \overline{V_1}^+} \omega_\nu + \sum_{\nu\in V_1^-} \left( -\omega_\nu \right) \<br>      &amp;= \sum_{\nu\in V_1^+}\omega_\nu + \sum_{\nu\in \overline{V_1}^+} \omega_\nu  \<br>      &amp;= \sum_{\nu\in V^+} \omega_\nu<br>    \end{align}<br>    整理得：<br>    $$\omega(V_1) = \sum_{\nu\in V^+}\omega_\nu - c[S,T]$$</p></blockquote><h1 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h1><p><span id="f1">参考资料</span>：***<a href="/study/codding/graph-theory/network-flow/maximum-weight-Closure-of-a-Graph/%E8%83%A1%E4%BC%AF%E6%B6%9B%E3%80%8A%E6%9C%80%E5%B0%8F%E5%89%B2%E6%A8%A1%E5%9E%8B%E5%9C%A8%E4%BF%A1%E6%81%AF%E5%AD%A6%E7%AB%9E%E8%B5%9B%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8%E3%80%8B.pdf" title="《最小割模型在信息学竞赛中的应用》--by 胡伯涛">《最小割模型在信息学竞赛中的应用》--by 胡伯涛</a>***</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;p&gt;对于有向图 $G=(V,E)$，其中 $V$ 为 $G$ 的点集，$E$ 为 $G$ 的边集。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;割集&lt;/strong&gt;: 一个 $s$–$t$ 割 $[S,T]$ 是 $V$ 的一种划分，使得 $s\in S$、$t\in T$&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最小割&lt;/strong&gt;: 一个 $s$–$t$ 割的容量是 $\displaystyle c(S,T) = \sum_{(\mu,\nu) \in (S\times T)\bigcap E} c(\mu,\nu)$；容量最小的割集称为最小割&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;简单割&lt;/strong&gt;：若一个 $s$–$t$ 割满足割中的每条边都只与源点 $s$ 或汇点 $t$ 相连，则称该割为简单割&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;闭合图&lt;/strong&gt;：若点集 $V’ \in V$ 是一个闭合图，那么对于 $\forall \left&amp;lt; \mu, \nu\right &amp;gt; \in E$，若 $\mu \in V’$ 则必有 $\nu \in V’$&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最大权闭合图&lt;/strong&gt;： 一个点权和最大的闭合图</summary>
    
    
    
    
    <category term="网络流" scheme="http://littleclown.github.io/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
    <category term="最大权闭合图" scheme="http://littleclown.github.io/tags/%E6%9C%80%E5%A4%A7%E6%9D%83%E9%97%AD%E5%90%88%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>2016 多校第 2 场</title>
    <link href="http://littleclown.github.io/acm/contest/multi-university-training/2016/2/"/>
    <id>http://littleclown.github.io/acm/contest/multi-university-training/2016/2/</id>
    <published>2016-07-22T11:14:40.000Z</published>
    <updated>2019-01-03T02:22:28.206Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1004-Differencia"><a href="#1004-Differencia" class="headerlink" title="1004 Differencia"></a>1004 Differencia</h1><p><em><strong><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5737">题目链接</a></strong></em></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>有两个序列：$\displaystyle \big\lbrace a_1, a_2, \cdots, a_n \big\rbrace$，$\displaystyle \big\lbrace b_1, b_2, \cdots, b_n \big\rbrace$<br>有两种操作：</p><ul><li>$+<del>l</del>r~x$ 将所有的 $a_i(l \leqslant i\leqslant r)$ 置为 $x$</li><li>$?<del>l</del>r$ 询问 $l\leqslant i\leqslant r$ 中有多少个 $i$ 满足 $a_i \geqslant b_i$</li></ul><p><strong>数据范围</strong>：$1\leqslant n\leqslant 10^5$，$3\times 10^6$ 次询问，强制在线。</p><span id="more"></span><h2 id="题目简析"><a href="#题目简析" class="headerlink" title="题目简析"></a>题目简析</h2><p>将 $B$ 数组建成归并树（用线段树实现即可），并预处理出初始的 $a_i \geqslant b_i$ 的前缀和，用该线段树维护。<br>那么，对于每次查询就是简单的线段树区间求和问题，复杂度为 $O(n\log n)$。<br>由于修改操作是将一个区间内所有的 $a_i$ 置为 $x$，区间修改将影响线段树中 $O(\log n)$ 个节点；对于每个节点，直接二分即可知道有多少这个区间内有多少个点满足 $b_i \leqslant x$ 了。<br>这么做的时间复杂度是 $O(n\log n + q\log^2 n)$ 的，遗憾的是，出题人只给 $O(n\log n)$ 以下的复杂度过。<br>如果预处理初每个节点所维护的区间中每个节点在左右子节点中的 $rank$，这个可以线扫，总复杂度为 $O(n\log n)$；不难发现，每次在节点所维护的区间内查找有多少个点小于等于 $x$ 操作仅需在根节点处二分一次，之后 $O(1)$ 转移，复杂度降为 $O((n+q)\log n)$。</p><h2 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span><span class="comment">/*&#123;&#123;&#123;*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> positive = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(; c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>; c=<span class="built_in">getchar</span>())</span><br><span class="line">        <span class="keyword">if</span>( c == <span class="string">&#x27;-&#x27;</span> ) positive = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(; c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c=<span class="built_in">getchar</span>())</span><br><span class="line">        s = s*<span class="number">10</span> + c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> positive? s: -s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> solve &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">100000</span>+<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> A[MAXN], B[<span class="number">20</span>][MAXN], L[<span class="number">20</span>][MAXN], R[<span class="number">20</span>][MAXN];</span><br><span class="line">    <span class="keyword">int</span> sumv[MAXN&lt;&lt;<span class="number">2</span>], setv[MAXN&lt;&lt;<span class="number">2</span>], posv[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> lft, <span class="keyword">int</span> rht, <span class="keyword">int</span> cur=<span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">        setv[o] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>( lft == rht ) &#123;</span><br><span class="line">            B[cur][lft] = <span class="built_in">read</span>();</span><br><span class="line">            sumv[o] = A[lft] &gt;= B[cur][lft]? <span class="number">1</span>: <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = lft+rht &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">build</span>(o&lt;&lt;<span class="number">1</span>, lft, mid, cur+<span class="number">1</span>);</span><br><span class="line">            <span class="built_in">build</span>(o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, rht, cur+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> tot = lft, i = lft, j = mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(; i &lt;= mid &amp;&amp; j &lt;= rht;)</span><br><span class="line">                <span class="keyword">if</span>( B[cur+<span class="number">1</span>][i] &lt;= B[cur+<span class="number">1</span>][j] ) B[cur][tot++] = B[cur+<span class="number">1</span>][i++];</span><br><span class="line">                <span class="keyword">else</span> B[cur][tot++] = B[cur+<span class="number">1</span>][j++];</span><br><span class="line">            <span class="keyword">for</span>(; i &lt;= mid;) B[cur][tot++] = B[cur+<span class="number">1</span>][i++];</span><br><span class="line">            <span class="keyword">for</span>(; j &lt;= rht;) B[cur][tot++] = B[cur+<span class="number">1</span>][j++];</span><br><span class="line">            sumv[o] = sumv[o&lt;&lt;<span class="number">1</span>] + sumv[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">            </span><br><span class="line">      <span class="comment">// 计算区间 [lft,rht] 的每个节点在左右子节点中的 rank</span></span><br><span class="line">            L[cur][lft] = lft; </span><br><span class="line">            R[cur][lft] = mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span>&amp; l=L[cur][lft]; l &lt;= mid &amp;&amp; B[cur+<span class="number">1</span>][l] &lt;= B[cur][lft]; ++l);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span>&amp; r=R[cur][lft]; r &lt;= rht &amp;&amp; B[cur+<span class="number">1</span>][r] &lt;= B[cur][lft]; ++r);</span><br><span class="line">            --L[cur][lft];</span><br><span class="line">            --R[cur][lft];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=lft+<span class="number">1</span>; i &lt;= rht; ++i) &#123;</span><br><span class="line">                L[cur][i] = L[cur][i<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">                R[cur][i] = R[cur][i<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span>&amp; l=L[cur][i]; l &lt;= mid &amp;&amp; B[cur+<span class="number">1</span>][l] &lt;= B[cur][i]; ++l);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span>&amp; r=R[cur][i]; r &lt;= rht &amp;&amp; B[cur+<span class="number">1</span>][r] &lt;= B[cur][i]; ++r);</span><br><span class="line">                --L[cur][i];</span><br><span class="line">                --R[cur][i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> lft, <span class="keyword">int</span> rht, <span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lc = o&lt;&lt;<span class="number">1</span>, rc = o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid = lft+rht&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        setv[lc] = setv[o]; posv[lc] = posv[o] &gt;= lft? L[cur][posv[o]]: lft<span class="number">-1</span>;</span><br><span class="line">        setv[rc] = setv[o]; posv[rc] = posv[o] &gt;= lft? R[cur][posv[o]]: mid;</span><br><span class="line">        sumv[lc] = posv[lc]-lft+<span class="number">1</span>;</span><br><span class="line">        sumv[rc] = posv[rc]-mid;</span><br><span class="line">        setv[o] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ul, ur, uv;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> lft, <span class="keyword">int</span> rht, <span class="keyword">int</span> pos, <span class="keyword">int</span> cur=<span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( lft == rht ) &#123;</span><br><span class="line">            sumv[o] = uv &gt;= B[cur][lft]? <span class="number">1</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( ul &lt;= lft &amp;&amp; rht &lt;= ur ) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = lft+rht &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            setv[o] = uv;</span><br><span class="line">            posv[o] = pos;</span><br><span class="line">            sumv[o] = pos-lft+<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>( setv[o] ) <span class="built_in">pushdown</span>(o, lft, rht, cur);</span><br><span class="line">            <span class="keyword">int</span> mid = lft+rht &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>( ul &lt;= mid ) <span class="built_in">update</span>(o&lt;&lt;<span class="number">1</span>, lft, mid, pos &gt;= lft? L[cur][pos]: lft<span class="number">-1</span>, cur+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>( mid &lt; ur ) <span class="built_in">update</span>(o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, rht, pos &gt;= lft? R[cur][pos]: mid, cur+<span class="number">1</span>);</span><br><span class="line">            sumv[o] = sumv[o&lt;&lt;<span class="number">1</span>] + sumv[o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> ql, qr;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> lft, <span class="keyword">int</span> rht, <span class="keyword">int</span> cur=<span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( ql &lt;= lft &amp;&amp; rht &lt;= qr ) <span class="keyword">return</span> sumv[o];</span><br><span class="line">        <span class="keyword">if</span>( setv[o] ) <span class="built_in">pushdown</span>(o, lft, rht, cur);</span><br><span class="line">        <span class="keyword">int</span> mid = lft+rht &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>( ql &lt;= mid ) ans += <span class="built_in">query</span>(o&lt;&lt;<span class="number">1</span>, lft, mid, cur+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>( mid &lt; qr ) ans += <span class="built_in">query</span>(o&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, rht, cur+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1000000000</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> C = ~(<span class="number">1</span>&lt;&lt;<span class="number">31</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = (<span class="number">1</span>&lt;&lt;<span class="number">16</span>)<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, A, B, a, b, last;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">rnd</span><span class="params">(<span class="keyword">int</span> last)</span> </span>&#123;</span><br><span class="line">    a = (<span class="number">36969</span> + (last &gt;&gt; <span class="number">3</span>)) * (a &amp; M) + (a &gt;&gt; <span class="number">16</span>);</span><br><span class="line">    b = (<span class="number">18000</span> + (last &gt;&gt; <span class="number">3</span>)) * (b &amp; M) + (b &gt;&gt; <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">return</span> (C &amp; ((a &lt;&lt; <span class="number">16</span>) + b)) % <span class="number">1000000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T_T = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> kase=<span class="number">1</span>; kase &lt;= T_T; ++kase) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;A, &amp;B);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;= n; ++i) solve:: A[i] = <span class="built_in">read</span>();</span><br><span class="line">        solve:: <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);        </span><br><span class="line"></span><br><span class="line">        LL ans = <span class="number">0LL</span>;</span><br><span class="line">        a = A, b = B, last = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> l = <span class="built_in">rnd</span>(last) % n + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> r = <span class="built_in">rnd</span>(last) % n + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> x = <span class="built_in">rnd</span>(last) + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>( l &gt; r ) std:: <span class="built_in">swap</span>(l, r);</span><br><span class="line">            <span class="keyword">if</span>( (l + r + x) &amp; <span class="number">1</span> ) &#123;</span><br><span class="line">                solve:: ul = l;</span><br><span class="line">                solve:: ur = r;</span><br><span class="line">                solve:: uv = x;</span><br><span class="line">                <span class="keyword">int</span> pos = std:: <span class="built_in">upper_bound</span>(solve:: B[<span class="number">0</span>]+<span class="number">1</span>, solve:: B[<span class="number">0</span>]+n+<span class="number">1</span>, x)-solve:: B[<span class="number">0</span>]<span class="number">-1</span>;</span><br><span class="line">                solve:: <span class="built_in">update</span>(<span class="number">1</span>, <span class="number">1</span>, n, pos); </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                solve:: ql = l;</span><br><span class="line">                solve:: qr = r;</span><br><span class="line">                last = solve:: <span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">                ans = (ans + (LL) i * last) % MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;1004-Differencia&quot;&gt;&lt;a href=&quot;#1004-Differencia&quot; class=&quot;headerlink&quot; title=&quot;1004 Differencia&quot;&gt;&lt;/a&gt;1004 Differencia&lt;/h1&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=5737&quot;&gt;题目链接&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;有两个序列：$\displaystyle \big\lbrace a_1, a_2, \cdots, a_n \big\rbrace$，$\displaystyle \big\lbrace b_1, b_2, \cdots, b_n \big\rbrace$&lt;br&gt;有两种操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$+&lt;del&gt;l&lt;/del&gt;r~x$ 将所有的 $a_i(l \leqslant i\leqslant r)$ 置为 $x$&lt;/li&gt;
&lt;li&gt;$?&lt;del&gt;l&lt;/del&gt;r$ 询问 $l\leqslant i\leqslant r$ 中有多少个 $i$ 满足 $a_i \geqslant b_i$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;数据范围&lt;/strong&gt;：$1\leqslant n\leqslant 10^5$，$3\times 10^6$ 次询问，强制在线。&lt;/p&gt;</summary>
    
    
    
    
    <category term="数据结构" scheme="http://littleclown.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="ACM" scheme="http://littleclown.github.io/tags/ACM/"/>
    
    <category term="解题报告" scheme="http://littleclown.github.io/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
    <category term="训练赛" scheme="http://littleclown.github.io/tags/%E8%AE%AD%E7%BB%83%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>二分图</title>
    <link href="http://littleclown.github.io/study/codding/graph-theory/bipartite-graph/bipartite-graph/"/>
    <id>http://littleclown.github.io/study/codding/graph-theory/bipartite-graph/bipartite-graph/</id>
    <published>2016-07-17T06:44:22.000Z</published>
    <updated>2019-01-03T02:22:28.509Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a><strong>概念</strong></h1><h2 id="点覆盖-vertex-covering"><a href="#点覆盖-vertex-covering" class="headerlink" title="点覆盖 (vertex covering)"></a>点覆盖 (vertex covering)</h2><ul><li><strong>点覆盖</strong>： 一个点集，满足所有边都至少有一个端点在集合中</li><li><strong>极小点覆盖</strong>： 本身是一个点覆盖，但任意一个真子集都不是点覆盖</li><li><strong>最小点覆盖</strong>： 点数最少的点覆盖</li><li><strong>点覆盖数</strong>： 最小点覆盖的点数</li></ul><h2 id="边覆盖-edge-covering"><a href="#边覆盖-edge-covering" class="headerlink" title="边覆盖 (edge covering)"></a>边覆盖 (edge covering)</h2><ul><li><strong>边覆盖</strong>： 一个边集，满足所有顶点都是集合中至少一条边的一个端点</li><li><strong>极小边覆盖</strong>： 本身是一个边覆盖，但任意一个真子集都不是边覆盖</li><li><strong>最小边覆盖</strong>： 边数最少的边覆盖</li><li><strong>边覆盖数</strong>： 最小边覆盖的边数</li></ul><span id="more"></span><h2 id="团-clique"><a href="#团-clique" class="headerlink" title="团 (clique)"></a>团 (clique)</h2><ul><li><strong>团</strong>： 一个点集，满足集合中任意两点相邻</li><li><strong>极大团</strong>： 本身是一个团，但再加入任意个点都不再是团</li><li><strong>最大团</strong>： 点数最多的团</li><li><strong>团数</strong>： 最大团的点数</li></ul><h2 id="独立集-independent-set"><a href="#独立集-independent-set" class="headerlink" title="独立集 (independent set)"></a>独立集 (independent set)</h2><ul><li><strong>独立集</strong>： 一个点集，满足集合中的任意两点都不相邻</li><li><strong>极大独立集</strong>： 本身是一个独立集，但再加入任意个点都不再是独立集</li><li><strong>最大独立集</strong>： 点数最多的独立集</li><li><strong>独立数</strong>： 最大独立集的点数</li></ul><h2 id="边独立集-edge-independent-set"><a href="#边独立集-edge-independent-set" class="headerlink" title="边独立集 (edge independent set)"></a>边独立集 (edge independent set)</h2><ul><li><strong>边独立集</strong>： 一个边集，满足集合中的任意两条边都没有公共端点</li><li><strong>极大边独立集</strong>： 本身是一个边独立集，但再加入任意条边都不再是边独立集</li><li><strong>最大边独立集</strong>： 边数最多的边独立集</li><li><strong>边独立数</strong>： 最大边独立集的边数</li></ul><h2 id="支配集-dominating-set"><a href="#支配集-dominating-set" class="headerlink" title="支配集 (dominating set)"></a>支配集 (dominating set)</h2><ul><li><strong>支配集</strong>： 一个点集，满足集合外其它点都至少有一个相邻的点在集合中</li><li><strong>极小支配集</strong>： 本身是一个支配集，但再加入任意个点都不再是支配集</li><li><strong>最小支配集</strong>： 点数最少的支配集</li><li><strong>支配数</strong>： 最小支配集的点数</li></ul><h2 id="边支配集-edge-dominating-set"><a href="#边支配集-edge-dominating-set" class="headerlink" title="边支配集 (edge dominating set)"></a>边支配集 (edge dominating set)</h2><ul><li><strong>边支配集</strong>： 一个边集，满足集合外其它边都至少有一条相邻的边在集合中</li><li><strong>极小边支配集</strong>： 本身是一个边支配集，但再加入任意条边都不再是边支配集</li><li><strong>最小边支配集</strong>： 边数最少的边支配集</li><li><strong>边支配数</strong>： 最小边支配集的边数</li></ul><h2 id="匹配-matching"><a href="#匹配-matching" class="headerlink" title="匹配 (matching)"></a>匹配 (matching)</h2><ul><li><strong>匹配</strong>： 一个两两没有共同顶点的边集，又称 <strong>边独立集</strong></li><li><strong>匹配点</strong>： 在匹配中的点，又称 <strong>饱和点</strong></li><li><strong>未匹配点</strong>： 不在匹配中的点，又称 <strong>未饱和点</strong></li><li><strong>最大匹配</strong>： 边最多的匹配</li><li><strong>完备匹配</strong>： 匹配了二分图较小集合（左侧的点集和右侧点集中较小的点集）的所有点的匹配</li><li><strong>完美匹配</strong>： 匹配了所有点的匹配</li><li><strong>匹配数</strong>： 最大匹配的边数</li><li><strong>交替路</strong>： 图的一条简单路径，满足路径上任意相邻的两条边，一条在匹配内，一条不在匹配内</li><li><strong>增广路</strong>： 起始点与终止点都为未匹配点的交替路</li></ul><h1 id="定理"><a href="#定理" class="headerlink" title="定理"></a><strong>定理</strong></h1><p><span id="增广路定理"><strong>增广路定理</strong></span>： 一个匹配是最大匹配当且仅当不存在增广路。<br><span id="König定理"><strong>König定理</string></span>：最小点覆盖数 $=$ 最大匹配数。证明见 <em><strong><a href="#K%C3%B6nig%E5%AE%9A%E7%90%86%E8%AF%81%E6%98%8E">附录</a></strong></em></p><h1 id="性质"><a href="#性质" class="headerlink" title="性质"></a><strong>性质</strong></h1><h1 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a><strong>Hint</strong></h1><p><em><strong><a href="http://dsqiu.iteye.com/blog/1689505">参考链接</a></strong></em></p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a><strong>实现</strong></h1><h2 id="增广路算法"><a href="#增广路算法" class="headerlink" title="增广路算法"></a>增广路算法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> hungary &#123;<span class="comment">/*&#123;&#123;&#123;*/</span></span><br><span class="line">    <span class="keyword">int</span> L, R;</span><br><span class="line">    std:: vector&lt;<span class="keyword">int</span>&gt; G[MAXN];</span><br><span class="line">    <span class="keyword">int</span> left[MAXN], right[MAXN];</span><br><span class="line">    <span class="keyword">bool</span> lmark[MAXN], rmark[MAXN];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> L=<span class="number">0</span>, <span class="keyword">int</span> R=<span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">        hungary:: L = L;</span><br><span class="line">        hungary:: R = R;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>; u &lt;= L; ++u ) G[u].<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">match</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        lmark[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; v: G[u]) <span class="keyword">if</span>( !rmark[v] ) &#123;</span><br><span class="line">            rmark[v] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>( !left[v] || <span class="built_in">match</span>(left[v]) ) &#123;</span><br><span class="line">                left[v] = u;</span><br><span class="line">                right[u] = v;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(left, <span class="number">0</span>, <span class="keyword">sizeof</span> left);</span><br><span class="line">        <span class="built_in">memset</span>(right, <span class="number">0</span>, <span class="keyword">sizeof</span> right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>; u &lt;= L; ++u) <span class="keyword">if</span>( !right[u] ) &#123;</span><br><span class="line">            <span class="built_in">memset</span>(lmark, <span class="number">0</span>, <span class="keyword">sizeof</span> lmark);</span><br><span class="line">            <span class="built_in">memset</span>(rmark, <span class="number">0</span>, <span class="keyword">sizeof</span> rmark);</span><br><span class="line">            <span class="keyword">if</span>( <span class="built_in">match</span>(u) ) ++ans;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br></pre></td></tr></table></figure><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="Konig定理证明"><a href="#Konig定理证明" class="headerlink" title="König定理证明"></a><span id="König定理证明">König定理证明</span></h2><img src="1.png" style="float:left"> <p>如左图所示，粗线构成了最大匹配。<br>显然，最大匹配中，</p><ul><li>任意一个匹配点不会同时和两个以上的未匹配点直接或间接相连，（否则就会存在增广路，这与最大匹配矛盾）。</li><li>任意一个未配点出发的边都直接连向匹配点（理由同上）</li></ul><p>所以，对于每一条匹配边，至多只有一个未匹配点与其直接相邻；若选择与该未匹配点相邻的匹配点作为覆盖点，则可同时覆盖一条匹配边和一条与未匹配点相邻的边。不难发现：<strong>将所有与未匹配点直接相邻的匹配点选为覆盖点，并将剩下的没有端点为覆盖点的匹配边中任选一个端点作为覆盖点，则构成最小覆盖集</strong>。而这个集合的大小显然和最大匹配个数是相等的。</p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>从二分图左侧所有未匹配点出发，扩展出匈牙利树，并将经过的点标记。则*** 左侧未标记点 <em><strong>与右侧</strong></em> 标记点 ***是最小覆盖集。</p><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> hungary &#123;<span class="comment">/*&#123;&#123;&#123;*/</span></span><br><span class="line">    <span class="keyword">int</span> L, R;</span><br><span class="line">    std:: vector&lt;<span class="keyword">int</span>&gt; G[MAXN];</span><br><span class="line">    <span class="keyword">int</span> left[MAXN], right[MAXN];</span><br><span class="line">    <span class="keyword">bool</span> lmark[MAXN], rmark[MAXN];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> L=<span class="number">0</span>, <span class="keyword">int</span> R=<span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">        hungary:: L = L;</span><br><span class="line">        hungary:: R = R;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>; u &lt;= L; ++u ) G[u].<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">match</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">        lmark[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; v: G[u]) <span class="keyword">if</span>( !rmark[v] ) &#123;</span><br><span class="line">            rmark[v] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>( !left[v] || <span class="built_in">match</span>(left[v]) ) &#123;</span><br><span class="line">                left[v] = u;</span><br><span class="line">                right[u] = v;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(left, <span class="number">0</span>, <span class="keyword">sizeof</span> left);</span><br><span class="line">        <span class="built_in">memset</span>(right, <span class="number">0</span>, <span class="keyword">sizeof</span> right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>; u &lt;= L; ++u) <span class="keyword">if</span>( !right[u] ) &#123;</span><br><span class="line">            <span class="built_in">memset</span>(lmark, <span class="number">0</span>, <span class="keyword">sizeof</span> lmark);</span><br><span class="line">            <span class="built_in">memset</span>(rmark, <span class="number">0</span>, <span class="keyword">sizeof</span> rmark);</span><br><span class="line">            <span class="keyword">if</span>( <span class="built_in">match</span>(u) ) ++ans;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memset</span>(lmark, <span class="number">0</span>, <span class="keyword">sizeof</span> lmark);</span><br><span class="line">        <span class="built_in">memset</span>(rmark, <span class="number">0</span>, <span class="keyword">sizeof</span> rmark);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>; u &lt;= L; ++u) <span class="keyword">if</span>( !right[u] ) <span class="built_in">match</span>(u);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;left:&quot;</span>); </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>; u &lt;= L; ++u) <span class="keyword">if</span>( !lmark[u] ) <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>, u);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;right:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">1</span>; v &lt;= R; ++v) <span class="keyword">if</span>( rmark[v] ) <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>, v);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;&lt;strong&gt;概念&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;点覆盖-vertex-covering&quot;&gt;&lt;a href=&quot;#点覆盖-vertex-covering&quot; class=&quot;headerlink&quot; title=&quot;点覆盖 (vertex covering)&quot;&gt;&lt;/a&gt;点覆盖 (vertex covering)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;点覆盖&lt;/strong&gt;： 一个点集，满足所有边都至少有一个端点在集合中&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;极小点覆盖&lt;/strong&gt;： 本身是一个点覆盖，但任意一个真子集都不是点覆盖&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最小点覆盖&lt;/strong&gt;： 点数最少的点覆盖&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;点覆盖数&lt;/strong&gt;： 最小点覆盖的点数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;边覆盖-edge-covering&quot;&gt;&lt;a href=&quot;#边覆盖-edge-covering&quot; class=&quot;headerlink&quot; title=&quot;边覆盖 (edge covering)&quot;&gt;&lt;/a&gt;边覆盖 (edge covering)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;边覆盖&lt;/strong&gt;： 一个边集，满足所有顶点都是集合中至少一条边的一个端点&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;极小边覆盖&lt;/strong&gt;： 本身是一个边覆盖，但任意一个真子集都不是边覆盖&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最小边覆盖&lt;/strong&gt;： 边数最少的边覆盖&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;边覆盖数&lt;/strong&gt;： 最小边覆盖的边数&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="学习笔记" scheme="http://littleclown.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="ACM" scheme="http://littleclown.github.io/tags/ACM/"/>
    
    <category term="图论" scheme="http://littleclown.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
    <category term="二分图" scheme="http://littleclown.github.io/tags/%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>伸展树专题</title>
    <link href="http://littleclown.github.io/acm/special-topic/datastructure/tree/bbst/splay/"/>
    <id>http://littleclown.github.io/acm/special-topic/datastructure/tree/bbst/splay/</id>
    <published>2016-07-03T03:07:47.000Z</published>
    <updated>2019-01-03T02:22:28.386Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><strong>UVa/11922 <em><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=3073">Permutation Transformer</a></em></strong><br>基础题。<br><span id="UVa-11922"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span><span class="comment">/*&#123;&#123;&#123;*/</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> key;</span><br><span class="line">    <span class="keyword">int</span> siz;</span><br><span class="line">    <span class="keyword">bool</span> flip;</span><br><span class="line">    node* lson;</span><br><span class="line">    node* rson;</span><br><span class="line">    <span class="built_in">node</span>(<span class="keyword">int</span> key=<span class="number">0</span>): <span class="built_in">key</span>(key), <span class="built_in">siz</span>(<span class="number">0</span>), <span class="built_in">flip</span>(<span class="number">0</span>), <span class="built_in">lson</span>(<span class="literal">NULL</span>), <span class="built_in">rson</span>(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = lson-&gt;siz + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>( key == cnt ) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> key &lt; cnt? <span class="number">0</span>: <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( !flip ) <span class="keyword">return</span>;</span><br><span class="line">        lson-&gt;flip ^= <span class="number">1</span>;</span><br><span class="line">        rson-&gt;flip ^= <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">swap</span>(lson, rson);</span><br><span class="line">        flip = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">()</span> </span>&#123; siz = lson-&gt;siz + <span class="number">1</span> + rson-&gt;siz; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> node* root;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;node*, node*&gt; droot;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_NODES = <span class="number">100000</span>+<span class="number">10</span>;</span><br><span class="line">node* null = <span class="keyword">new</span> <span class="built_in">node</span>();</span><br><span class="line"></span><br><span class="line">node nodepool[MAX_NODES];</span><br><span class="line">node* nodetop;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> node* <span class="title">newnode</span><span class="params">(<span class="keyword">int</span> key=<span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    nodetop-&gt;key = key;</span><br><span class="line">    nodetop-&gt;siz = <span class="number">1</span>;</span><br><span class="line">    nodetop-&gt;flip = <span class="literal">false</span>;</span><br><span class="line">    nodetop-&gt;lson = null;</span><br><span class="line">    nodetop-&gt;rson = null;</span><br><span class="line">    <span class="keyword">return</span> nodetop++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">zag</span><span class="params">(root&amp; o)</span> </span>&#123;</span><br><span class="line">    node* k = o-&gt;rson;</span><br><span class="line">    o-&gt;rson = k-&gt;lson;</span><br><span class="line">    k-&gt;lson = o;</span><br><span class="line">    o = k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">zig</span><span class="params">(root&amp; o)</span> </span>&#123;</span><br><span class="line">    node* k = o-&gt;lson;</span><br><span class="line">    o-&gt;lson = k-&gt;rson;</span><br><span class="line">    k-&gt;rson = o;</span><br><span class="line">    o = k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(root&amp; o, <span class="keyword">int</span> d)</span> </span>&#123; </span><br><span class="line">    d? <span class="built_in">zig</span>(o): <span class="built_in">zag</span>(o);</span><br><span class="line">    d? o-&gt;rson-&gt;<span class="built_in">maintain</span>(): o-&gt;lson-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">    o-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(root&amp; o, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    o-&gt;<span class="built_in">pushdown</span>();</span><br><span class="line">    <span class="keyword">int</span> d = o-&gt;<span class="built_in">cmp</span>(k);</span><br><span class="line">    <span class="keyword">if</span>( d == <span class="number">1</span> ) k -= o-&gt;lson-&gt;siz + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>( d != <span class="number">-1</span> ) &#123;</span><br><span class="line">        root&amp; p = d? o-&gt;rson: o-&gt;lson;</span><br><span class="line">        p-&gt;<span class="built_in">pushdown</span>();</span><br><span class="line">        <span class="keyword">int</span> d2 = p-&gt;<span class="built_in">cmp</span>(k);</span><br><span class="line">        <span class="keyword">if</span>( d2 == <span class="number">1</span> ) k -= p-&gt;lson-&gt;siz + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>( d2 != <span class="number">-1</span> ) &#123;</span><br><span class="line">            <span class="built_in">splay</span>((d2? p-&gt;rson: p-&gt;lson), k);</span><br><span class="line">            <span class="keyword">if</span>( d == d2 ) <span class="built_in">rotate</span>(o, d^<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">rotate</span>(p, d);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">rotate</span>(o, d^<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">(root o, <span class="keyword">int</span> k, root&amp; left, root&amp; right)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">splay</span>(o, k);</span><br><span class="line">    left = o;</span><br><span class="line">    right = o-&gt;rson;</span><br><span class="line">    o-&gt;rson = null;</span><br><span class="line">    o-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> root <span class="title">merge</span><span class="params">(root left, root right)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">splay</span>(left, left-&gt;siz);</span><br><span class="line">    left-&gt;<span class="built_in">pushdown</span>();</span><br><span class="line">    left-&gt;rson = right;</span><br><span class="line">    left-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(root&amp; o, <span class="keyword">int</span> lft, <span class="keyword">int</span> rht)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid = (lft+rht) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    o = <span class="built_in">newnode</span>(mid);</span><br><span class="line">    <span class="keyword">if</span>( lft &lt; mid ) <span class="built_in">build</span>(o-&gt;lson, lft, mid<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>( mid &lt; rht ) <span class="built_in">build</span>(o-&gt;rson, mid+<span class="number">1</span>, rht);</span><br><span class="line">    o-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(root&amp; o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( o == null ) <span class="keyword">return</span>;</span><br><span class="line">    o-&gt;<span class="built_in">pushdown</span>();</span><br><span class="line">    <span class="keyword">if</span>( o-&gt;lson != null ) <span class="built_in">print</span>(o-&gt;lson);</span><br><span class="line">    <span class="keyword">if</span>( o-&gt;key ) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, o-&gt;key);</span><br><span class="line">    <span class="keyword">if</span>( o-&gt;rson != null ) <span class="built_in">print</span>(o-&gt;rson);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">root rt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">    nodetop = nodepool;</span><br><span class="line">    <span class="built_in">build</span>(rt, <span class="number">0</span>, N);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N, Q;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;Q) == <span class="number">2</span> ) &#123;</span><br><span class="line">        <span class="built_in">init</span>(N);</span><br><span class="line">        <span class="keyword">while</span>( Q-- ) &#123;</span><br><span class="line">            <span class="keyword">int</span> lft, rht;</span><br><span class="line">            root o, left, middle, right;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;lft, &amp;rht);</span><br><span class="line">            <span class="built_in">split</span>(rt, lft, left, o);</span><br><span class="line">            <span class="built_in">split</span>(o, rht-lft+<span class="number">1</span>, middle, right);</span><br><span class="line">            middle-&gt;flip ^= <span class="number">1</span>;</span><br><span class="line">            rt=<span class="built_in">merge</span>(<span class="built_in">merge</span>(left, right), middle);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(rt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br></pre></td></tr></table></figure></span><hr><p><strong>UVa/11996 <em><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=3147">Jewel Magic</a></em></strong><br>用 hash 求 LCP，仅需用 splay 维护 hash 值即可。考虑到用反转操作，每个节点需要维护正反两个 hash 值。<br><span id="UVa-11996"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span><span class="comment">/*&#123;&#123;&#123;*/</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ULL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">400000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> hashkey = <span class="number">137</span>;</span><br><span class="line"></span><br><span class="line">ULL xp[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> key;</span><br><span class="line">    <span class="keyword">int</span> siz;</span><br><span class="line">    ULL val;</span><br><span class="line">    ULL reval;</span><br><span class="line">    <span class="keyword">bool</span> flip;</span><br><span class="line">    node* lson;</span><br><span class="line">    node* rson;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = lson-&gt;siz + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>( x == cnt ) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> x &lt; cnt? <span class="number">0</span>: <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        flip ^= <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">swap</span>(lson, rson);</span><br><span class="line">        <span class="built_in">swap</span>(val, reval);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( !flip ) <span class="keyword">return</span>;</span><br><span class="line">        lson-&gt;<span class="built_in">reverse</span>();</span><br><span class="line">        rson-&gt;<span class="built_in">reverse</span>();</span><br><span class="line">        flip = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        siz = lson-&gt;siz + <span class="number">1</span> + rson-&gt;siz;</span><br><span class="line">        val = lson-&gt;val + key*xp[lson-&gt;siz] + rson-&gt;val*xp[lson-&gt;siz+<span class="number">1</span>];</span><br><span class="line">        reval = rson-&gt;reval + key*xp[rson-&gt;siz] + lson-&gt;reval*xp[rson-&gt;siz+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> node* root;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;node*, node*&gt; droot;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_NODES = <span class="number">400000</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">node* null;</span><br><span class="line">node* nodetop;</span><br><span class="line">node nodepool[MAX_NODES];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> root <span class="title">newnode</span><span class="params">(<span class="keyword">int</span> key=<span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    nodetop-&gt;key = key;</span><br><span class="line">    nodetop-&gt;siz = <span class="number">1</span>;</span><br><span class="line">    nodetop-&gt;val = <span class="number">0</span>;</span><br><span class="line">    nodetop-&gt;reval = <span class="number">0</span>;</span><br><span class="line">    nodetop-&gt;flip = <span class="literal">false</span>;</span><br><span class="line">    nodetop-&gt;lson = null;</span><br><span class="line">    nodetop-&gt;rson = null;</span><br><span class="line">    <span class="keyword">return</span> nodetop++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">zag</span><span class="params">(root&amp; rt)</span> </span>&#123;</span><br><span class="line">    root k = rt-&gt;rson;</span><br><span class="line">    rt-&gt;rson = k-&gt;lson;</span><br><span class="line">    k-&gt;lson = rt;</span><br><span class="line">    rt = k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">zig</span><span class="params">(root&amp; rt)</span> </span>&#123;</span><br><span class="line">    root k = rt-&gt;lson;</span><br><span class="line">    rt-&gt;lson = k-&gt;rson;</span><br><span class="line">    k-&gt;rson = rt;</span><br><span class="line">    rt = k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(root&amp; rt, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    d? <span class="built_in">zig</span>(rt): <span class="built_in">zag</span>(rt);</span><br><span class="line">    d? rt-&gt;rson-&gt;<span class="built_in">maintain</span>(): rt-&gt;lson-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">    rt-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(root&amp; rt, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    rt-&gt;<span class="built_in">pushdown</span>();</span><br><span class="line">    <span class="keyword">int</span> d = rt-&gt;<span class="built_in">cmp</span>(k);</span><br><span class="line">    <span class="keyword">if</span>( d == <span class="number">1</span> ) k -= rt-&gt;lson-&gt;siz+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>( d != <span class="number">-1</span> ) &#123;</span><br><span class="line">        root&amp; pt = d? rt-&gt;rson: rt-&gt;lson;</span><br><span class="line">        pt-&gt;<span class="built_in">pushdown</span>();</span><br><span class="line">        <span class="keyword">int</span> d2 = pt-&gt;<span class="built_in">cmp</span>(k);</span><br><span class="line">        <span class="keyword">if</span>( d2 == <span class="number">1</span> ) k -= pt-&gt;lson-&gt;siz+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>( d2 != <span class="number">-1</span> ) &#123;</span><br><span class="line">            <span class="built_in">splay</span>((d2? pt-&gt;rson: pt-&gt;lson), k);</span><br><span class="line">            <span class="keyword">if</span>( d == d2 ) <span class="built_in">rotate</span>(rt, d^<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">rotate</span>(pt, d);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">rotate</span>(rt, d^<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">(root rt, <span class="keyword">int</span> k, root&amp; left, root&amp; right)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">splay</span>(rt, k);</span><br><span class="line">    left = rt;</span><br><span class="line">    right = rt-&gt;rson;</span><br><span class="line">    rt-&gt;rson = null;</span><br><span class="line">    rt-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> root <span class="title">merge</span><span class="params">(root left, root right)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">splay</span>(left, left-&gt;siz);</span><br><span class="line">    left-&gt;rson = right;</span><br><span class="line">    left-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* insert at (k+1)th position. */</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(root&amp; rt, <span class="keyword">int</span> k, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    root left, right;</span><br><span class="line">    root middle = <span class="built_in">newnode</span>(key);</span><br><span class="line">    <span class="built_in">split</span>(rt, k, left, right);</span><br><span class="line">    rt = <span class="built_in">merge</span>(<span class="built_in">merge</span>(left, middle), right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* remove at (k+1)th position. */</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(root&amp; rt, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    root left, middle, right;</span><br><span class="line">    <span class="built_in">split</span>(rt, k, left, right);</span><br><span class="line">    <span class="built_in">split</span>(right, <span class="number">1</span>, middle, right);</span><br><span class="line">    rt = <span class="built_in">merge</span>(left, right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* modify [lft+1, rht+1]. */</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(root&amp; rt, <span class="keyword">int</span> lft, <span class="keyword">int</span> rht)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">splay</span>(rt, lft);</span><br><span class="line">    <span class="built_in">splay</span>(rt-&gt;rson, rht-lft+<span class="number">2</span>);</span><br><span class="line">    rt-&gt;rson-&gt;lson-&gt;<span class="built_in">reverse</span>(); <span class="comment">/* update rt-&gt;rson-&gt;lson, rt-&gt;rson, rt */</span></span><br><span class="line">    rt-&gt;rson-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">    rt-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(root&amp; rt, <span class="keyword">int</span> p1, <span class="keyword">int</span> p2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lft = <span class="number">0</span>, rht = rt-&gt;siz - p2;</span><br><span class="line">    <span class="keyword">while</span>( lft &lt; rht ) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (lft+rht) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">splay</span>(rt, p1);</span><br><span class="line">        <span class="built_in">splay</span>(rt-&gt;rson, mid+<span class="number">1</span>);</span><br><span class="line">        ULL val1 = rt-&gt;rson-&gt;lson-&gt;val;</span><br><span class="line">        <span class="built_in">splay</span>(rt, p2);</span><br><span class="line">        <span class="built_in">splay</span>(rt-&gt;rson, mid+<span class="number">1</span>);</span><br><span class="line">        ULL val2 = rt-&gt;rson-&gt;lson-&gt;val;</span><br><span class="line">        <span class="keyword">if</span>( val1 == val2 ) lft = mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> rht = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> lft<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">root rt;</span><br><span class="line"><span class="keyword">char</span> s[MAXN];</span><br><span class="line"><span class="keyword">int</span> N, Q, op, arg1, arg2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(root&amp; rt, <span class="keyword">int</span> lft, <span class="keyword">int</span> rht)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid = (lft+rht) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    rt = <span class="built_in">newnode</span>(s[mid]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>( lft &lt; mid ) <span class="built_in">build</span>(rt-&gt;lson, lft, mid<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>( mid &lt; rht ) <span class="built_in">build</span>(rt-&gt;rson, mid+<span class="number">1</span>, rht);</span><br><span class="line">    rt-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    nodetop = nodepool;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s+<span class="number">1</span>);</span><br><span class="line">    s[<span class="number">0</span>] = s[N+<span class="number">1</span>] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="built_in">build</span>(rt, <span class="number">0</span>, N+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(; c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>; c=<span class="built_in">getchar</span>());</span><br><span class="line">    <span class="keyword">for</span>(; c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c=<span class="built_in">getchar</span>())</span><br><span class="line">        s = s*<span class="number">10</span> + c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    null = <span class="keyword">new</span> <span class="built_in">node</span>();</span><br><span class="line">    <span class="built_in">memset</span>(null, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(node));</span><br><span class="line">    xp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt; MAXN; ++i)</span><br><span class="line">        xp[i] = xp[i<span class="number">-1</span>] * hashkey;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;Q) == <span class="number">2</span> ) &#123;</span><br><span class="line">        <span class="built_in">Init</span>();</span><br><span class="line">        <span class="keyword">while</span>( Q-- ) &#123;</span><br><span class="line">            op = <span class="built_in">read</span>();</span><br><span class="line">            arg1 = <span class="built_in">read</span>();</span><br><span class="line">            <span class="keyword">if</span>( op != <span class="number">2</span> ) arg2 = <span class="built_in">read</span>();</span><br><span class="line">            <span class="built_in"><span class="keyword">switch</span></span>( op ) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>: <span class="built_in">insert</span>(rt, arg1+<span class="number">1</span>, arg2); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>: <span class="built_in">remove</span>(rt, arg1); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>: <span class="built_in">update</span>(rt, arg1, arg2); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>: <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">query</span>(rt, arg1, arg2)); <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br></pre></td></tr></table></figure></span><span id="more"></span><hr><p><strong>hihoCoder/1329 <em><a href="http://hihocoder.com/problemset/problem/1329">平衡树 Splay</a></em></strong><br>基础题。<br><span id="hihoCoder-1329"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span><span class="comment">/*&#123;&#123;&#123;*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> key;</span><br><span class="line">    <span class="keyword">int</span> siz;</span><br><span class="line">    node* lson;</span><br><span class="line">    node* rson;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = lson-&gt;siz + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>( x == cnt ) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> x &lt; cnt? <span class="number">0</span>: <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        siz = lson-&gt;siz + <span class="number">1</span> + rson-&gt;siz;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> node* root;</span><br><span class="line"><span class="keyword">typedef</span> std:: pair&lt;node*, node*&gt; droot;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_NODES = <span class="number">200000</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">node* null;</span><br><span class="line">node* nodetop;</span><br><span class="line">node nodepool[MAX_NODES];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> root <span class="title">newnode</span><span class="params">(<span class="keyword">int</span> key=<span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    nodetop-&gt;key = key;</span><br><span class="line">    nodetop-&gt;siz = <span class="number">1</span>;</span><br><span class="line">    nodetop-&gt;lson = null;</span><br><span class="line">    nodetop-&gt;rson = null;</span><br><span class="line">    <span class="keyword">return</span> nodetop++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">zag</span><span class="params">(root&amp; o)</span> </span>&#123;</span><br><span class="line">    root k = o-&gt;rson;</span><br><span class="line">    o-&gt;rson = k-&gt;lson;</span><br><span class="line">    k-&gt;lson = o;</span><br><span class="line">    o = k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">zig</span><span class="params">(root&amp; o)</span> </span>&#123;</span><br><span class="line">    root k = o-&gt;lson;</span><br><span class="line">    o-&gt;lson = k-&gt;rson;</span><br><span class="line">    k-&gt;rson = o;</span><br><span class="line">    o = k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(root&amp; o, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    d? <span class="built_in">zig</span>(o): <span class="built_in">zag</span>(o);</span><br><span class="line">    d? o-&gt;rson-&gt;<span class="built_in">maintain</span>(): o-&gt;lson-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">    o-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(root&amp; o, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> d = o-&gt;<span class="built_in">cmp</span>(k);</span><br><span class="line">    <span class="keyword">if</span>( d == <span class="number">1</span> ) k -= o-&gt;lson-&gt;siz+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>( d != <span class="number">-1</span> ) &#123;</span><br><span class="line">        root&amp; p = d? o-&gt;rson: o-&gt;lson;</span><br><span class="line">        <span class="keyword">int</span> d2 = p-&gt;<span class="built_in">cmp</span>(k);</span><br><span class="line">        <span class="keyword">if</span>( d2 == <span class="number">1</span> ) k -= p-&gt;lson-&gt;siz+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>( d2 != <span class="number">-1</span> ) &#123;</span><br><span class="line">            <span class="built_in">splay</span>((d2? p-&gt;rson: p-&gt;lson), k);</span><br><span class="line">            <span class="keyword">if</span>( d == d2 ) <span class="built_in">rotate</span>(o, d^<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">rotate</span>(p, d);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">rotate</span>(o, d^<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">(root o, <span class="keyword">int</span> k, root&amp; left, root&amp; right)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">splay</span>(o, k);</span><br><span class="line">    left = o;</span><br><span class="line">    right = o-&gt;rson;</span><br><span class="line">    o-&gt;rson = null;</span><br><span class="line">    o-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> root <span class="title">merge</span><span class="params">(root left, root right)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">splay</span>(left, left-&gt;siz);</span><br><span class="line">    left-&gt;rson = right;</span><br><span class="line">    left-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">rank</span><span class="params">(root o, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( o == null ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>( key == o-&gt;key ) <span class="keyword">return</span> o-&gt;lson-&gt;siz;</span><br><span class="line">    <span class="keyword">if</span>( key &lt; o-&gt;key ) <span class="keyword">return</span> <span class="built_in">rank</span>(o-&gt;lson, key);</span><br><span class="line">    <span class="keyword">return</span> o-&gt;lson-&gt;siz+<span class="number">1</span> + <span class="built_in">rank</span>(o-&gt;rson, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(root&amp; o, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="built_in">rank</span>(o, id);</span><br><span class="line">    root left, right;</span><br><span class="line">    root middle = <span class="built_in">newnode</span>(id);</span><br><span class="line">    <span class="built_in">split</span>(o, k, left, right);</span><br><span class="line">    o = <span class="built_in">merge</span>(<span class="built_in">merge</span>(left, middle), right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(root&amp; o, <span class="keyword">int</span> id1, <span class="keyword">int</span> id2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k1 = <span class="built_in">rank</span>(o, id1);</span><br><span class="line">    <span class="keyword">int</span> k2 = <span class="built_in">rank</span>(o, id2+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>( k1 &gt;= k2 ) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    root left, middle, right;</span><br><span class="line">    <span class="built_in">split</span>(o, k1, left, right);</span><br><span class="line">    <span class="built_in">split</span>(right, k2-k1, middle, right);</span><br><span class="line">    o = <span class="built_in">merge</span>(left, right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(root&amp; o, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( o == null ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>( key &lt; o-&gt;key ) <span class="keyword">return</span> <span class="built_in">query</span>(o-&gt;lson, key);</span><br><span class="line">    <span class="keyword">return</span> std:: <span class="built_in">max</span>(o-&gt;key, <span class="built_in">query</span>(o-&gt;rson, key));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">root rt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    null = <span class="keyword">new</span> <span class="built_in">node</span>();</span><br><span class="line">    null-&gt;key = <span class="number">0</span>;</span><br><span class="line">    null-&gt;siz = <span class="number">0</span>;</span><br><span class="line">    null-&gt;lson = <span class="literal">NULL</span>;</span><br><span class="line">    null-&gt;rson = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    nodetop = nodepool;</span><br><span class="line">    rt = <span class="built_in">newnode</span>(<span class="number">0</span>);</span><br><span class="line">    rt-&gt;rson = <span class="built_in">newnode</span>(<span class="number">1000000001</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, arg1, arg2, arg3;</span><br><span class="line"><span class="keyword">char</span> cmd[<span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> positive = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(; c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>; c=<span class="built_in">getchar</span>())</span><br><span class="line">        <span class="keyword">if</span>( c == <span class="string">&#x27;-&#x27;</span> ) positive = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(; c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c=<span class="built_in">getchar</span>())</span><br><span class="line">        s = s*<span class="number">10</span> + c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> positive? s: -s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Init</span>();</span><br><span class="line">    N = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, cmd);</span><br><span class="line">        arg1 = std:: <span class="built_in">min</span>(std:: <span class="built_in">max</span>(<span class="built_in">read</span>(), <span class="number">1</span>), <span class="number">1000000000</span>);</span><br><span class="line">        <span class="keyword">if</span>( cmd[<span class="number">0</span>] == <span class="string">&#x27;D&#x27;</span> ) arg2 = std:: <span class="built_in">min</span>(std:: <span class="built_in">max</span>(<span class="built_in">read</span>(), <span class="number">1</span>), <span class="number">1000000000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span>( cmd[<span class="number">0</span>] ) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;I&#x27;</span>: <span class="built_in">insert</span>(rt, arg1); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;Q&#x27;</span>: <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">query</span>(rt, arg1)); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>: <span class="built_in">remove</span>(rt, arg1, arg2); <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br></pre></td></tr></table></figure></span><hr><p><strong>hihoCoder/1333 <em><a href="http://hihocoder.com/problemset/problem/1333">平衡树 Splay2</a></em></strong><br>节点中维护 add，sum，key，siz，val。其中，key 为每个人的 id，val 为每个人的兴趣值。在进行区间操作时，利用 key，计算出左右区间在 splay 中的名次，然后使用该名次 + 基础 splay 操作就可以了。<br><span id="hihoCoder-1333"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span><span class="comment">/*&#123;&#123;&#123;*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> key;</span><br><span class="line">    <span class="keyword">int</span> siz;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">int</span> add;</span><br><span class="line">    LL sum;</span><br><span class="line">    node* lson;</span><br><span class="line">    node* rson;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = lson-&gt;siz + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>( x == cnt ) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> x &lt; cnt? <span class="number">0</span>: <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( !add ) <span class="keyword">return</span>;</span><br><span class="line">        lson-&gt;<span class="built_in">update</span>(add);</span><br><span class="line">        rson-&gt;<span class="built_in">update</span>(add);</span><br><span class="line">        add = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> add)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( <span class="keyword">this</span>-&gt;lson == <span class="literal">NULL</span> ) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;add += add;</span><br><span class="line">        <span class="keyword">this</span>-&gt;val += add;</span><br><span class="line">        <span class="keyword">this</span>-&gt;sum += (LL) add * <span class="keyword">this</span>-&gt;siz;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        siz = lson-&gt;siz + <span class="number">1</span> + rson-&gt;siz;</span><br><span class="line">        sum = lson-&gt;sum + val + rson-&gt;sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> node* root;</span><br><span class="line"><span class="keyword">typedef</span> std:: pair&lt;node*, node*&gt; droot;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_NODES = <span class="number">200000</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">node* null;</span><br><span class="line">node* nodetop;</span><br><span class="line">node nodepool[MAX_NODES];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> root <span class="title">newnode</span><span class="params">(<span class="keyword">int</span> key=<span class="number">0</span>, <span class="keyword">int</span> val=<span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    nodetop-&gt;key = key;</span><br><span class="line">    nodetop-&gt;siz = <span class="number">1</span>;</span><br><span class="line">    nodetop-&gt;val = val;</span><br><span class="line">    nodetop-&gt;add = <span class="number">0</span>;</span><br><span class="line">    nodetop-&gt;sum = val;</span><br><span class="line">    nodetop-&gt;lson = null;</span><br><span class="line">    nodetop-&gt;rson = null;</span><br><span class="line">    <span class="keyword">return</span> nodetop++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">zag</span><span class="params">(root&amp; o)</span> </span>&#123;</span><br><span class="line">    root k = o-&gt;rson;</span><br><span class="line">    o-&gt;rson = k-&gt;lson;</span><br><span class="line">    k-&gt;lson = o;</span><br><span class="line">    o = k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">zig</span><span class="params">(root&amp; o)</span> </span>&#123;</span><br><span class="line">    root k = o-&gt;lson;</span><br><span class="line">    o-&gt;lson = k-&gt;rson;</span><br><span class="line">    k-&gt;rson = o;</span><br><span class="line">    o = k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(root&amp; o, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    d? <span class="built_in">zig</span>(o): <span class="built_in">zag</span>(o);</span><br><span class="line">    d? o-&gt;rson-&gt;<span class="built_in">maintain</span>(): o-&gt;lson-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">    o-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(root&amp; o, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    o-&gt;<span class="built_in">pushdown</span>();</span><br><span class="line">    <span class="keyword">int</span> d = o-&gt;<span class="built_in">cmp</span>(k);</span><br><span class="line">    <span class="keyword">if</span>( d == <span class="number">1</span> ) k -= o-&gt;lson-&gt;siz+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>( d != <span class="number">-1</span> ) &#123;</span><br><span class="line">        root&amp; p = d? o-&gt;rson: o-&gt;lson;</span><br><span class="line">        p-&gt;<span class="built_in">pushdown</span>();</span><br><span class="line">        <span class="keyword">int</span> d2 = p-&gt;<span class="built_in">cmp</span>(k);</span><br><span class="line">        <span class="keyword">if</span>( d2 == <span class="number">1</span> ) k -= p-&gt;lson-&gt;siz+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>( d2 != <span class="number">-1</span> ) &#123;</span><br><span class="line">            <span class="built_in">splay</span>((d2? p-&gt;rson: p-&gt;lson), k);</span><br><span class="line">            <span class="keyword">if</span>( d == d2 ) <span class="built_in">rotate</span>(o, d^<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">rotate</span>(p, d);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">rotate</span>(o, d^<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">(root o, <span class="keyword">int</span> k, root&amp; left, root&amp; right)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">splay</span>(o, k);</span><br><span class="line">    left = o;</span><br><span class="line">    right = o-&gt;rson;</span><br><span class="line">    o-&gt;rson = null;</span><br><span class="line">    o-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> root <span class="title">merge</span><span class="params">(root left, root right)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">splay</span>(left, left-&gt;siz);</span><br><span class="line">    left-&gt;rson = right;</span><br><span class="line">    left-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">rank</span><span class="params">(root o, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( o == null ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>( key == o-&gt;key ) <span class="keyword">return</span> o-&gt;lson-&gt;siz;</span><br><span class="line">    <span class="keyword">if</span>( key &lt; o-&gt;key ) <span class="keyword">return</span> <span class="built_in">rank</span>(o-&gt;lson, key);</span><br><span class="line">    <span class="keyword">return</span> o-&gt;lson-&gt;siz+<span class="number">1</span> + <span class="built_in">rank</span>(o-&gt;rson, key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(root&amp; o, <span class="keyword">int</span> id, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="built_in">rank</span>(o, id);</span><br><span class="line">    root left, right;</span><br><span class="line">    root middle = <span class="built_in">newnode</span>(id, val);</span><br><span class="line">    <span class="built_in">split</span>(o, k, left, right);</span><br><span class="line">    o = <span class="built_in">merge</span>(<span class="built_in">merge</span>(left, middle), right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(root&amp; o, <span class="keyword">int</span> id1, <span class="keyword">int</span> id2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k1 = <span class="built_in">rank</span>(o, id1);</span><br><span class="line">    <span class="keyword">int</span> k2 = <span class="built_in">rank</span>(o, id2+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>( k1 &gt;= k2 ) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    root left, middle, right;</span><br><span class="line">    <span class="built_in">split</span>(o, k1, left, right);</span><br><span class="line">    <span class="built_in">split</span>(right, k2-k1, middle, right);</span><br><span class="line">    o = <span class="built_in">merge</span>(left, right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(root&amp; o, <span class="keyword">int</span> id1, <span class="keyword">int</span> id2, <span class="keyword">int</span> add)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k1 = <span class="built_in">rank</span>(o, id1);</span><br><span class="line">    <span class="keyword">int</span> k2 = <span class="built_in">rank</span>(o, id2+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>( k1 &gt;= k2 ) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">splay</span>(o, k1);</span><br><span class="line">    <span class="built_in">splay</span>(o-&gt;rson, k2-k1+<span class="number">1</span>);</span><br><span class="line">    o-&gt;rson-&gt;lson-&gt;<span class="built_in">update</span>(add);</span><br><span class="line">    o-&gt;rson-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">    o-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">query</span><span class="params">(root&amp; o, <span class="keyword">int</span> id1, <span class="keyword">int</span> id2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k1 = <span class="built_in">rank</span>(o, id1);</span><br><span class="line">    <span class="keyword">int</span> k2 = <span class="built_in">rank</span>(o, id2+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>( k1 &gt;= k2 ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">splay</span>(o, k1);</span><br><span class="line">    <span class="built_in">splay</span>(o-&gt;rson, k2-k1+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> o-&gt;rson-&gt;lson-&gt;sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">root rt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    null = <span class="keyword">new</span> <span class="built_in">node</span>();</span><br><span class="line">    null-&gt;key = <span class="number">0</span>;</span><br><span class="line">    null-&gt;siz = <span class="number">0</span>;</span><br><span class="line">    null-&gt;val = <span class="number">0</span>;</span><br><span class="line">    null-&gt;add = <span class="number">0</span>;</span><br><span class="line">    null-&gt;sum = <span class="number">0</span>;</span><br><span class="line">    null-&gt;lson = <span class="literal">NULL</span>;</span><br><span class="line">    null-&gt;rson = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    nodetop = nodepool;</span><br><span class="line">    rt = <span class="built_in">newnode</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    rt-&gt;rson = <span class="built_in">newnode</span>(<span class="number">1000000001</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, arg1, arg2, arg3;</span><br><span class="line"><span class="keyword">char</span> cmd[<span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> positive = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(; c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>; c=<span class="built_in">getchar</span>())</span><br><span class="line">        <span class="keyword">if</span>( c == <span class="string">&#x27;-&#x27;</span> ) positive = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(; c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c=<span class="built_in">getchar</span>())</span><br><span class="line">        s = s*<span class="number">10</span> + c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> positive? s: -s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Init</span>();</span><br><span class="line">    N = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, cmd);</span><br><span class="line">        arg1 = std:: <span class="built_in">min</span>(std:: <span class="built_in">max</span>(<span class="built_in">read</span>(), <span class="number">1</span>), <span class="number">100000000</span>);</span><br><span class="line">        arg2 = std:: <span class="built_in">min</span>(std:: <span class="built_in">max</span>(<span class="built_in">read</span>(), <span class="number">1</span>), <span class="number">100000000</span>);</span><br><span class="line">        <span class="keyword">if</span>( cmd[<span class="number">0</span>] == <span class="string">&#x27;M&#x27;</span> ) arg3 = <span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span>( cmd[<span class="number">0</span>] ) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;I&#x27;</span>: <span class="built_in">insert</span>(rt, arg1, arg2); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;Q&#x27;</span>: <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">query</span>(rt, arg1, arg2)); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;M&#x27;</span>: <span class="built_in">update</span>(rt, arg1, arg2, arg3); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>: <span class="built_in">remove</span>(rt, arg1, arg2); <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br></pre></td></tr></table></figure></span><hr><p><strong>LA/3961 <em><a href="https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=1962">Robotic Sort</a></em></strong><br>初始时，建一棵 1～$N$ 的 splay，并对原序列进行排序（排序规则为：值小的优先，值相等时，在原序列靠左的优先）。对于第 $k$ 次询问，将值为 $k$ 的节点伸展至根，然后就是些基础的操作了。问题的难点在于快速找到值为 $k$ 的节点。<br>法一：用一个父指针，直接从值为 $k$ 的节点往上伸展就好了。之所以扯这么多，是因为此前一直都是用 刘汝佳 的递归写法（被惯坏了），不需要父指针。<br><span id="LA-3961_1"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span><span class="comment">/*&#123;&#123;&#123;*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> key;</span><br><span class="line">    <span class="keyword">int</span> siz;</span><br><span class="line">    <span class="keyword">bool</span> flip;</span><br><span class="line">    node* prev;</span><br><span class="line">    node* lson;</span><br><span class="line">    node* rson;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        flip ^= <span class="number">1</span>;</span><br><span class="line">        std:: <span class="built_in">swap</span>(lson, rson);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( !flip ) <span class="keyword">return</span>;</span><br><span class="line">        lson-&gt;<span class="built_in">reverse</span>();</span><br><span class="line">        rson-&gt;<span class="built_in">reverse</span>();</span><br><span class="line">        flip = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        siz = lson-&gt;siz + <span class="number">1</span> + rson-&gt;siz;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> node* root;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">zag</span><span class="params">(root&amp; o)</span> </span>&#123;</span><br><span class="line">    root k = o-&gt;rson;</span><br><span class="line">    o-&gt;rson = k-&gt;lson;</span><br><span class="line">    k-&gt;lson-&gt;prev = o;</span><br><span class="line">    k-&gt;lson = o;</span><br><span class="line">    o-&gt;prev = k;</span><br><span class="line">    o = k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">zig</span><span class="params">(root&amp; o)</span> </span>&#123;</span><br><span class="line">    root k = o-&gt;lson;</span><br><span class="line">    o-&gt;lson = k-&gt;rson;</span><br><span class="line">    k-&gt;rson-&gt;prev = o;</span><br><span class="line">    k-&gt;rson = o;</span><br><span class="line">    o-&gt;prev = k;</span><br><span class="line">    o = k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 带父指针的 旋转 和 伸展操作 是此问题最大的难点（蒽，被刘汝佳的代码惯坏了。。</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(root o, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> d2 = <span class="number">-1</span>;</span><br><span class="line">    root p = o-&gt;prev;</span><br><span class="line">    <span class="keyword">if</span>( p != <span class="literal">NULL</span> ) d2 = p-&gt;lson == o? <span class="number">0</span>: <span class="number">1</span>;</span><br><span class="line">    d? <span class="built_in">zig</span>(o): <span class="built_in">zag</span>(o);</span><br><span class="line">    <span class="keyword">if</span>( d2 != <span class="number">-1</span> ) d2? p-&gt;rson = o: p-&gt;lson = o;</span><br><span class="line">    d? o-&gt;rson-&gt;<span class="built_in">maintain</span>(): o-&gt;lson-&gt;<span class="built_in">maintain</span>(); </span><br><span class="line">    o-&gt;prev = p;</span><br><span class="line">    o-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意，d 必须在 pushdown 之后计算，因为有交换子树的操作。</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(root o, root f)</span> </span>&#123;</span><br><span class="line"><span class="comment">// o 必须先 pushdown() 一次，因为可能 o 已经是 f 的子节点，</span></span><br><span class="line"><span class="comment">// 但为了保持 “splay 操作后的根节点标记全部下传” 的传统，需要这么做。</span></span><br><span class="line">    <span class="keyword">for</span>(o-&gt;<span class="built_in">pushdown</span>(); o-&gt;prev != f;) &#123;</span><br><span class="line">        root p = o-&gt;prev;</span><br><span class="line">        <span class="keyword">if</span>( p-&gt;prev == f ) &#123;</span><br><span class="line">            p-&gt;<span class="built_in">pushdown</span>();</span><br><span class="line">            o-&gt;<span class="built_in">pushdown</span>();</span><br><span class="line">            <span class="keyword">int</span> d = p-&gt;lson == o? <span class="number">0</span>: <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">rotate</span>(p, d^<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        root g = p-&gt;prev;</span><br><span class="line">        g-&gt;<span class="built_in">pushdown</span>();</span><br><span class="line">        p-&gt;<span class="built_in">pushdown</span>();</span><br><span class="line">        o-&gt;<span class="built_in">pushdown</span>();</span><br><span class="line">        <span class="keyword">int</span> d = p-&gt;lson == o? <span class="number">0</span>: <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> d2 = g-&gt;lson == p? <span class="number">0</span>: <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>( d == d2 ) <span class="built_in">rotate</span>(g, d2^<span class="number">1</span>), <span class="built_in">rotate</span>(p, d^<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">rotate</span>(p, d^<span class="number">1</span>), <span class="built_in">rotate</span>(g, d2^<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_NODES = <span class="number">100000</span>+<span class="number">10</span>;</span><br><span class="line">node* null;</span><br><span class="line">node nodepool[MAX_NODES];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(root&amp; o, <span class="keyword">int</span> lft, <span class="keyword">int</span> rht)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid = (lft+rht) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    o = nodepool + mid;</span><br><span class="line">    o-&gt;key = mid;</span><br><span class="line">    o-&gt;siz = <span class="number">1</span>;</span><br><span class="line">    o-&gt;flip = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>( lft &lt; mid ) <span class="built_in">build</span>(o-&gt;lson, lft, mid<span class="number">-1</span>); <span class="keyword">else</span> o-&gt;lson = null;</span><br><span class="line">    <span class="keyword">if</span>( mid &lt; rht ) <span class="built_in">build</span>(o-&gt;rson, mid+<span class="number">1</span>, rht); <span class="keyword">else</span> o-&gt;rson = null;</span><br><span class="line">    o-&gt;lson-&gt;prev = o;</span><br><span class="line">    o-&gt;rson-&gt;prev = o;</span><br><span class="line">    o-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">solve</span><span class="params">(root&amp; rt, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    root o = nodepool+key;</span><br><span class="line">    <span class="built_in">splay</span>(o, rt-&gt;prev);</span><br><span class="line">    <span class="keyword">int</span> ans = o-&gt;lson-&gt;siz;</span><br><span class="line">    <span class="keyword">if</span>( ans ) &#123;</span><br><span class="line">        root k = o-&gt;lson;</span><br><span class="line">        k-&gt;<span class="built_in">reverse</span>();</span><br><span class="line">        <span class="keyword">for</span>(; k-&gt;rson != null; k=k-&gt;rson) k-&gt;<span class="built_in">pushdown</span>();</span><br><span class="line">        <span class="built_in">splay</span>(k, o);</span><br><span class="line">        k-&gt;rson = o-&gt;rson;</span><br><span class="line">        o-&gt;rson-&gt;prev = k;</span><br><span class="line">        o = k;</span><br><span class="line">    &#125; <span class="keyword">else</span> o = o-&gt;rson;</span><br><span class="line">    rt = o;</span><br><span class="line">    rt-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">    rt-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> std:: pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">100000</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">root rt;</span><br><span class="line">pii A[MAXN];</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> positive = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(; c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>; c=<span class="built_in">getchar</span>())</span><br><span class="line">        <span class="keyword">if</span>( c == <span class="string">&#x27;-&#x27;</span> ) positive = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(; c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c=<span class="built_in">getchar</span>())</span><br><span class="line">        s = s*<span class="number">10</span> + c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> positive? s: -s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;= N; ++i)</span><br><span class="line">        A[i] = <span class="built_in">pii</span>(<span class="built_in">read</span>(), i);</span><br><span class="line">    <span class="built_in">sort</span>(A+<span class="number">1</span>, A+N+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">build</span>(rt, <span class="number">1</span>, N);</span><br><span class="line">    rt-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    null = <span class="keyword">new</span> <span class="built_in">node</span>();</span><br><span class="line">    null-&gt;key = <span class="number">0</span>;</span><br><span class="line">    null-&gt;siz = <span class="number">0</span>;</span><br><span class="line">    null-&gt;flip = <span class="literal">false</span>;</span><br><span class="line">    null-&gt;lson = <span class="literal">NULL</span>;</span><br><span class="line">    null-&gt;rson = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N) == <span class="number">1</span> &amp;&amp; N ) &#123;</span><br><span class="line">        <span class="built_in">Init</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt; N; ++i) </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, <span class="built_in">solve</span>(rt, A[i].second)+i);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, N);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br></pre></td></tr></table></figure></span><strong> update time: 2016/07/05 </strong>法二：将原序列离散化成 1～$N$，建成 splay，多维护一个区间最小值，利用维护的 siz，就可以实现名次树的一些功能，就可以快速查找了。<span id="LA-3961_2"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span><span class="comment">/*&#123;&#123;&#123;*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> key;</span><br><span class="line">    <span class="keyword">int</span> siz;</span><br><span class="line">    <span class="keyword">int</span> minv;</span><br><span class="line">    <span class="keyword">bool</span> flip;</span><br><span class="line">    node* lson;</span><br><span class="line">    node* rson;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = lson-&gt;siz + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>( key == cnt ) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> key &lt; cnt? <span class="number">0</span>: <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        flip ^= <span class="number">1</span>;</span><br><span class="line">        std:: <span class="built_in">swap</span>(lson, rson);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( !flip ) <span class="keyword">return</span>;</span><br><span class="line">        lson-&gt;<span class="built_in">reverse</span>();</span><br><span class="line">        rson-&gt;<span class="built_in">reverse</span>();</span><br><span class="line">        flip = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        siz = lson-&gt;siz + <span class="number">1</span> + rson-&gt;siz;</span><br><span class="line">        minv = std:: <span class="built_in">min</span>(key, std:: <span class="built_in">min</span>(lson-&gt;minv, rson-&gt;minv));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> node* root;</span><br><span class="line">node* null;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">zag</span><span class="params">(root&amp; o)</span> </span>&#123;</span><br><span class="line">    root k = o-&gt;rson;</span><br><span class="line">    o-&gt;rson = k-&gt;lson;</span><br><span class="line">    k-&gt;lson = o;</span><br><span class="line">    o = k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">zig</span><span class="params">(root&amp; o)</span> </span>&#123;</span><br><span class="line">    root k = o-&gt;lson;</span><br><span class="line">    o-&gt;lson = k-&gt;rson;</span><br><span class="line">    k-&gt;rson = o;</span><br><span class="line">    o = k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(root&amp; o, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    d? <span class="built_in">zig</span>(o): <span class="built_in">zag</span>(o);</span><br><span class="line">    d? o-&gt;rson-&gt;<span class="built_in">maintain</span>(): o-&gt;lson-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">    o-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(root&amp; o, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    o-&gt;<span class="built_in">pushdown</span>();</span><br><span class="line">    <span class="keyword">int</span> d = o-&gt;<span class="built_in">cmp</span>(k);</span><br><span class="line">    <span class="keyword">if</span>( d == <span class="number">1</span> ) k -= o-&gt;lson-&gt;siz+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>( d != <span class="number">-1</span> ) &#123;</span><br><span class="line">        root&amp; p = d? o-&gt;rson: o-&gt;lson;</span><br><span class="line">        p-&gt;<span class="built_in">pushdown</span>();</span><br><span class="line">        <span class="keyword">int</span> d2 = p-&gt;<span class="built_in">cmp</span>(k);</span><br><span class="line">        <span class="keyword">if</span>( d2 == <span class="number">1</span> ) k -= p-&gt;lson-&gt;siz+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>( d2 != <span class="number">-1</span> ) &#123;</span><br><span class="line">            <span class="built_in">splay</span>((d2? p-&gt;rson: p-&gt;lson), k);</span><br><span class="line">            <span class="keyword">if</span>( d == d2 ) <span class="built_in">rotate</span>(o, d^<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">rotate</span>(p, d2^<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">rotate</span>(o, d^<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">(root o, <span class="keyword">int</span> k, root&amp; left, root&amp; right)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">splay</span>(o, k);</span><br><span class="line">    left = o;</span><br><span class="line">    right = o-&gt;rson;</span><br><span class="line">    o-&gt;rson = null;</span><br><span class="line">    o-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> root <span class="title">merge</span><span class="params">(root left, root right)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">splay</span>(left, left-&gt;siz);</span><br><span class="line">    left-&gt;rson = right;</span><br><span class="line">    left-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">kth</span><span class="params">(root rt)</span> </span>&#123;</span><br><span class="line">    rt-&gt;<span class="built_in">pushdown</span>();</span><br><span class="line">    <span class="keyword">if</span>( rt-&gt;key == rt-&gt;minv ) <span class="keyword">return</span> rt-&gt;lson-&gt;siz + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>( rt-&gt;lson-&gt;minv &lt; rt-&gt;rson-&gt;minv ) <span class="keyword">return</span> <span class="built_in">kth</span>(rt-&gt;lson);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">kth</span>(rt-&gt;rson) + rt-&gt;lson-&gt;siz + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_NODES = <span class="number">100000</span>+<span class="number">10</span>;</span><br><span class="line">node* nodetop;</span><br><span class="line">node nodepool[MAX_NODES];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> root <span class="title">newnode</span><span class="params">(<span class="keyword">int</span> key=<span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    nodetop-&gt;key = key;</span><br><span class="line">    nodetop-&gt;siz = <span class="number">1</span>;</span><br><span class="line">    nodetop-&gt;minv = key;</span><br><span class="line">    nodetop-&gt;flip = <span class="literal">false</span>;</span><br><span class="line">    nodetop-&gt;lson = null;</span><br><span class="line">    nodetop-&gt;rson = null;</span><br><span class="line">    <span class="keyword">return</span> nodetop++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(root&amp; o, <span class="keyword">int</span> lft, <span class="keyword">int</span> rht, <span class="keyword">int</span>* rank)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid = (lft+rht) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    o = <span class="built_in">newnode</span>(rank[mid]);</span><br><span class="line">    <span class="keyword">if</span>( lft &lt; mid ) <span class="built_in">build</span>(o-&gt;lson, lft, mid<span class="number">-1</span>, rank);</span><br><span class="line">    <span class="keyword">if</span>( mid &lt; rht ) <span class="built_in">build</span>(o-&gt;rson, mid+<span class="number">1</span>, rht, rank);</span><br><span class="line">    o-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">100000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> N, A[MAXN], id[MAXN], rank[MAXN];</span><br><span class="line">root rt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123; <span class="keyword">return</span> A[u] &lt; A[v]; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> positive = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(; c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>; c=<span class="built_in">getchar</span>())</span><br><span class="line">        <span class="keyword">if</span>( c == <span class="string">&#x27;-&#x27;</span> ) positive = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(; c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c=<span class="built_in">getchar</span>())</span><br><span class="line">        s = s*<span class="number">10</span> + c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> positive? s: -s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    nodetop = nodepool;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="built_in">kth</span>(rt);</span><br><span class="line">    <span class="built_in">splay</span>(rt, k);</span><br><span class="line">    <span class="keyword">int</span> ans = rt-&gt;lson-&gt;siz;</span><br><span class="line">    <span class="keyword">if</span>( ans ) &#123;</span><br><span class="line">        rt-&gt;lson-&gt;<span class="built_in">reverse</span>();</span><br><span class="line">        <span class="built_in">splay</span>(rt-&gt;lson, rt-&gt;lson-&gt;siz);</span><br><span class="line">        rt = <span class="built_in">merge</span>(rt-&gt;lson, rt-&gt;rson);</span><br><span class="line">    &#125; <span class="keyword">else</span> rt = rt-&gt;rson, rt-&gt;<span class="built_in">pushdown</span>();</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    null = <span class="keyword">new</span> <span class="built_in">node</span>();</span><br><span class="line">    null-&gt;key = <span class="number">0</span>;</span><br><span class="line">    null-&gt;siz = <span class="number">0</span>;</span><br><span class="line">    null-&gt;minv = INF;</span><br><span class="line">    null-&gt;flip = <span class="literal">false</span>;</span><br><span class="line">    null-&gt;lson = <span class="literal">NULL</span>;</span><br><span class="line">    null-&gt;rson = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N) == <span class="number">1</span> &amp;&amp; N ) &#123;</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;= N; ++i) A[i] = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;= N; ++i) id[i] = i;</span><br><span class="line">        std:: <span class="built_in">stable_sort</span>(id+<span class="number">1</span>, id+N+<span class="number">1</span>, cmp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;= N; ++i) rank[id[i]] = i;</span><br><span class="line">        <span class="built_in">build</span>(rt, <span class="number">1</span>, N, rank);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt; N; ++i) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, <span class="built_in">solve</span>()+i); </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, N);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br></pre></td></tr></table></figure></span><strong> update time: 2016/07/06 </strong><hr><p><strong>HYSBZ/1269 <em><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1269">文本编辑器 editor</a></em></strong><br>都是一些 splay 的经典操作，为了方便操作，在最最左边和最右边分别加了一个虚拟节点。<br><span id="HYSBZ-1269"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span><span class="comment">/*&#123;&#123;&#123;*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> key;</span><br><span class="line">    <span class="keyword">int</span> siz;</span><br><span class="line">    <span class="keyword">bool</span> flip;</span><br><span class="line">    node* lson;</span><br><span class="line">    node* rson;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = lson-&gt;siz + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>( x == cnt ) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> x &lt; cnt? <span class="number">0</span>: <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        flip ^= <span class="number">1</span>;</span><br><span class="line">        std:: <span class="built_in">swap</span>(lson, rson);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( !flip ) <span class="keyword">return</span>;</span><br><span class="line">        lson-&gt;<span class="built_in">reverse</span>();</span><br><span class="line">        rson-&gt;<span class="built_in">reverse</span>();</span><br><span class="line">        flip ^= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        siz = lson-&gt;siz + <span class="number">1</span> + rson-&gt;siz;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> node* root;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_NODES = (<span class="number">1</span>&lt;&lt;<span class="number">22</span>) + <span class="number">10</span>;</span><br><span class="line">node* null;</span><br><span class="line">node* nodetop;</span><br><span class="line">node nodepool[MAX_NODES];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> root <span class="title">newnode</span><span class="params">(<span class="keyword">char</span> key)</span> </span>&#123;</span><br><span class="line">    nodetop-&gt;key = key;</span><br><span class="line">    nodetop-&gt;siz = <span class="number">1</span>;</span><br><span class="line">    nodetop-&gt;flip = <span class="literal">false</span>;</span><br><span class="line">    nodetop-&gt;lson = null;</span><br><span class="line">    nodetop-&gt;rson = null;</span><br><span class="line">    <span class="keyword">return</span> nodetop++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">zag</span><span class="params">(root&amp; o)</span> </span>&#123;</span><br><span class="line">    root k = o-&gt;rson;</span><br><span class="line">    o-&gt;rson = k-&gt;lson;</span><br><span class="line">    k-&gt;lson = o;</span><br><span class="line">    o = k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">zig</span><span class="params">(root&amp; o)</span> </span>&#123;</span><br><span class="line">    root k = o-&gt;lson;</span><br><span class="line">    o-&gt;lson = k-&gt;rson;</span><br><span class="line">    k-&gt;rson = o;</span><br><span class="line">    o = k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(root&amp; o, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    d? <span class="built_in">zig</span>(o): <span class="built_in">zag</span>(o);</span><br><span class="line">    d? o-&gt;rson-&gt;<span class="built_in">maintain</span>(): o-&gt;lson-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">    o-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(root&amp; o, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    o-&gt;<span class="built_in">pushdown</span>();</span><br><span class="line">    <span class="keyword">int</span> d = o-&gt;<span class="built_in">cmp</span>(k);</span><br><span class="line">    <span class="keyword">if</span>( d == <span class="number">1</span> ) k -= o-&gt;lson-&gt;siz+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>( d != <span class="number">-1</span> ) &#123;</span><br><span class="line">        root&amp; p = d? o-&gt;rson: o-&gt;lson;</span><br><span class="line">        p-&gt;<span class="built_in">pushdown</span>();</span><br><span class="line">        <span class="keyword">int</span> d2 = p-&gt;<span class="built_in">cmp</span>(k);</span><br><span class="line">        <span class="keyword">if</span>( d2 == <span class="number">1</span> ) k -= p-&gt;lson-&gt;siz+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>( d2 != <span class="number">-1</span> ) &#123;</span><br><span class="line">            <span class="built_in">splay</span>((d2? p-&gt;rson: p-&gt;lson), k);</span><br><span class="line">            <span class="keyword">if</span>( d == d2 ) <span class="built_in">rotate</span>(o, d^<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">rotate</span>(p, d);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">rotate</span>(o, d^<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">(root o, <span class="keyword">int</span> k, root&amp; left, root&amp; right)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">splay</span>(o, k);</span><br><span class="line">    left = o;</span><br><span class="line">    right = o-&gt;rson;</span><br><span class="line">    o-&gt;rson = null;</span><br><span class="line">    o-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> root <span class="title">merge</span><span class="params">(root left, root right)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">splay</span>(left, left-&gt;siz);</span><br><span class="line">    left-&gt;rson = right;</span><br><span class="line">    left-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(root&amp; o, <span class="keyword">int</span> lft, <span class="keyword">int</span> rht, <span class="keyword">char</span>* s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid = (lft+rht) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    o = <span class="built_in">newnode</span>(s[mid]);</span><br><span class="line">    <span class="keyword">if</span>( lft &lt; mid ) <span class="built_in">build</span>(o-&gt;lson, lft, mid<span class="number">-1</span>, s);</span><br><span class="line">    <span class="keyword">if</span>( mid &lt; rht ) <span class="built_in">build</span>(o-&gt;rson, mid+<span class="number">1</span>, rht, s);</span><br><span class="line">    o-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = (<span class="number">1</span>&lt;&lt;<span class="number">22</span>) + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">char</span> s[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Move</span><span class="params">(root&amp; rt, <span class="keyword">int</span> k)</span> </span>&#123; <span class="built_in">splay</span>(rt, k); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Insert</span><span class="params">(root&amp; rt, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(s[<span class="number">1</span>]=<span class="built_in">getchar</span>(); s[<span class="number">1</span>] &lt; <span class="number">32</span> || s[<span class="number">1</span>] &gt; <span class="number">126</span>;) s[<span class="number">1</span>] = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i &lt;= n; ++i) s[i] = <span class="built_in">getchar</span>();</span><br><span class="line">    root left = rt;</span><br><span class="line">    root middle; <span class="built_in">build</span>(middle, <span class="number">1</span>, n, s);</span><br><span class="line">    root right = rt-&gt;rson;</span><br><span class="line">    rt-&gt;rson = null;</span><br><span class="line">    rt-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">    rt = <span class="built_in">merge</span>(left, <span class="built_in">merge</span>(middle, right));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Delete</span><span class="params">(root&amp; rt, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">splay</span>(rt-&gt;rson, n);</span><br><span class="line">    rt-&gt;rson = rt-&gt;rson-&gt;rson;</span><br><span class="line">    rt-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Rotate</span><span class="params">(root&amp; rt, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">splay</span>(rt-&gt;rson, n+<span class="number">1</span>);</span><br><span class="line">    rt-&gt;rson-&gt;lson-&gt;<span class="built_in">reverse</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Get</span><span class="params">(root&amp; rt)</span> </span>&#123;</span><br><span class="line">    root o = rt-&gt;rson;</span><br><span class="line">    <span class="keyword">for</span>(; o-&gt;lson != null; o=o-&gt;lson) o-&gt;<span class="built_in">pushdown</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, o-&gt;key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Prev</span><span class="params">(root&amp; rt)</span> </span>&#123; <span class="built_in">splay</span>(rt, rt-&gt;lson-&gt;siz); &#125; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Next</span><span class="params">(root&amp; rt)</span> </span>&#123; <span class="built_in">splay</span>(rt, rt-&gt;lson-&gt;siz+<span class="number">2</span>); &#125;</span><br><span class="line"></span><br><span class="line">root rt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    null = <span class="keyword">new</span> <span class="built_in">node</span>();</span><br><span class="line">    null-&gt;key = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    null-&gt;siz = <span class="number">0</span>;</span><br><span class="line">    null-&gt;flip = <span class="literal">false</span>;</span><br><span class="line">    null-&gt;lson = <span class="literal">NULL</span>;</span><br><span class="line">    null-&gt;rson = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    nodetop = nodepool;</span><br><span class="line">    rt = <span class="built_in">newnode</span>(<span class="number">31</span>);</span><br><span class="line">    rt-&gt;rson = <span class="built_in">newnode</span>(<span class="number">127</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> positive = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(; c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>; c=<span class="built_in">getchar</span>())</span><br><span class="line">        <span class="keyword">if</span>( c == <span class="string">&#x27;-&#x27;</span> ) positive = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(; c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c=<span class="built_in">getchar</span>())</span><br><span class="line">        s = s*<span class="number">10</span> + c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> cmd[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Init</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> N = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, cmd);</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span>( cmd[<span class="number">0</span>] ) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;M&#x27;</span>: <span class="built_in">Move</span>(rt, <span class="built_in">read</span>()+<span class="number">1</span>); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;I&#x27;</span>: <span class="built_in">Insert</span>(rt, <span class="built_in">read</span>()); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>: <span class="built_in">Delete</span>(rt, <span class="built_in">read</span>()); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;R&#x27;</span>: <span class="built_in">Rotate</span>(rt, <span class="built_in">read</span>()); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;G&#x27;</span>: <span class="built_in">Get</span>(rt); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;P&#x27;</span>: <span class="built_in">Prev</span>(rt); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;N&#x27;</span>: <span class="built_in">Next</span>(rt); <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br></pre></td></tr></table></figure></span><strong> update time: 2016/07/05 </strong><hr><p><strong>HYSBZ/1500 <em><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1500">维修数列</a></em></strong><br>前五个操作比较简单，第六个操作，需要维护：子树左侧起最大连续和 $mxlv$（可以为空），子树右侧起最大连续和 $mxrv$（可以为空），子树中最大连续和 $mxmv$（非空）。在序列的最左侧和最右侧增加两个虚拟节点就可以很方便了，注意为了不影响结果的正确性，虚拟节点的 sum 值需为 0，但是节点的 $key,mxlv,mxmv,mxrv$ 均需设成负无穷。<br><span id="HYSBZ-1500"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span><span class="comment">/*&#123;&#123;&#123;*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> key;</span><br><span class="line">    <span class="keyword">int</span> siz;</span><br><span class="line">    <span class="keyword">int</span> setv;   <span class="comment">// 懒惰标记，表示是否标记为同一个值</span></span><br><span class="line">    <span class="keyword">int</span> sumv;   <span class="comment">// 该节点为根的子树的 $\sum key$</span></span><br><span class="line">    <span class="keyword">int</span> mxlv;   <span class="comment">// 该节点为根的子树表示的序列左侧（可以为空）最大连续和</span></span><br><span class="line">    <span class="keyword">int</span> mxmv;   <span class="comment">// 该节点为根的子树最大连续和</span></span><br><span class="line">    <span class="keyword">int</span> mxrv;   <span class="comment">// 该节点为根的子树表示的序列右侧（可以为空）最大连续和</span></span><br><span class="line">    <span class="keyword">bool</span> flip;  <span class="comment">// 懒惰标记，表示是否翻转</span></span><br><span class="line">    node* lson;</span><br><span class="line">    node* rson;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> node* null;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = lson-&gt;siz + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>( x == cnt ) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> x &lt; cnt? <span class="number">0</span>: <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        flip ^= <span class="number">1</span>;</span><br><span class="line">        std:: <span class="built_in">swap</span>(lson, rson);</span><br><span class="line">        std:: <span class="built_in">swap</span>(mxlv, mxrv);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> tag)</span> </span>&#123;</span><br><span class="line">        setv = tag;</span><br><span class="line">        key = tag;</span><br><span class="line">        sumv = tag * siz;</span><br><span class="line">        mxlv = mxrv = tag &gt; <span class="number">0</span>? sumv: <span class="number">0</span>;</span><br><span class="line">        mxmv = tag &gt; <span class="number">0</span>? sumv: tag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( flip ) &#123;</span><br><span class="line">            lson-&gt;<span class="built_in">reverse</span>();</span><br><span class="line">            rson-&gt;<span class="built_in">reverse</span>();</span><br><span class="line">            flip = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( setv != -INF ) &#123;</span><br><span class="line">            <span class="keyword">if</span>( lson != null ) lson-&gt;<span class="built_in">update</span>(setv);</span><br><span class="line">            <span class="keyword">if</span>( rson != null ) rson-&gt;<span class="built_in">update</span>(setv);</span><br><span class="line">            setv = -INF;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        siz = lson-&gt;siz + <span class="number">1</span> + rson-&gt;siz;</span><br><span class="line">        sumv = lson-&gt;sumv + key + rson-&gt;sumv;</span><br><span class="line">        mxlv = std:: <span class="built_in">max</span>(lson-&gt;mxlv, lson-&gt;sumv + key + rson-&gt;mxlv);</span><br><span class="line">        mxrv = std:: <span class="built_in">max</span>(rson-&gt;mxrv, lson-&gt;mxrv + key + rson-&gt;sumv);</span><br><span class="line">        mxmv = std:: <span class="built_in">max</span>(lson-&gt;mxmv, rson-&gt;mxmv);</span><br><span class="line">        mxmv = std:: <span class="built_in">max</span>(mxmv, lson-&gt;mxrv + key + rson-&gt;mxlv);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> node* root;</span><br><span class="line">node* node:: null = <span class="keyword">new</span> <span class="built_in">node</span>();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">zag</span><span class="params">(root&amp; o)</span> </span>&#123;</span><br><span class="line">    root k = o-&gt;rson;</span><br><span class="line">    o-&gt;rson = k-&gt;lson;</span><br><span class="line">    k-&gt;lson = o;</span><br><span class="line">    o = k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">zig</span><span class="params">(root&amp; o)</span> </span>&#123;</span><br><span class="line">    root k = o-&gt;lson;</span><br><span class="line">    o-&gt;lson = k-&gt;rson;</span><br><span class="line">    k-&gt;rson = o;</span><br><span class="line">    o = k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(root&amp; o, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    d? <span class="built_in">zig</span>(o): <span class="built_in">zag</span>(o);</span><br><span class="line">    d? o-&gt;rson-&gt;<span class="built_in">maintain</span>(): o-&gt;lson-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">    o-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(root&amp; o, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    o-&gt;<span class="built_in">pushdown</span>();</span><br><span class="line">    <span class="keyword">int</span> d = o-&gt;<span class="built_in">cmp</span>(k);</span><br><span class="line">    <span class="keyword">if</span>( d == <span class="number">1</span> ) k -= o-&gt;lson-&gt;siz+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>( d != <span class="number">-1</span> ) &#123;</span><br><span class="line">        root&amp; p = d? o-&gt;rson: o-&gt;lson;</span><br><span class="line">        p-&gt;<span class="built_in">pushdown</span>();</span><br><span class="line">        <span class="keyword">int</span> d2 = p-&gt;<span class="built_in">cmp</span>(k);</span><br><span class="line">        <span class="keyword">if</span>( d2 == <span class="number">1</span> ) k -= p-&gt;lson-&gt;siz+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>( d2 != <span class="number">-1</span> ) &#123;</span><br><span class="line">            <span class="built_in">splay</span>((d2? p-&gt;rson: p-&gt;lson), k);</span><br><span class="line">            <span class="keyword">if</span>( d == d2 ) <span class="built_in">rotate</span>(o, d^<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">rotate</span>(p, d);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">rotate</span>(o, d^<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">(root o, <span class="keyword">int</span> k, root&amp; left, root&amp; right)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">splay</span>(o, k);</span><br><span class="line">    left = o;</span><br><span class="line">    right = o-&gt;rson;</span><br><span class="line">    o-&gt;rson = node:: null;</span><br><span class="line">    o-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> root <span class="title">merge</span><span class="params">(root left, root right)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">splay</span>(left, left-&gt;siz);</span><br><span class="line">    left-&gt;rson = right;</span><br><span class="line">    left-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/********************** 以上为 splay 基本操作 *******************/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_NODES = <span class="number">1000000</span>+<span class="number">10</span>;</span><br><span class="line">std:: queue&lt;root&gt; Qnodepool;</span><br><span class="line">node nodepool[MAX_NODES];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> root <span class="title">newnode</span><span class="params">(<span class="keyword">int</span> key=<span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    root nodetop = Qnodepool.<span class="built_in">front</span>(); Qnodepool.<span class="built_in">pop</span>();</span><br><span class="line">    nodetop-&gt;key = key;</span><br><span class="line">    nodetop-&gt;siz = <span class="number">1</span>;</span><br><span class="line">    nodetop-&gt;setv = -INF;</span><br><span class="line">    nodetop-&gt;sumv = key;</span><br><span class="line">    nodetop-&gt;mxlv = key &gt; <span class="number">0</span>? key: <span class="number">0</span>;</span><br><span class="line">    nodetop-&gt;mxmv = key;</span><br><span class="line">    nodetop-&gt;mxrv = key &gt; <span class="number">0</span>? key: <span class="number">0</span>;</span><br><span class="line">    nodetop-&gt;flip = <span class="literal">false</span>;</span><br><span class="line">    nodetop-&gt;lson = node:: null;</span><br><span class="line">    nodetop-&gt;rson = node:: null;</span><br><span class="line">    <span class="keyword">return</span> nodetop;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">deletenode</span><span class="params">(root o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( o == node:: null ) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">deletenode</span>(o-&gt;lson);</span><br><span class="line">    <span class="built_in">deletenode</span>(o-&gt;rson);</span><br><span class="line">    Qnodepool.<span class="built_in">push</span>(o);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(root&amp; o, <span class="keyword">int</span> lft, <span class="keyword">int</span> rht, <span class="keyword">int</span>* A)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid = (lft+rht) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    o = <span class="built_in">newnode</span>(A[mid]);</span><br><span class="line">    <span class="keyword">if</span>( lft &lt; mid ) <span class="built_in">build</span>(o-&gt;lson, lft, mid<span class="number">-1</span>, A);</span><br><span class="line">    <span class="keyword">if</span>( mid &lt; rht ) <span class="built_in">build</span>(o-&gt;rson, mid+<span class="number">1</span>, rht, A);</span><br><span class="line">    <span class="keyword">if</span>( A[mid] == -INF ) o-&gt;sumv = <span class="number">0</span>;</span><br><span class="line">    o-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> positive = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(; c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>; c=<span class="built_in">getchar</span>())</span><br><span class="line">        <span class="keyword">if</span>( c == <span class="string">&#x27;-&#x27;</span> ) positive = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(; c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c=<span class="built_in">getchar</span>())</span><br><span class="line">        s = s*<span class="number">10</span> + c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> positive? s: -s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">500000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> A[MAXN];</span><br><span class="line">root rt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">INSERT</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> tot)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;= tot; ++i) A[i] = <span class="built_in">read</span>();</span><br><span class="line">    root left, middle, right;</span><br><span class="line">    <span class="built_in">build</span>(middle, <span class="number">1</span>, tot, A);</span><br><span class="line">    <span class="built_in">split</span>(rt, pos+<span class="number">1</span>, left, right);</span><br><span class="line">    rt = <span class="built_in">merge</span>(<span class="built_in">merge</span>(left, middle), right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">DELETE</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> tot)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">splay</span>(rt, pos);</span><br><span class="line">    <span class="built_in">splay</span>(rt-&gt;rson, tot+<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">deletenode</span>(rt-&gt;rson-&gt;lson);</span><br><span class="line"></span><br><span class="line">    rt-&gt;rson-&gt;lson = node:: null;</span><br><span class="line">    rt-&gt;rson-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">    rt-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">MODIFY</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> tot, <span class="keyword">int</span> tag)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">splay</span>(rt, pos);</span><br><span class="line">    <span class="built_in">splay</span>(rt-&gt;rson, tot+<span class="number">1</span>);</span><br><span class="line">    rt-&gt;rson-&gt;lson-&gt;<span class="built_in">update</span>(tag);</span><br><span class="line">    rt-&gt;rson-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">    rt-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">REVERSE</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> tot)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">splay</span>(rt, pos);</span><br><span class="line">    <span class="built_in">splay</span>(rt-&gt;rson, tot+<span class="number">1</span>);</span><br><span class="line">    rt-&gt;rson-&gt;lson-&gt;<span class="built_in">reverse</span>();</span><br><span class="line">    rt-&gt;rson-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">    rt-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">GETSUM</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> tot)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">splay</span>(rt, pos);</span><br><span class="line">    <span class="built_in">splay</span>(rt-&gt;rson, tot+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> rt-&gt;rson-&gt;lson-&gt;sumv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">MAXSUM</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> rt-&gt;mxmv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>( !Qnodepool.<span class="built_in">empty</span>() ) Qnodepool.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; MAX_NODES; ++i) Qnodepool.<span class="built_in">push</span>(nodepool+i);</span><br><span class="line">    node:: null-&gt;key = -INF;</span><br><span class="line">    node:: null-&gt;siz = <span class="number">0</span>;</span><br><span class="line">    node:: null-&gt;setv = -INF;</span><br><span class="line">    node:: null-&gt;sumv = <span class="number">0</span>;</span><br><span class="line">    node:: null-&gt;mxlv = <span class="number">0</span>;</span><br><span class="line">    node:: null-&gt;mxmv = -INF;</span><br><span class="line">    node:: null-&gt;mxrv = <span class="number">0</span>;</span><br><span class="line">    node:: null-&gt;flip = <span class="literal">false</span>;</span><br><span class="line">    node:: null-&gt;lson = <span class="literal">NULL</span>;</span><br><span class="line">    node:: null-&gt;rson = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> N = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">int</span> Q = <span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;= N; ++i) A[i] = <span class="built_in">read</span>();</span><br><span class="line">    A[<span class="number">0</span>] = A[N+<span class="number">1</span>] = -INF;</span><br><span class="line">    <span class="built_in">build</span>(rt, <span class="number">0</span>, N+<span class="number">1</span>, A);</span><br><span class="line">    <span class="keyword">while</span>( Q-- ) &#123;</span><br><span class="line">        <span class="keyword">char</span> cmd[<span class="number">20</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, cmd);</span><br><span class="line">        <span class="keyword">if</span>( cmd[<span class="number">0</span>] == <span class="string">&#x27;M&#x27;</span> &amp;&amp; cmd[<span class="number">2</span>] == <span class="string">&#x27;X&#x27;</span> ) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">MAXSUM</span>());</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> arg1 = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">int</span> arg2 = <span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span>( cmd[<span class="number">0</span>] ) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;I&#x27;</span>: <span class="built_in">INSERT</span>(arg1, arg2); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>: <span class="built_in">DELETE</span>(arg1, arg2); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;M&#x27;</span>: <span class="built_in">MODIFY</span>(arg1, arg2, <span class="built_in">read</span>()); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;R&#x27;</span>: <span class="built_in">REVERSE</span>(arg1, arg2); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;G&#x27;</span>: <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">GETSUM</span>(arg1, arg2)); <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br></pre></td></tr></table></figure></span><strong> update time: 2016/07/07 </strong><hr><p><strong>POJ/2828 <em><a href="http://poj.org/problem?id=2828">Buy Tickets</a></em></strong><br>法一：在线做。直接 splay 模拟，容易超时，可以检验自己 splay 写法常数大不大（不加读入读出优化的前提下）。<br>Hint POJ 加读入读出优化能快很多 = =<br><span id="POJ-2828_1"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span><span class="comment">/*&#123;&#123;&#123;*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> key;</span><br><span class="line">    <span class="keyword">int</span> siz;</span><br><span class="line">    node* lson;</span><br><span class="line">    node* rson;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> node* null;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = lson-&gt;siz+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>( x == cnt ) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> x &lt; cnt? <span class="number">0</span>: <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        siz = lson-&gt;siz + <span class="number">1</span> + rson-&gt;siz;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> node* root;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">zag</span><span class="params">(root&amp; o)</span> </span>&#123;</span><br><span class="line">    root k = o-&gt;rson;</span><br><span class="line">    o-&gt;rson = k-&gt;lson;</span><br><span class="line">    k-&gt;lson = o;</span><br><span class="line">    o = k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">zig</span><span class="params">(root&amp; o)</span> </span>&#123;</span><br><span class="line">    root k = o-&gt;lson;</span><br><span class="line">    o-&gt;lson = k-&gt;rson;</span><br><span class="line">    k-&gt;rson = o;</span><br><span class="line">    o = k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(root&amp; o, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    d? <span class="built_in">zig</span>(o): <span class="built_in">zag</span>(o);</span><br><span class="line">    d? o-&gt;rson-&gt;<span class="built_in">maintain</span>(): o-&gt;lson-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">    o-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(root&amp; o, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> d = o-&gt;<span class="built_in">cmp</span>(k);</span><br><span class="line">    <span class="keyword">if</span>( d == <span class="number">1</span> ) k -= o-&gt;lson-&gt;siz+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>( d != <span class="number">-1</span> ) &#123;</span><br><span class="line">        root&amp; p = d? o-&gt;rson: o-&gt;lson;</span><br><span class="line">        <span class="keyword">int</span> d2 = p-&gt;<span class="built_in">cmp</span>(k);</span><br><span class="line">        <span class="keyword">if</span>( d2 == <span class="number">1</span> ) k -= p-&gt;lson-&gt;siz+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>( d2 != <span class="number">-1</span> ) &#123;</span><br><span class="line">            <span class="built_in">splay</span>((d2? p-&gt;rson: p-&gt;lson), k);</span><br><span class="line">            <span class="keyword">if</span>( d == d2 ) <span class="built_in">rotate</span>(o, d^<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">rotate</span>(p, d);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">rotate</span>(o, d^<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">(root o, <span class="keyword">int</span> k, root&amp; left, root&amp; right)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">splay</span>(o, k);</span><br><span class="line">    left = o;</span><br><span class="line">    right = o-&gt;rson;</span><br><span class="line">    o-&gt;rson = node:: null;</span><br><span class="line">    o-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_NODES = <span class="number">200000</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">node* nodetop;</span><br><span class="line">node nodepool[MAX_NODES];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> root <span class="title">newnode</span><span class="params">(<span class="keyword">int</span> key=<span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    nodetop-&gt;key = key;</span><br><span class="line">    nodetop-&gt;siz = <span class="number">0</span>;</span><br><span class="line">    nodetop-&gt;lson = node:: null;</span><br><span class="line">    nodetop-&gt;rson = node:: null;</span><br><span class="line">    <span class="keyword">return</span> nodetop++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(root&amp; rt, <span class="keyword">int</span> pos, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    root left, right;</span><br><span class="line">    <span class="built_in">split</span>(rt, pos+<span class="number">1</span>, left, right);</span><br><span class="line">    left-&gt;rson = <span class="built_in">newnode</span>(key);</span><br><span class="line">    left-&gt;rson-&gt;rson = right;</span><br><span class="line">    left-&gt;rson-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">    left-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">    rt = left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> positive = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(; c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>; c=<span class="built_in">getchar</span>())</span><br><span class="line">        <span class="keyword">if</span>( c == <span class="string">&#x27;-&#x27;</span> ) positive = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(; c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c=<span class="built_in">getchar</span>())</span><br><span class="line">        s = s*<span class="number">10</span> + c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> positive? s: -s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( s &gt; <span class="number">9</span> ) <span class="built_in">print</span>(s/<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(s%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node* node:: null = <span class="keyword">new</span> <span class="built_in">node</span>();</span><br><span class="line">root rt;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    node:: null-&gt;key = <span class="number">0</span>;</span><br><span class="line">    node:: null-&gt;siz = <span class="number">0</span>;</span><br><span class="line">    node:: null-&gt;lson = <span class="literal">NULL</span>;</span><br><span class="line">    node:: null-&gt;rson = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">printtree</span><span class="params">(root&amp; o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( o == node:: null ) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">printtree</span>(o-&gt;lson);</span><br><span class="line">    <span class="built_in">print</span>(o-&gt;key); <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    <span class="built_in">printtree</span>(o-&gt;rson);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N) == <span class="number">1</span> ) &#123;</span><br><span class="line">        nodetop = nodepool;</span><br><span class="line">        rt = <span class="built_in">newnode</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> arg1 = <span class="built_in">read</span>();</span><br><span class="line">            <span class="keyword">int</span> arg2 = <span class="built_in">read</span>();</span><br><span class="line">            <span class="built_in">insert</span>(rt, arg1, arg2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">splay</span>(rt, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printtree</span>(rt-&gt;rson);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br></pre></td></tr></table></figure></span>法二：离线做。类似约瑟夫问题的线段树写法。初始时，维护一个前缀和 $\displaystyle sum(N)=\sum\_{i=1}^N i$；最后一个人的最终位置显然是 pos+1，然后去掉这个人，那么倒数第二个人就成了最后一个人了。<span id="POJ-2828_2"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span><span class="comment">/*&#123;&#123;&#123;*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  lc (o&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  rc (o&lt;&lt;1|1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  lson lc, lft, mid</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  rson rc, mid+1, rht</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  MID(lft, rht) (lft+rht&gt;&gt;1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">200000</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sumv[MAXN&lt;&lt;<span class="number">2</span>], ans[MAXN], pos[MAXN], val[MAXN], N;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> lft, <span class="keyword">int</span> rht)</span> </span>&#123;</span><br><span class="line">    sumv[o] = rht-lft+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>( lft == rht ) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = <span class="built_in">MID</span>(lft, rht);</span><br><span class="line">    <span class="built_in">build</span>(lson);</span><br><span class="line">    <span class="built_in">build</span>(rson);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> lft, <span class="keyword">int</span> rht, <span class="keyword">int</span> pos, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    --sumv[o];</span><br><span class="line">    <span class="keyword">if</span>( lft == rht ) ans[lft] = val;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = <span class="built_in">MID</span>(lft, rht);</span><br><span class="line">        <span class="keyword">if</span>( pos &lt;= sumv[lc] ) <span class="built_in">query</span>(lson, pos, val);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">query</span>(rson, pos-sumv[lc], val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> positive = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(; c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>; c=<span class="built_in">getchar</span>())</span><br><span class="line">        <span class="keyword">if</span>( c == <span class="string">&#x27;-&#x27;</span> ) positive = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(; c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c=<span class="built_in">getchar</span>())</span><br><span class="line">        s = s*<span class="number">10</span> + c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> positive? s: -s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( s &gt; <span class="number">9</span> ) <span class="built_in">print</span>(s/<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(s%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N) == <span class="number">1</span> ) &#123;</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, N);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;= N; ++i) </span><br><span class="line">            pos[i] = <span class="built_in">read</span>()+<span class="number">1</span>, val[i] = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=N; i; --i) </span><br><span class="line">            <span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, N, pos[i], val[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;= N; ++i) </span><br><span class="line">            <span class="built_in">print</span>(ans[i]), <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br></pre></td></tr></table></figure></span><strong> update time: 2016/07/07 </strong><hr><p><strong>HYSBZ/1503 <em><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1503">郁闷的出纳员</a></em></strong><br>只需要用 splay 实现名次树即可。注意由于存在懒惰标记，在查询第 $k$ 大，及确定有多少个值比 $key$ 小，这两个操作的过程中都要一路 $pushdown$。坑点：立即离开公司的人不算入答案。。。<br><span id="HYSBZ-1503"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span><span class="comment">/*&#123;&#123;&#123;*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> key;</span><br><span class="line">    <span class="keyword">int</span> siz;</span><br><span class="line">    <span class="keyword">int</span> addv;</span><br><span class="line">    node* lson;</span><br><span class="line">    node* rson;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> node* null;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = lson-&gt;siz+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>( s == cnt ) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> s &lt; cnt? <span class="number">0</span>: <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        key += v;</span><br><span class="line">        addv += v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( !addv ) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>( lson != null ) lson-&gt;<span class="built_in">update</span>(addv);</span><br><span class="line">        <span class="keyword">if</span>( rson != null ) rson-&gt;<span class="built_in">update</span>(addv);</span><br><span class="line">        addv = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">maintain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        siz = lson-&gt;siz + <span class="number">1</span> + rson-&gt;siz;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> node* root;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">zag</span><span class="params">(root&amp; o)</span> </span>&#123;</span><br><span class="line">    root k = o-&gt;rson;</span><br><span class="line">    o-&gt;rson = k-&gt;lson;</span><br><span class="line">    k-&gt;lson = o;</span><br><span class="line">    o = k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">zig</span><span class="params">(root&amp; o)</span> </span>&#123;</span><br><span class="line">    root k = o-&gt;lson;</span><br><span class="line">    o-&gt;lson = k-&gt;rson;</span><br><span class="line">    k-&gt;rson = o;</span><br><span class="line">    o = k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(root&amp; o, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    d? <span class="built_in">zig</span>(o): <span class="built_in">zag</span>(o);</span><br><span class="line">    d? o-&gt;rson-&gt;<span class="built_in">maintain</span>(): o-&gt;lson-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">    o-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">printtree</span><span class="params">(root o, <span class="keyword">int</span> cur=<span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( o == node:: null ) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">printtree</span>(o-&gt;lson, cur+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;cur %d: key=%d, siz=%d\n&quot;</span>, cur, o-&gt;key, o-&gt;siz);</span><br><span class="line">    <span class="built_in">printtree</span>(o-&gt;rson, cur+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>( !cur ) <span class="built_in">printf</span>(<span class="string">&quot;---------------------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(root&amp; o, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    o-&gt;<span class="built_in">pushdown</span>();</span><br><span class="line">    <span class="keyword">int</span> d = o-&gt;<span class="built_in">cmp</span>(k);</span><br><span class="line">    <span class="keyword">if</span>( d == <span class="number">1</span> ) k -= o-&gt;lson-&gt;siz+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>( d != <span class="number">-1</span> ) &#123;</span><br><span class="line">        root&amp; p = d? o-&gt;rson: o-&gt;lson;</span><br><span class="line">        p-&gt;<span class="built_in">pushdown</span>();</span><br><span class="line">        <span class="keyword">int</span> d2 = p-&gt;<span class="built_in">cmp</span>(k);</span><br><span class="line">        <span class="keyword">if</span>( d2 == <span class="number">1</span> ) k -= p-&gt;lson-&gt;siz+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>( d2 != <span class="number">-1</span> ) &#123;</span><br><span class="line">            <span class="built_in">splay</span>((d2? p-&gt;rson: p-&gt;lson), k);</span><br><span class="line">            <span class="keyword">if</span>( d == d2 ) <span class="built_in">rotate</span>(o, d^<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">rotate</span>(p, d);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">rotate</span>(o, d^<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">kth</span><span class="params">(root o, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    o-&gt;<span class="built_in">pushdown</span>();</span><br><span class="line">    <span class="keyword">int</span> d = o-&gt;<span class="built_in">cmp</span>(k);</span><br><span class="line">    <span class="keyword">if</span>( d == <span class="number">-1</span> ) <span class="keyword">return</span> o-&gt;key;</span><br><span class="line">    <span class="keyword">return</span> d? <span class="built_in">kth</span>(o-&gt;rson, k - o-&gt;lson-&gt;siz - <span class="number">1</span>): <span class="built_in">kth</span>(o-&gt;lson, k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">rank</span><span class="params">(root o, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( o == node:: null ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    o-&gt;<span class="built_in">pushdown</span>();</span><br><span class="line">    <span class="keyword">if</span>( k &lt;= o-&gt;key ) <span class="keyword">return</span> <span class="built_in">rank</span>(o-&gt;lson, k);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">rank</span>(o-&gt;rson, k) + o-&gt;lson-&gt;siz + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_NODES = <span class="number">100000</span>+<span class="number">10</span>;</span><br><span class="line">node* nodetop;</span><br><span class="line">node nodepool[MAX_NODES];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> root <span class="title">newnode</span><span class="params">(<span class="keyword">int</span> key=<span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    nodetop-&gt;key = key;</span><br><span class="line">    nodetop-&gt;siz = <span class="number">1</span>;</span><br><span class="line">    nodetop-&gt;addv = <span class="number">0</span>;</span><br><span class="line">    nodetop-&gt;lson = node:: null;</span><br><span class="line">    nodetop-&gt;rson = node:: null;</span><br><span class="line">    <span class="keyword">return</span> nodetop++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(root&amp; rt, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="built_in">rank</span>(rt, key);</span><br><span class="line">    <span class="built_in">splay</span>(rt, k);</span><br><span class="line">    root left = rt;</span><br><span class="line">    root middle = <span class="built_in">newnode</span>(key);</span><br><span class="line">    root right = rt-&gt;rson;</span><br><span class="line">    left-&gt;rson = middle;</span><br><span class="line">    middle-&gt;rson = right;</span><br><span class="line">    middle-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">    left-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">    rt = left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(root&amp; rt, <span class="keyword">int</span> M)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="built_in">rank</span>(rt, M);</span><br><span class="line">    <span class="keyword">if</span>( k == <span class="number">1</span> ) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">splay</span>(rt, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">splay</span>(rt-&gt;rson, k);</span><br><span class="line">    rt-&gt;rson-&gt;lson = node:: null;</span><br><span class="line">    rt-&gt;rson-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">    rt-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(root&amp; rt, <span class="keyword">int</span> addv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( rt-&gt;siz == <span class="number">2</span> ) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">splay</span>(rt, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">splay</span>(rt-&gt;rson, rt-&gt;rson-&gt;siz);</span><br><span class="line">    rt-&gt;rson-&gt;lson-&gt;<span class="built_in">update</span>(addv);</span><br><span class="line">    rt-&gt;rson-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">    rt-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">root rt;</span><br><span class="line"></span><br><span class="line">node* node:: null = <span class="keyword">new</span> <span class="built_in">node</span>();</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    node:: null-&gt;key = <span class="number">0</span>;</span><br><span class="line">    node:: null-&gt;siz = <span class="number">0</span>;</span><br><span class="line">    node:: null-&gt;addv = <span class="number">0</span>;</span><br><span class="line">    node:: null-&gt;lson = <span class="literal">NULL</span>;</span><br><span class="line">    node:: null-&gt;rson = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    nodetop = nodepool;</span><br><span class="line">    rt = <span class="built_in">newnode</span>(-INF);</span><br><span class="line">    rt-&gt;rson = <span class="built_in">newnode</span>(INF);</span><br><span class="line">    rt-&gt;<span class="built_in">maintain</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> positive = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(; c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>; c=<span class="built_in">getchar</span>())</span><br><span class="line">        <span class="keyword">if</span>( c == <span class="string">&#x27;-&#x27;</span> ) positive = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(; c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>; c=<span class="built_in">getchar</span>())</span><br><span class="line">        s = s*<span class="number">10</span> + c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> positive? s: -s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> N = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">int</span> M = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">char</span> cmd[<span class="number">20</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, cmd);</span><br><span class="line">        <span class="keyword">int</span> arg = <span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span>( cmd[<span class="number">0</span>] ) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;I&#x27;</span>: <span class="keyword">if</span>( arg &gt;= M ) <span class="built_in">insert</span>(rt, arg), ++tot; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>: <span class="built_in">update</span>(rt, arg); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;S&#x27;</span>: <span class="built_in">update</span>(rt, -arg); <span class="built_in">remove</span>(rt, M); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;F&#x27;</span>: <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, arg &lt;= rt-&gt;siz<span class="number">-2</span>? <span class="built_in">kth</span>(rt, rt-&gt;siz - arg): <span class="number">-1</span>); <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, tot - rt-&gt;siz);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">/*&#125;&#125;&#125;*/</span></span><br></pre></td></tr></table></figure></span><strong> update time: 2016/07/07 </strong><h1 id="汇总"><a href="#汇总" class="headerlink" title="汇总"></a>汇总</h1><table><thead><tr><th align="center">problems</th><th align="center">categories</th><th align="center">solution</th></tr></thead><tbody><tr><td align="center"><em><strong><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=3073">UVa/11922</a></strong></em></td><td align="center">基础题</td><td align="center"><em><strong><a href="#UVa-11922">Code</a></strong></em></td></tr><tr><td align="center"><em><strong><a href="https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=3147">UVa/11996</a></strong></em></td><td align="center">初级题</td><td align="center"><em><strong><a href="#UVa-11996">Code</a></strong></em></td></tr><tr><td align="center"><em><strong><a href="http://hihocoder.com/problemset/problem/1329">hihoCoder/1329</a></strong></em></td><td align="center">基础题</td><td align="center"><em><strong><a href="#hihoCoder-1329">Code</a></strong></em></td></tr><tr><td align="center"><em><strong><a href="http://hihocoder.com/problemset/problem/1333">hihoCoder/1333</a></strong></em></td><td align="center">初级题</td><td align="center"><em><strong><a href="#hihoCoder-1333">Code</a></strong></em></td></tr><tr><td align="center"><em><strong><a href="https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=1962">LA/3961</a></strong></em></td><td align="center">初级题</td><td align="center"><em><strong><a href="#LA-3961_1">Code1</a><em><strong>、</strong></em><a href="#LA-3961_2">Code2</a></strong></em></td></tr><tr><td align="center"><em><strong><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1269">HYSBZ/1269</a></strong></em></td><td align="center">经典题</td><td align="center"><em><strong><a href="#HYSBZ-1269">Code</a></strong></em></td></tr><tr><td align="center"><em><strong><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1500">HYSBZ/1500</a></strong></em></td><td align="center">经典题</td><td align="center"><em><strong><a href="#HYSBZ-1500">Code</a></strong></em></td></tr><tr><td align="center"><em><strong><a href="http://poj.org/problem?id=2828">POJ/2828</a></strong></em></td><td align="center">基础题</td><td align="center">***<a href="#POJ-2828_1">Code1</a>***、 <em><strong><a href="#POJ-2828_2">Code2</a></strong></em></td></tr><tr><td align="center"><em><strong><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1503">HYSBZ/1503</a></strong></em></td><td align="center">初级题</td><td align="center"><em><strong><a href="#HYSBZ-1503">Code</a></strong></em></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;UVa/11922 &lt;em&gt;&lt;a href=&quot;https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=3073&quot;&gt;Permutation Transformer&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;基础题。&lt;br&gt;&lt;span id=&quot;UVa-11922&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;/*&amp;#123;&amp;#123;&amp;#123;*/&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; std;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;node&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; key;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; siz;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; flip;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    node* lson;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    node* rson;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;node&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; key=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;): &lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt;(key), &lt;span class=&quot;built_in&quot;&gt;siz&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), &lt;span class=&quot;built_in&quot;&gt;flip&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), &lt;span class=&quot;built_in&quot;&gt;lson&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;), &lt;span class=&quot;built_in&quot;&gt;rson&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cmp&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; key)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cnt = lson-&amp;gt;siz + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( key == cnt ) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; key &amp;lt; cnt? &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pushdown&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( !flip ) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        lson-&amp;gt;flip ^= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        rson-&amp;gt;flip ^= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;swap&lt;/span&gt;(lson, rson);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        flip = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;maintain&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; siz = lson-&amp;gt;siz + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + rson-&amp;gt;siz; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; node* root;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; pair&amp;lt;node*, node*&amp;gt; droot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; MAX_NODES = &lt;span class=&quot;number&quot;&gt;100000&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node* null = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;node&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node nodepool[MAX_NODES];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node* nodetop;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; node* &lt;span class=&quot;title&quot;&gt;newnode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; key=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    nodetop-&amp;gt;key = key;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    nodetop-&amp;gt;siz = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    nodetop-&amp;gt;flip = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    nodetop-&amp;gt;lson = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    nodetop-&amp;gt;rson = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nodetop++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;zag&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(root&amp;amp; o)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    node* k = o-&amp;gt;rson;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    o-&amp;gt;rson = k-&amp;gt;lson;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    k-&amp;gt;lson = o;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    o = k;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;zig&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(root&amp;amp; o)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    node* k = o-&amp;gt;lson;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    o-&amp;gt;lson = k-&amp;gt;rson;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    k-&amp;gt;rson = o;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    o = k;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(root&amp;amp; o, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; d)&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    d? &lt;span class=&quot;built_in&quot;&gt;zig&lt;/span&gt;(o): &lt;span class=&quot;built_in&quot;&gt;zag&lt;/span&gt;(o);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    d? o-&amp;gt;rson-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;maintain&lt;/span&gt;(): o-&amp;gt;lson-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;maintain&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    o-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;maintain&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;splay&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(root&amp;amp; o, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    o-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;pushdown&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; d = o-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;cmp&lt;/span&gt;(k);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( d == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ) k -= o-&amp;gt;lson-&amp;gt;siz + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( d != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        root&amp;amp; p = d? o-&amp;gt;rson: o-&amp;gt;lson;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        p-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;pushdown&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; d2 = p-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;cmp&lt;/span&gt;(k);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( d2 == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ) k -= p-&amp;gt;lson-&amp;gt;siz + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( d2 != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;splay&lt;/span&gt;((d2? p-&amp;gt;rson: p-&amp;gt;lson), k);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( d == d2 ) &lt;span class=&quot;built_in&quot;&gt;rotate&lt;/span&gt;(o, d^&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;rotate&lt;/span&gt;(p, d);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;rotate&lt;/span&gt;(o, d^&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(root o, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k, root&amp;amp; left, root&amp;amp; right)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;splay&lt;/span&gt;(o, k);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    left = o;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    right = o-&amp;gt;rson;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    o-&amp;gt;rson = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    o-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;maintain&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; root &lt;span class=&quot;title&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(root left, root right)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;splay&lt;/span&gt;(left, left-&amp;gt;siz);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    left-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;pushdown&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    left-&amp;gt;rson = right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    left-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;maintain&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(root&amp;amp; o, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; lft, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; rht)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; mid = (lft+rht) &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    o = &lt;span class=&quot;built_in&quot;&gt;newnode&lt;/span&gt;(mid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( lft &amp;lt; mid ) &lt;span class=&quot;built_in&quot;&gt;build&lt;/span&gt;(o-&amp;gt;lson, lft, mid&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( mid &amp;lt; rht ) &lt;span class=&quot;built_in&quot;&gt;build&lt;/span&gt;(o-&amp;gt;rson, mid+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, rht);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    o-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;maintain&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(root&amp;amp; o)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( o == null ) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    o-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;pushdown&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( o-&amp;gt;lson != null ) &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(o-&amp;gt;lson);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( o-&amp;gt;key ) &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;%d\n&amp;quot;&lt;/span&gt;, o-&amp;gt;key);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( o-&amp;gt;rson != null ) &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(o-&amp;gt;rson);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root rt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; N)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    nodetop = nodepool;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;build&lt;/span&gt;(rt, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, N);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; N, Q;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;( &lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;%d%d&amp;quot;&lt;/span&gt;, &amp;amp;N, &amp;amp;Q) == &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;init&lt;/span&gt;(N);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;( Q-- ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; lft, rht;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            root o, left, middle, right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;%d%d&amp;quot;&lt;/span&gt;, &amp;amp;lft, &amp;amp;rht);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;split&lt;/span&gt;(rt, lft, left, o);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;split&lt;/span&gt;(o, rht-lft+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, middle, right);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            middle-&amp;gt;flip ^= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            rt=&lt;span class=&quot;built_in&quot;&gt;merge&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;merge&lt;/span&gt;(left, right), middle);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(rt);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;comment&quot;&gt;/*&amp;#125;&amp;#125;&amp;#125;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/span&gt;

&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;UVa/11996 &lt;em&gt;&lt;a href=&quot;https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=3147&quot;&gt;Jewel Magic&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;用 hash 求 LCP，仅需用 splay 维护 hash 值即可。考虑到用反转操作，每个节点需要维护正反两个 hash 值。&lt;br&gt;&lt;span id=&quot;UVa-11996&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;189&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;190&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;191&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;193&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;194&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;195&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;196&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;197&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;198&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;199&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;200&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;201&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;202&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;203&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;204&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;/*&amp;#123;&amp;#123;&amp;#123;*/&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; std;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; ULL;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; MAXN = &lt;span class=&quot;number&quot;&gt;400000&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; hashkey = &lt;span class=&quot;number&quot;&gt;137&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ULL xp[MAXN];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;node&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; key;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; siz;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ULL val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ULL reval;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; flip;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    node* lson;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    node* rson;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cmp&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; cnt = lson-&amp;gt;siz + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( x == cnt ) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x &amp;lt; cnt? &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        flip ^= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;swap&lt;/span&gt;(lson, rson);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;swap&lt;/span&gt;(val, reval);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pushdown&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( !flip ) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        lson-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;reverse&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        rson-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;reverse&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        flip = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;maintain&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        siz = lson-&amp;gt;siz + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + rson-&amp;gt;siz;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        val = lson-&amp;gt;val + key*xp[lson-&amp;gt;siz] + rson-&amp;gt;val*xp[lson-&amp;gt;siz+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        reval = rson-&amp;gt;reval + key*xp[rson-&amp;gt;siz] + lson-&amp;gt;reval*xp[rson-&amp;gt;siz+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; node* root;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; pair&amp;lt;node*, node*&amp;gt; droot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; MAX_NODES = &lt;span class=&quot;number&quot;&gt;400000&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node* null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node* nodetop;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node nodepool[MAX_NODES];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; root &lt;span class=&quot;title&quot;&gt;newnode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; key=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    nodetop-&amp;gt;key = key;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    nodetop-&amp;gt;siz = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    nodetop-&amp;gt;val = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    nodetop-&amp;gt;reval = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    nodetop-&amp;gt;flip = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    nodetop-&amp;gt;lson = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    nodetop-&amp;gt;rson = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nodetop++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;zag&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(root&amp;amp; rt)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    root k = rt-&amp;gt;rson;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rt-&amp;gt;rson = k-&amp;gt;lson;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    k-&amp;gt;lson = rt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rt = k;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;zig&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(root&amp;amp; rt)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    root k = rt-&amp;gt;lson;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rt-&amp;gt;lson = k-&amp;gt;rson;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    k-&amp;gt;rson = rt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rt = k;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(root&amp;amp; rt, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; d)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    d? &lt;span class=&quot;built_in&quot;&gt;zig&lt;/span&gt;(rt): &lt;span class=&quot;built_in&quot;&gt;zag&lt;/span&gt;(rt);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    d? rt-&amp;gt;rson-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;maintain&lt;/span&gt;(): rt-&amp;gt;lson-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;maintain&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rt-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;maintain&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;splay&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(root&amp;amp; rt, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rt-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;pushdown&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; d = rt-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;cmp&lt;/span&gt;(k);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( d == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ) k -= rt-&amp;gt;lson-&amp;gt;siz+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( d != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        root&amp;amp; pt = d? rt-&amp;gt;rson: rt-&amp;gt;lson;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pt-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;pushdown&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; d2 = pt-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;cmp&lt;/span&gt;(k);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( d2 == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ) k -= pt-&amp;gt;lson-&amp;gt;siz+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( d2 != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;splay&lt;/span&gt;((d2? pt-&amp;gt;rson: pt-&amp;gt;lson), k);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( d == d2 ) &lt;span class=&quot;built_in&quot;&gt;rotate&lt;/span&gt;(rt, d^&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;rotate&lt;/span&gt;(pt, d);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;rotate&lt;/span&gt;(rt, d^&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(root rt, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k, root&amp;amp; left, root&amp;amp; right)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;splay&lt;/span&gt;(rt, k);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    left = rt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    right = rt-&amp;gt;rson;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rt-&amp;gt;rson = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rt-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;maintain&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; root &lt;span class=&quot;title&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(root left, root right)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;splay&lt;/span&gt;(left, left-&amp;gt;siz);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    left-&amp;gt;rson = right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    left-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;maintain&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* insert at (k+1)th position. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(root&amp;amp; rt, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; key)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    root left, right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    root middle = &lt;span class=&quot;built_in&quot;&gt;newnode&lt;/span&gt;(key);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;split&lt;/span&gt;(rt, k, left, right);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rt = &lt;span class=&quot;built_in&quot;&gt;merge&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;merge&lt;/span&gt;(left, middle), right);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* remove at (k+1)th position. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(root&amp;amp; rt, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    root left, middle, right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;split&lt;/span&gt;(rt, k, left, right);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;split&lt;/span&gt;(right, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, middle, right);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rt = &lt;span class=&quot;built_in&quot;&gt;merge&lt;/span&gt;(left, right);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* modify [lft+1, rht+1]. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(root&amp;amp; rt, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; lft, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; rht)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;splay&lt;/span&gt;(rt, lft);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;splay&lt;/span&gt;(rt-&amp;gt;rson, rht-lft+&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rt-&amp;gt;rson-&amp;gt;lson-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;reverse&lt;/span&gt;(); &lt;span class=&quot;comment&quot;&gt;/* update rt-&amp;gt;rson-&amp;gt;lson, rt-&amp;gt;rson, rt */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rt-&amp;gt;rson-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;maintain&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rt-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;maintain&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(root&amp;amp; rt, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; p1, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; p2)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; lft = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, rht = rt-&amp;gt;siz - p2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;( lft &amp;lt; rht ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; mid = (lft+rht) &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;splay&lt;/span&gt;(rt, p1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;splay&lt;/span&gt;(rt-&amp;gt;rson, mid+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ULL val1 = rt-&amp;gt;rson-&amp;gt;lson-&amp;gt;val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;splay&lt;/span&gt;(rt, p2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;splay&lt;/span&gt;(rt-&amp;gt;rson, mid+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ULL val2 = rt-&amp;gt;rson-&amp;gt;lson-&amp;gt;val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( val1 == val2 ) lft = mid+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; rht = mid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; lft&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root rt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; s[MAXN];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; N, Q, op, arg1, arg2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(root&amp;amp; rt, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; lft, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; rht)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; mid = (lft+rht) &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rt = &lt;span class=&quot;built_in&quot;&gt;newnode&lt;/span&gt;(s[mid]-&lt;span class=&quot;string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( lft &amp;lt; mid ) &lt;span class=&quot;built_in&quot;&gt;build&lt;/span&gt;(rt-&amp;gt;lson, lft, mid&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( mid &amp;lt; rht ) &lt;span class=&quot;built_in&quot;&gt;build&lt;/span&gt;(rt-&amp;gt;rson, mid+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, rht);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rt-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;maintain&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Init&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    nodetop = nodepool;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;%s&amp;quot;&lt;/span&gt;, s+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    s[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = s[N+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;build&lt;/span&gt;(rt, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, N+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; c = &lt;span class=&quot;built_in&quot;&gt;getchar&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; s = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(; c &amp;lt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt; || c &amp;gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;9&amp;#x27;&lt;/span&gt;; c=&lt;span class=&quot;built_in&quot;&gt;getchar&lt;/span&gt;());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(; c &amp;gt;= &lt;span class=&quot;string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt; &amp;amp;&amp;amp; c &amp;lt;= &lt;span class=&quot;string&quot;&gt;&amp;#x27;9&amp;#x27;&lt;/span&gt;; c=&lt;span class=&quot;built_in&quot;&gt;getchar&lt;/span&gt;())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        s = s*&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; + c-&lt;span class=&quot;string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    null = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;node&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(null, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;&lt;/span&gt;(node));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    xp[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt; MAXN; ++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        xp[i] = xp[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;] * hashkey;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;( &lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;%d%d&amp;quot;&lt;/span&gt;, &amp;amp;N, &amp;amp;Q) == &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;Init&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;( Q-- ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            op = &lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            arg1 = &lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( op != &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; ) arg2 = &lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt;&lt;/span&gt;( op ) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;insert&lt;/span&gt;(rt, arg1+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, arg2); &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;remove&lt;/span&gt;(rt, arg1); &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;update&lt;/span&gt;(rt, arg1, arg2); &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;%d\n&amp;quot;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;query&lt;/span&gt;(rt, arg1, arg2)); &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;comment&quot;&gt;/*&amp;#125;&amp;#125;&amp;#125;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/span&gt;</summary>
    
    
    
    
    <category term="ACM" scheme="http://littleclown.github.io/tags/ACM/"/>
    
    <category term="解题报告" scheme="http://littleclown.github.io/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
    <category term="专题训练" scheme="http://littleclown.github.io/tags/%E4%B8%93%E9%A2%98%E8%AE%AD%E7%BB%83/"/>
    
    <category term="Splay" scheme="http://littleclown.github.io/tags/Splay/"/>
    
  </entry>
  
  <entry>
    <title>最佳文章</title>
    <link href="http://littleclown.github.io/acm/oj/ccf/2015/09/5/"/>
    <id>http://littleclown.github.io/acm/oj/ccf/2015/09/5/</id>
    <published>2016-06-26T11:32:55.000Z</published>
    <updated>2019-01-03T02:22:28.237Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong><a href="http://115.28.138.223/view.page?gpid=T28">题目链接</a></strong></em></p><h1 id="问题简述"><a href="#问题简述" class="headerlink" title="问题简述"></a>问题简述</h1><p>有 $N$ 个由小写字母构成的单词。<br>一个串的权值为这个串中每个单词出现的次数的总和（单词可部分重叠）。<br>求一个长度为 $L$ 串的最大权值。</p><p>数据范围：$N$ 个单词长度总和不超过 100，$1\leqslant L\leqslant 10^{15}$。</p><span id="more"></span><p>样例输入：</p><pre><code>3 15agvaagvagvagvagva</code></pre><p>样例输出：</p><pre><code>11</code></pre><h1 id="问题简析"><a href="#问题简析" class="headerlink" title="问题简析"></a>问题简析</h1><p>先将 $N$ 个串建成 Aho-Corasick 自动机，并记 $S$ 为此自动机的状态转移图的节点集。<br>用 $dp[i][s]$ 表示长度为 $i$ 且最后一个字符在 Aho-Corasick 自动机的节点 s 上的串的最大权值。<br>显然，答案为 $\max\big\lbrace dp[L][s] <del>\big|</del> s\in S \big\rbrace$。<br>状态转移：$dp[i+1][s’]=\max\big\lbrace dp[i][s] <del>\big|</del> s\in S \text{且存在从 $s$ 到 $s’$ 的边}\big\rbrace +val[s’]$。<br>其中，$val[s’]$ 为以该节点结尾的单词的个数（经典的 AC 自动机基础操作，应该懂我在说什么吧。。）</p><p>样例的状态图如下<br><em><strong><img src="/acm/oj/ccf/2015/09/5/Aho-Corasick1.png" class="" title="图1"></strong></em></p><p>其中，虚线为 fail 指针。<br>上图中，$val[4]=1, val[7]=3,val[13]=2$，其它节点 $val$ 值为 0。<br>不难发现，仅考虑有实线的边的转移是最优的；当没有实线的边时，选择虚线的边转移。</p><p>接下来就是重头戏了。<br>我们可以构造一个 $\big|S\big| \times \big|S\big| =14 \times 14$ 的矩阵 $M$<br>\begin{align}<br>  M[s’][s] = \left\lbrace \begin{aligned}<br>  &amp;val[s’], &amp;\text{存在一条边} s \rightarrow s’ \<br>  &amp;-INF, &amp;\text{不存在一条边} s \rightarrow s’<br>  \end{aligned} \right.<br>\end{align}<br>结合前面的状态转移方程有：$dp[i+1][s’]=\max\big\lbrace dp[i][s]+M[s’][s] \big\rbrace$。<br>可以将 $dp[i]$ 当做一个列向量，那么 $dp[i+1]$ 可以看做由 $M$ 和 $dp[i]$ 进行如转移方程所示的运算规则得到。<br>对比传统的矩阵乘法，相当于：$\sum$ 变成了 $\max$，同时 $\times$ 变成了 $+$。<br>不难验证，新的矩阵运算同样是左结合的，这意味着：$dp[L]=M<del>{\color{red}{op}}</del>dp[L-1]=M^{L}<del>{\color{red}{op}}</del>dp[0]$。<br>接下来，矩阵“快速幂”就好了。</p><p>还有一个问题，$dp[0]$ 是什么？<br>因为零个字符，只能在状态 0，其它状态必须设为负无穷，即：<br>\begin{align}<br>  dp[0][i] = \left\lbrace \begin{aligned}<br>  &amp;0, &amp;i=0 \<br>  &amp;-INF, &amp;i \neq 0<br>  \end{aligned} \right.<br>\end{align}<br>可以通过 $dp[1]=M<del>{\color{red}{op}}</del>dp[0]$ 来验证。</p><h1 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> LL  LNF = <span class="number">0x3f3f3f3f3f3f3f3f</span>LL;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">100</span>+<span class="number">10</span>;</span><br><span class="line">    LL M[MAXN][MAXN];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fill</span><span class="params">(LL val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; MAXN; ++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j &lt; MAXN; ++j)</span><br><span class="line">                M[i][j] = val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Matrix <span class="keyword">operator</span> * (<span class="keyword">const</span> Matrix&amp; A, <span class="keyword">const</span> Matrix&amp; B) &#123;</span><br><span class="line">        Matrix C;</span><br><span class="line">        C.<span class="built_in">fill</span>(-LNF);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; MAXN; ++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j &lt; MAXN; ++j)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k &lt; MAXN; ++k)</span><br><span class="line">                    C.M[i][j] = <span class="built_in">max</span>(C.M[i][j], A.M[i][k]+B.M[k][j]);</span><br><span class="line">        <span class="keyword">return</span> C;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> Matrix <span class="title">Power</span><span class="params">(Matrix A, LL X)</span> </span>&#123;</span><br><span class="line">        Matrix ans;</span><br><span class="line">        ans.<span class="built_in">fill</span>(-LNF);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; MAXN; ++i) ans.M[i][i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(; X &gt; <span class="number">0</span>; X&gt;&gt;=<span class="number">1</span>, A=A*A)</span><br><span class="line">            <span class="keyword">if</span>( X&amp;<span class="number">1</span> ) ans = ans*A;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> N=MAXN)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; N; ++i) <span class="built_in">printf</span>(<span class="string">&quot;%6d &quot;</span>, i);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n------------------------------------------------------------------------------------------------------\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%2d:|&quot;</span>, i);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j &lt; N; ++j)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%6d|&quot;</span>, M[i][j]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;------------------------------------------------------------------------------------------------------\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AhoCorasick</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> SIGMA_SIZ = <span class="number">26</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MAX_NODES = <span class="number">100</span>+<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> ch[MAX_NODES][SIGMA_SIZ];</span><br><span class="line">    <span class="keyword">int</span> val[MAX_NODES];</span><br><span class="line">    <span class="keyword">int</span> fail[MAX_NODES];</span><br><span class="line">    <span class="keyword">int</span> siz;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        siz = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">memset</span>(ch[<span class="number">0</span>], <span class="number">0</span>, <span class="keyword">sizeof</span> ch[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">idx</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> c)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(; *s; ++s) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = <span class="built_in">idx</span>(*s);</span><br><span class="line">            <span class="keyword">if</span>( !ch[r][c] ) &#123;</span><br><span class="line">                <span class="built_in">memset</span>(ch[siz], <span class="number">0</span>, <span class="keyword">sizeof</span> ch[siz]);</span><br><span class="line">                val[siz] = <span class="number">0</span>;</span><br><span class="line">                ch[r][c] = siz++;</span><br><span class="line">            &#125;</span><br><span class="line">            r = ch[r][c];</span><br><span class="line">        &#125;</span><br><span class="line">        ++val[r];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">GetFail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> queue&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> c=<span class="number">0</span>; c &lt; SIGMA_SIZ; ++c) &#123;</span><br><span class="line">            <span class="keyword">int</span> o = ch[<span class="number">0</span>][c];</span><br><span class="line">            <span class="keyword">if</span>( o ) fail[o] = <span class="number">0</span>, Q.<span class="built_in">push</span>(o);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>( !Q.<span class="built_in">empty</span>() ) &#123;</span><br><span class="line">            <span class="keyword">int</span> r = Q.<span class="built_in">front</span>(); Q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> c=<span class="number">0</span>; c &lt; SIGMA_SIZ; ++c) &#123;</span><br><span class="line">                <span class="keyword">int</span> o = ch[r][c];</span><br><span class="line">                <span class="keyword">if</span>( o ) &#123;</span><br><span class="line">                    <span class="keyword">int</span> fo = fail[r];</span><br><span class="line">                    <span class="keyword">for</span>(; fo &amp;&amp; !ch[fo][c]; fo=fail[fo]);</span><br><span class="line">                    fail[o] = ch[fo][c];</span><br><span class="line">                    val[o] += val[fail[o]];</span><br><span class="line">                    Q.<span class="built_in">push</span>(o);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ch[r][c] = ch[fail[r]][c];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">BuildMatrix</span><span class="params">(Matrix&amp; mat)</span> </span>&#123;</span><br><span class="line">        mat.<span class="built_in">fill</span>(-LNF);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> r=<span class="number">0</span>; r &lt; siz; ++r) </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> c=<span class="number">0</span>; c &lt; SIGMA_SIZ; ++c) </span><br><span class="line">                mat.M[ch[r][c]][r] = val[ch[r][c]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Matrix mat;</span><br><span class="line">AhoCorasick ac;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line">LL M;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">200</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ac.<span class="built_in">Init</span>();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%lld&quot;</span>, &amp;N, &amp;M);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">        ac.<span class="built_in">Insert</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">    ac.<span class="built_in">GetFail</span>();</span><br><span class="line">    ac.<span class="built_in">BuildMatrix</span>(mat);</span><br><span class="line"><span class="comment">//    for(int i=0; i &lt; ac.siz; ++i) printf(&quot;%d, fail[%d]=%d\n&quot;, i, i, ac.fail[i]);</span></span><br><span class="line"><span class="comment">//    mat.show(ac.siz);</span></span><br><span class="line">    mat = Matrix:: <span class="built_in">Power</span>(mat, M);</span><br><span class="line">    LL ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; Matrix:: MAXN; ++i) </span><br><span class="line">            ans = <span class="built_in">max</span>(ans, mat.M[i][<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;a href=&quot;http://115.28.138.223/view.page?gpid=T28&quot;&gt;题目链接&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&quot;问题简述&quot;&gt;&lt;a href=&quot;#问题简述&quot; class=&quot;headerlink&quot; title=&quot;问题简述&quot;&gt;&lt;/a&gt;问题简述&lt;/h1&gt;&lt;p&gt;有 $N$ 个由小写字母构成的单词。&lt;br&gt;一个串的权值为这个串中每个单词出现的次数的总和（单词可部分重叠）。&lt;br&gt;求一个长度为 $L$ 串的最大权值。&lt;/p&gt;
&lt;p&gt;数据范围：$N$ 个单词长度总和不超过 100，$1\leqslant L\leqslant 10^{15}$。&lt;/p&gt;</summary>
    
    
    
    
    <category term="动态规划" scheme="http://littleclown.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="ACM" scheme="http://littleclown.github.io/tags/ACM/"/>
    
    <category term="解题报告" scheme="http://littleclown.github.io/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
    <category term="Aho-Corasick 自动机" scheme="http://littleclown.github.io/tags/Aho-Corasick-%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
    <category term="矩阵快速幂变形" scheme="http://littleclown.github.io/tags/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82%E5%8F%98%E5%BD%A2/"/>
    
  </entry>
  
  <entry>
    <title>编译原理-语法制导翻译实现计算器</title>
    <link href="http://littleclown.github.io/study/computer/fundamentals-of-compiling/exercise/"/>
    <id>http://littleclown.github.io/study/computer/fundamentals-of-compiling/exercise/</id>
    <published>2016-06-23T09:38:27.000Z</published>
    <updated>2019-01-03T02:22:28.644Z</updated>
    
    <content type="html"><![CDATA[<h1 id="任务描述"><a href="#任务描述" class="headerlink" title="任务描述"></a>任务描述</h1><p>设计一个文法，匹配合法的计算式，并返回正确计算式的结果。</p><h1 id="文法"><a href="#文法" class="headerlink" title="文法"></a>文法</h1><p>\begin{align}<br>&amp;A \rightarrow BC \<br>&amp;C \rightarrow +BC \mid -BC \mid \varepsilon \<br>&amp;B \rightarrow DE \<br>&amp;E \rightarrow *DE \mid /DE \mid \varepsilon \<br>&amp;D \rightarrow digit \mid (A) \<br>\end{align}</p><span id="more"></span><p>\begin{align}<br>FIRST(A) = \Big\lbrace digit,( \Big\rbrace &amp;\quad FOLLOW(A) = \Big\lbrace $,) \Big\rbrace\<br>FIRST(B) = \Big\lbrace digit,( \Big\rbrace &amp;\quad FOLLOW(B) = \Big\lbrace $,),+,- \Big\rbrace\<br>FIRST(C) = \Big\lbrace +,-,\varepsilon \Big\rbrace &amp;\quad FOLLOW(C) = \Big\lbrace $,) \Big\rbrace\<br>FIRST(D) = \Big\lbrace digit,( \Big\rbrace &amp;\quad FOLLOW(D) = \Big\lbrace $,),*,/,+,- \Big\rbrace\<br>FIRST(E) = \Big\lbrace *,/,\varepsilon \Big\rbrace &amp;\quad FOLLOW(E) = \Big\lbrace $,),+,- \Big\rbrace\<br>\end{align}</p><h1 id="LL-1-预测分析表"><a href="#LL-1-预测分析表" class="headerlink" title="LL(1) 预测分析表"></a>LL(1) 预测分析表</h1><table><thead><tr><th align="center">$ $</th><th align="center">digit</th><th align="center">(</th><th align="center">)</th><th align="center">+</th><th align="center">-</th><th align="center">*</th><th align="center">/</th><th align="right">$</th></tr></thead><tbody><tr><td align="center">A</td><td align="center">$A \rightarrow BC$</td><td align="center">$A \rightarrow BC$</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="right"></td></tr><tr><td align="center">B</td><td align="center">$B \rightarrow DE$</td><td align="center">$B \rightarrow DE$</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="right"></td></tr><tr><td align="center">C</td><td align="center"></td><td align="center"></td><td align="center">$C \rightarrow \varepsilon$</td><td align="center">$C \rightarrow +BC$</td><td align="center">$C \rightarrow -BC$</td><td align="center"></td><td align="center"></td><td align="right">$C \rightarrow \varepsilon$</td></tr><tr><td align="center">D</td><td align="center">$D \rightarrow digit$</td><td align="center">$D \rightarrow (A)$</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="right"></td></tr><tr><td align="center">E</td><td align="center"></td><td align="center"></td><td align="center">$E \rightarrow \varepsilon$</td><td align="center">$E \rightarrow \varepsilon$</td><td align="center">$E \rightarrow \varepsilon$</td><td align="center">$E \rightarrow *DE$</td><td align="center">$E \rightarrow /DE$</td><td align="right">$E \rightarrow \varepsilon$</td></tr></tbody></table><h1 id="SDD"><a href="#SDD" class="headerlink" title="SDD"></a>SDD</h1><table><thead><tr><th align="left">$ $</th><th align="center">产生式</th><th align="center">语义规则</th></tr></thead><tbody><tr><td align="left">0)</td><td align="center">$A \rightarrow BC$</td><td align="center">\begin{align} &amp;C.inh=B.syn \\ &amp;A.syn = C.syn \end{align}</td></tr><tr><td align="left">1)</td><td align="center">$C \rightarrow +BC_1$</td><td align="center">\begin{align} &amp;C_1.inh=C.inh + B.syn \\ &amp;C.syn=C_1.syn \end{align}</td></tr><tr><td align="left">2)</td><td align="center">$C \rightarrow -BC_1$</td><td align="center">\begin{align} &amp;C_1.inh=C.inh-B.syn \\ &amp;C.syn=C_1.syn \end{align}</td></tr><tr><td align="left">3)</td><td align="center">$C \rightarrow \varepsilon$</td><td align="center">\begin{align} C.syn=C.inh \end{align}</td></tr><tr><td align="left">4)</td><td align="center">$B \rightarrow DE$</td><td align="center">\begin{align} &amp;E.inh=D.syn \\ &amp; B.syn=E.syn \end{align}</td></tr><tr><td align="left">5)</td><td align="center">$E \rightarrow *DE_1$</td><td align="center">\begin{align} &amp;E_1.inh=E.inh \times D.syn \\ &amp;E.syn=E_1.syn \end{align}</td></tr><tr><td align="left">6)</td><td align="center">$E \rightarrow /DE_1$</td><td align="center">\begin{align} &amp;E_1.inh=E.inh / D.syn \\ &amp; E.syn=E_1.syn \end{align}</td></tr><tr><td align="left">7)</td><td align="center">$E \rightarrow \varepsilon$</td><td align="center">\begin{align} &amp;E.syn=E.inh \end{align}</td></tr><tr><td align="left">8)</td><td align="center">$D \rightarrow digit$</td><td align="center">\begin{align} &amp;D.syn = digit.lexval \end{align}</td></tr><tr><td align="left">9)</td><td align="center">$D \rightarrow (A)$</td><td align="center">\begin{align} &amp;D.syn = A.syn \end{align*}</td></tr></tbody></table><h1 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;exception&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> id, syn, inh;</span><br><span class="line">    <span class="built_in">node</span>(<span class="keyword">int</span> id=<span class="number">0</span>, <span class="keyword">int</span> syn=<span class="number">0</span>, <span class="keyword">int</span> inh=<span class="number">0</span>): <span class="built_in">id</span>(id), <span class="built_in">syn</span>(syn), <span class="built_in">inh</span>(inh) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">char</span> key[<span class="number">128</span>];</span><br><span class="line"><span class="keyword">int</span> M[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">idx</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> key[c];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">initid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(key, <span class="number">0</span>, <span class="keyword">sizeof</span> key);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="string">&#x27;0&#x27;</span>; k &lt;= <span class="string">&#x27;9&#x27;</span>; ++k) key[k] = <span class="number">1</span>;</span><br><span class="line">    key[<span class="string">&#x27;(&#x27;</span>] = <span class="number">2</span>;</span><br><span class="line">    key[<span class="string">&#x27;)&#x27;</span>] = <span class="number">3</span>;</span><br><span class="line">    key[<span class="string">&#x27;+&#x27;</span>] = <span class="number">4</span>;</span><br><span class="line">    key[<span class="string">&#x27;-&#x27;</span>] = <span class="number">5</span>;</span><br><span class="line">    key[<span class="string">&#x27;*&#x27;</span>] = <span class="number">6</span>;</span><br><span class="line">    key[<span class="string">&#x27;/&#x27;</span>] = <span class="number">7</span>;</span><br><span class="line">    key[<span class="string">&#x27;$&#x27;</span>] = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    key[<span class="string">&#x27;A&#x27;</span>] = <span class="number">-1</span>;</span><br><span class="line">    key[<span class="string">&#x27;B&#x27;</span>] = <span class="number">-2</span>;</span><br><span class="line">    key[<span class="string">&#x27;C&#x27;</span>] = <span class="number">-3</span>;</span><br><span class="line">    key[<span class="string">&#x27;D&#x27;</span>] = <span class="number">-4</span>;</span><br><span class="line">    key[<span class="string">&#x27;E&#x27;</span>] = <span class="number">-5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">inittable</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) v[i].<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">    v[<span class="number">0</span>].<span class="built_in">pb</span>(<span class="built_in">idx</span>(<span class="string">&#x27;B&#x27;</span>)); v[<span class="number">0</span>].<span class="built_in">pb</span>(<span class="built_in">idx</span>(<span class="string">&#x27;C&#x27;</span>)); <span class="comment">// A --&gt; BC</span></span><br><span class="line">    v[<span class="number">1</span>].<span class="built_in">pb</span>(<span class="built_in">idx</span>(<span class="string">&#x27;+&#x27;</span>)); v[<span class="number">1</span>].<span class="built_in">pb</span>(<span class="built_in">idx</span>(<span class="string">&#x27;B&#x27;</span>)); v[<span class="number">1</span>].<span class="built_in">pb</span>(<span class="built_in">idx</span>(<span class="string">&#x27;C&#x27;</span>)); <span class="comment">// C --&gt; +BC</span></span><br><span class="line">    v[<span class="number">2</span>].<span class="built_in">pb</span>(<span class="built_in">idx</span>(<span class="string">&#x27;-&#x27;</span>)); v[<span class="number">2</span>].<span class="built_in">pb</span>(<span class="built_in">idx</span>(<span class="string">&#x27;B&#x27;</span>)); v[<span class="number">2</span>].<span class="built_in">pb</span>(<span class="built_in">idx</span>(<span class="string">&#x27;C&#x27;</span>)); <span class="comment">// C --&gt; -BC</span></span><br><span class="line">    <span class="comment">// C --&gt; \varepsilon</span></span><br><span class="line">    v[<span class="number">4</span>].<span class="built_in">pb</span>(<span class="built_in">idx</span>(<span class="string">&#x27;D&#x27;</span>)); v[<span class="number">4</span>].<span class="built_in">pb</span>(<span class="built_in">idx</span>(<span class="string">&#x27;E&#x27;</span>)); <span class="comment">// B --&gt; DE</span></span><br><span class="line">    v[<span class="number">5</span>].<span class="built_in">pb</span>(<span class="built_in">idx</span>(<span class="string">&#x27;*&#x27;</span>)); v[<span class="number">5</span>].<span class="built_in">pb</span>(<span class="built_in">idx</span>(<span class="string">&#x27;D&#x27;</span>)); v[<span class="number">5</span>].<span class="built_in">pb</span>(<span class="built_in">idx</span>(<span class="string">&#x27;E&#x27;</span>)); <span class="comment">// E --&gt; *DE</span></span><br><span class="line">    v[<span class="number">6</span>].<span class="built_in">pb</span>(<span class="built_in">idx</span>(<span class="string">&#x27;/&#x27;</span>)); v[<span class="number">6</span>].<span class="built_in">pb</span>(<span class="built_in">idx</span>(<span class="string">&#x27;D&#x27;</span>)); v[<span class="number">6</span>].<span class="built_in">pb</span>(<span class="built_in">idx</span>(<span class="string">&#x27;E&#x27;</span>)); <span class="comment">// E --&gt; /DE</span></span><br><span class="line">    <span class="comment">// E --&gt; \varepsilon</span></span><br><span class="line">    v[<span class="number">8</span>].<span class="built_in">pb</span>(<span class="built_in">idx</span>(<span class="string">&#x27;0&#x27;</span>)); <span class="comment">// D --&gt; digit</span></span><br><span class="line">    v[<span class="number">9</span>].<span class="built_in">pb</span>(<span class="built_in">idx</span>(<span class="string">&#x27;(&#x27;</span>)); v[<span class="number">9</span>].<span class="built_in">pb</span>(<span class="built_in">idx</span>(<span class="string">&#x27;A&#x27;</span>)); v[<span class="number">9</span>].<span class="built_in">pb</span>(<span class="built_in">idx</span>(<span class="string">&#x27;)&#x27;</span>)); <span class="comment">// D --&gt; (A)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    for(int i=0; i &lt; 10; ++i) reverse(v[i].begin(), v[i].end());</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> pb</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(M, <span class="number">-1</span>, <span class="keyword">sizeof</span> M);</span><br><span class="line">    M[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>; M[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    M[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">4</span>; M[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">4</span>;</span><br><span class="line">    M[<span class="number">3</span>][<span class="number">3</span>] = <span class="number">3</span>; M[<span class="number">3</span>][<span class="number">4</span>] = <span class="number">1</span>; M[<span class="number">3</span>][<span class="number">5</span>] = <span class="number">2</span>; M[<span class="number">3</span>][<span class="number">8</span>] = <span class="number">3</span>;</span><br><span class="line">    M[<span class="number">4</span>][<span class="number">1</span>] = <span class="number">8</span>; M[<span class="number">4</span>][<span class="number">2</span>] = <span class="number">9</span>; </span><br><span class="line">    M[<span class="number">5</span>][<span class="number">3</span>] = <span class="number">7</span>; M[<span class="number">5</span>][<span class="number">4</span>] = <span class="number">7</span>; M[<span class="number">5</span>][<span class="number">5</span>] = <span class="number">7</span>; M[<span class="number">5</span>][<span class="number">6</span>] = <span class="number">5</span>; M[<span class="number">5</span>][<span class="number">7</span>] = <span class="number">6</span>; M[<span class="number">5</span>][<span class="number">8</span>] = <span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getnum</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>*&amp; s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(; <span class="built_in">isdigit</span>(*s); ++s)</span><br><span class="line">        num = num*<span class="number">10</span> + *s-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> endsym = <span class="built_in">idx</span>(<span class="string">&#x27;$&#x27;</span>);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* &amp;s, node&amp; sy, <span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id = <span class="built_in">idx</span>(*s);</span><br><span class="line">    <span class="keyword">if</span>( !id ) <span class="keyword">throw</span> <span class="string">&quot;不识别的符号&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( sy.id != endsym ) &#123;</span><br><span class="line">        <span class="keyword">if</span>( sy.id == id ) &#123;</span><br><span class="line">            <span class="keyword">if</span>( id == <span class="number">1</span> ) &#123;</span><br><span class="line">                sy.syn = <span class="built_in">getnum</span>(s);</span><br><span class="line">            &#125; <span class="keyword">else</span> ++s;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">if</span>( sy.id &gt; <span class="number">0</span> ) <span class="keyword">throw</span> <span class="string">&quot;error!&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> Mid = M[-sy.id][id];</span><br><span class="line">        <span class="keyword">if</span>( Mid &lt; <span class="number">0</span> ) <span class="keyword">throw</span> <span class="string">&quot;error!&quot;</span>;</span><br><span class="line">        node sym[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; v[Mid].<span class="built_in">size</span>(); ++i) </span><br><span class="line">            sym[i].id = v[Mid][i];</span><br><span class="line">        <span class="keyword">if</span>( v[Mid].<span class="built_in">size</span>() )<span class="built_in">work</span>(s, sym[<span class="number">0</span>], cur+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span>( Mid ) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>: </span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                sym[<span class="number">1</span>].inh = sym[<span class="number">0</span>].syn; </span><br><span class="line">                <span class="built_in">work</span>(s, sym[<span class="number">1</span>], cur+<span class="number">1</span>);</span><br><span class="line">                sy.syn = sym[<span class="number">1</span>].syn; </span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// A --&gt; BC 或 B --&gt; DE</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: </span><br><span class="line">                <span class="built_in">work</span>(s, sym[<span class="number">1</span>], cur+<span class="number">1</span>);</span><br><span class="line">                sym[<span class="number">2</span>].inh = sy.inh+sym[<span class="number">1</span>].syn; </span><br><span class="line">                <span class="built_in">work</span>(s, sym[<span class="number">2</span>], cur+<span class="number">1</span>);</span><br><span class="line">                sy.syn = sym[<span class="number">2</span>].syn; </span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// C --&gt; +BC</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: </span><br><span class="line">                <span class="built_in">work</span>(s, sym[<span class="number">1</span>], cur+<span class="number">1</span>);</span><br><span class="line">                sym[<span class="number">2</span>].inh = sy.inh-sym[<span class="number">1</span>].syn; </span><br><span class="line">                <span class="built_in">work</span>(s, sym[<span class="number">2</span>], cur+<span class="number">1</span>);</span><br><span class="line">                sy.syn = sym[<span class="number">2</span>].syn; </span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// C --&gt; -BC</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: </span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                sy.syn = sy.inh; </span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// C --&gt; \epsilon 或 E --&gt; \epsilon</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>: </span><br><span class="line">                <span class="built_in">work</span>(s, sym[<span class="number">1</span>], cur+<span class="number">1</span>);</span><br><span class="line">                sym[<span class="number">2</span>].inh = sy.inh*sym[<span class="number">1</span>].syn; </span><br><span class="line">                <span class="built_in">work</span>(s, sym[<span class="number">2</span>], cur+<span class="number">1</span>);</span><br><span class="line">                sy.syn = sym[<span class="number">2</span>].syn; </span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// E --&gt; *DE</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>: </span><br><span class="line">                <span class="built_in">work</span>(s, sym[<span class="number">1</span>], cur+<span class="number">1</span>);</span><br><span class="line">                sym[<span class="number">2</span>].inh = sy.inh/sym[<span class="number">1</span>].syn; </span><br><span class="line">                <span class="built_in">work</span>(s, sym[<span class="number">2</span>], cur+<span class="number">1</span>);</span><br><span class="line">                sy.syn = sym[<span class="number">2</span>].syn; </span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// E --&gt; /DE</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>: sy.syn = sym[<span class="number">0</span>].syn; </span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// D --&gt; digit</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">9</span>: </span><br><span class="line">                <span class="built_in">work</span>(s, sym[<span class="number">1</span>], cur+<span class="number">1</span>);</span><br><span class="line">                sy.syn = sym[<span class="number">1</span>].syn; </span><br><span class="line">                <span class="built_in">work</span>(s, sym[<span class="number">2</span>], cur+<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// D --&gt; (A)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>( cur == <span class="number">0</span> ) <span class="keyword">throw</span> sy.syn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string in;</span><br><span class="line">    string coin;</span><br><span class="line">    <span class="built_in">initid</span>();</span><br><span class="line">    <span class="built_in">inittable</span>();</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">getline</span>(cin, in) ) &#123;</span><br><span class="line">        in.<span class="built_in">push_back</span>(<span class="string">&#x27;$&#x27;</span>);</span><br><span class="line">        <span class="keyword">int</span> len = in.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span>* s = in.<span class="built_in">c_str</span>();</span><br><span class="line">        coin.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; len; ++i) </span><br><span class="line">            <span class="keyword">if</span>( s[i] !=<span class="string">&#x27; &#x27;</span> &amp;&amp; s[i] != <span class="string">&#x27;\t&#x27;</span> &amp;&amp; s[i] != <span class="string">&#x27;\n&#x27;</span> ) </span><br><span class="line">                coin.<span class="built_in">push_back</span>(s[i]);</span><br><span class="line">        coin.<span class="built_in">push_back</span>(<span class="string">&#x27;\0&#x27;</span>);</span><br><span class="line">        <span class="comment">/* 以上去除空格 */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            node sy = <span class="built_in">node</span>(<span class="built_in">idx</span>(<span class="string">&#x27;A&#x27;</span>));</span><br><span class="line">            s = coin.<span class="built_in">c_str</span>();</span><br><span class="line">            <span class="built_in">work</span>(s, sy, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in"><span class="keyword">catch</span></span>(<span class="keyword">const</span> <span class="keyword">char</span>* str) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in"><span class="keyword">catch</span></span>(<span class="keyword">int</span> ans) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; len<span class="number">-1</span>; ++i) <span class="built_in">putchar</span>(in[i]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; = %d\n&quot;</span>, ans);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;succuss!\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;任务描述&quot;&gt;&lt;a href=&quot;#任务描述&quot; class=&quot;headerlink&quot; title=&quot;任务描述&quot;&gt;&lt;/a&gt;任务描述&lt;/h1&gt;&lt;p&gt;设计一个文法，匹配合法的计算式，并返回正确计算式的结果。&lt;/p&gt;
&lt;h1 id=&quot;文法&quot;&gt;&lt;a href=&quot;#文法&quot; class=&quot;headerlink&quot; title=&quot;文法&quot;&gt;&lt;/a&gt;文法&lt;/h1&gt;&lt;p&gt;\begin{align}&lt;br&gt;&amp;amp;A \rightarrow BC \&lt;br&gt;&amp;amp;C \rightarrow +BC \mid -BC \mid \varepsilon \&lt;br&gt;&amp;amp;B \rightarrow DE \&lt;br&gt;&amp;amp;E \rightarrow *DE \mid /DE \mid \varepsilon \&lt;br&gt;&amp;amp;D \rightarrow digit \mid (A) \&lt;br&gt;\end{align}&lt;/p&gt;</summary>
    
    
    
    
    <category term="编译原理" scheme="http://littleclown.github.io/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
    <category term="语法制导翻译" scheme="http://littleclown.github.io/tags/%E8%AF%AD%E6%B3%95%E5%88%B6%E5%AF%BC%E7%BF%BB%E8%AF%91/"/>
    
    <category term="计算机" scheme="http://littleclown.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>语法分析</title>
    <link href="http://littleclown.github.io/study/computer/fundamentals-of-compiling/grammer/"/>
    <id>http://littleclown.github.io/study/computer/fundamentals-of-compiling/grammer/</id>
    <published>2016-06-18T06:27:03.000Z</published>
    <updated>2019-01-03T02:22:28.649Z</updated>
    
    <content type="html"><![CDATA[<h1 id="FIRST"><a href="#FIRST" class="headerlink" title="FIRST"></a>FIRST</h1><h2 id="计算方法"><a href="#计算方法" class="headerlink" title="计算方法"></a>计算方法</h2><p>$FIRST(X)$</p><ul><li>如果 $X$ 是一个终结符号，那么 $FIRST(X) = X$</li><li>如果 $X \rightarrow \varepsilon$ 是一个产生式，那么 $\varepsilon \in FIRST(X)$</li><li>如果 $X$ 是一个非终结符号，且 $X \rightarrow Y_1Y_2\cdots Y_k$ 是一个产生式：<ul><li>$FIRST(Y_1) \in FIRST(X)$</li><li>对于 $1 \leqslant t \leqslant k$，如果 $\varepsilon \in FIRST(Y_s)$, $1\leqslant s &lt; t$ 成立，则 $FIRST(Y_t) \in FRIST(X)$。</li></ul></li></ul><span id="more"></span><hr><p>$FIRST(X_1X_2\cdots X_k)$</p><ul><li>向 $FIRST(X_1X_2\cdots X_k)$ 加入 $FIRST(X_1)$ 的所有非 $\varepsilon$ 符号</li><li>如果 $\varepsilon \in FIRST(X_1)$，再加入 $FIRST(X_2)$ 的所有非 $\varepsilon$ 符号；以此类推</li><li>如过 $\varepsilon \in FIRST(X_t)$ 对 $1 \leqslant t\leqslant k$ 均成立，则将 $\varepsilon$ 加入 FIRST($X_1X_2\cdots X_k$) 中</li></ul><h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>FIRST 集合大概就是在语法分析树中，当前节点即将扩展的下一个节点的点集。</p><h1 id="FOLLOW"><a href="#FOLLOW" class="headerlink" title="FOLLOW"></a>FOLLOW</h1><h2 id="计算方法-1"><a href="#计算方法-1" class="headerlink" title="计算方法"></a>计算方法</h2><p>  $S$ 是开始符号，$ 是输入右端的结束标记</p><ul><li>将 $ 放到 $FOLLOW(S)$ 中</li><li>如果存在一个产生式 $A \rightarrow \alpha B\beta$，将 $FIRST(\beta)$ 中所有的非 $\varepsilon$ 符号放入到 $FOLLOW(B)$ 中</li><li>如果存在一个产生式 $A \rightarrow \alpha B$ 或存在一个产生式 $A \rightarrow \alpha B\beta$ 且 $\varepsilon \in FIRST(\beta)$，将 $FOLLOW(A)$ 中所有符号放到 $FOLLOW(B)$ 中</li></ul><h2 id="Hint-1"><a href="#Hint-1" class="headerlink" title="Hint"></a>Hint</h2><p>FOLLOW 集合大概就是在语法分析树中，以当前节点为根节点的子树扩展完毕后，回溯时所即将扩展的下一个节点的点集。</p><h1 id="自顶向下的语法分析"><a href="#自顶向下的语法分析" class="headerlink" title="自顶向下的语法分析"></a>自顶向下的语法分析</h1><h2 id="LL-1-文法"><a href="#LL-1-文法" class="headerlink" title="LL(1) 文法"></a>LL(1) 文法</h2><ul><li>有二义性和左递归的文法都不是 $LL(1)$ 的</li><li>一个文法是 $LL(1)$ 的，当且仅当 $G$ 的任意两个不同的产生式 $X \rightarrow \alpha \mid \beta$ 满足：<ul><li>$FIRST(\alpha)$ 和 $FIRST(\beta)$ 是不相交的集合。也就是不存在左公因子。</li><li>如果 $\epsilon \in FIRST(\alpha)$，则 $FIRST(X)$ 和 $FIRST(\beta)$ 是不相交的集合</li><li>如果 $\epsilon \in FIRST(\beta)$，则 $FIRST(X)$ 和 $FIRST(\alpha)$ 是不相交的集合</li></ul></li></ul><h3 id="预测分析表"><a href="#预测分析表" class="headerlink" title="预测分析表"></a>预测分析表</h3><p>  对于 $G$ 的每个产生式 $A \rightarrow \alpha$</p><ul><li>对于 $FIRST(\alpha)$ 中的每个终结符号 $a$，将 $A \rightarrow \alpha$ 加入到 $M[A,a]$中</li><li>如果 $\epsilon$ 在 $FIRST(\alpha)$ 中：<ul><li>那么对于 $FOLLOW(A)$ 中的每个终结符号 $b$，将 $A \rightarrow \alpha$ 加入到 $M[A,b]$ 中</li><li>如果 $ 在 $FOLLOW(A)$ 中，将 $A \rightarrow \alpha$ 加入到 $M[A,$]$ 中</li></ul></li></ul><h1 id="自底向上的语法分析"><a href="#自底向上的语法分析" class="headerlink" title="自底向上的语法分析"></a>自底向上的语法分析</h1><h2 id="规范-LR-0-项集族"><a href="#规范-LR-0-项集族" class="headerlink" title="规范 LR(0) 项集族"></a>规范 LR(0) 项集族</h2><h3 id="项集的闭包"><a href="#项集的闭包" class="headerlink" title="项集的闭包"></a>项集的闭包</h3><ul><li><p>如果 $I$ 是文法 $G$ 的一个项集，那么 $CLOSURE(I)$ 可由下面两个规则从 $I$ 构造得到。</p><ul><li>将 $I$ 中的各个项加入到 $CLOSURE(I)$ 中；</li><li>如果 $A \rightarrow \alpha \cdot B\beta$ 在 $CLOSURE(I)$ 中， $B \rightarrow \gamma$ 是一个产生式，并且项 $B \rightarrow \cdot ~\gamma$ 不在 $CLOSURE(I)$ 中，就将这个项加入其中。 不断应用这个规则，直到没有新项加入到 $CLOSURE(I)$ 中为止。</li></ul><blockquote><p>直观地讲，CLOSURE$(I)$ 中的项 $A \rightarrow \alpha \cdot B\beta$ 表明在语法分析过程的某点上，<br>我们认为接下来可能会在输入中看到一个能够从 $B\beta$ 推导得到的子串。</p></blockquote></li></ul><h3 id="GOTO-函数"><a href="#GOTO-函数" class="headerlink" title="GOTO 函数"></a>GOTO 函数</h3><ul><li>$GOTO(I,X)$，其中 $I$ 是一个项集，$X$ 是一个文法符号。</li><li>$GOTO(I,X)$ 被定义为 $I$ 中所有形如 $[A \rightarrow \alpha \cdot X\beta]$ 的项所对应的项 $[A \rightarrow \alpha X \cdot \beta]$ 的集合的<strong>闭包</strong>。<blockquote><p>直观地讲，GOTO 函数用于定义一个文法的 LR(0) 自动机中的转换，描述了当输入为 $X$ 时离开状态 $I$ 的转换。</p></blockquote></li></ul><h3 id="构造项集族"><a href="#构造项集族" class="headerlink" title="构造项集族"></a>构造项集族</h3><ol><li>初始时，$C=I_0=\Big\lbrace CLOSURE\big( \big\lbrace \big[ S’ \rightarrow \cdot S \big] \big\rbrace \big)\Big\rbrace$ </li><li>对于 $C$ 中的每个项集 $I$：    - 对于每个文法符号 $X$：<ul><li>如果 $GOTO(I,X)$ 非空且不在 $C$ 中，将 $GOTO(I,X)$ 加入到 $C$ 中</li></ul></li><li>重复过程 2</li></ol><h3 id="构造-SLR-语法分析表"><a href="#构造-SLR-语法分析表" class="headerlink" title="构造 SLR 语法分析表"></a>构造 SLR 语法分析表</h3><ol><li>构造 $G’$ 的规范 $LR(0)$ 项集族 $C=\lbrace I_0,I_1,\cdots,I_n \rbrace$。</li><li>根据 $I_i$ 构造得到状态 $i$。状态 $i$ 的语法分析动作按照下面的方法决定：    - 如果 $[A \rightarrow \alpha \cdot a\beta]$ 在 $I_i$ 中，并且 $GOTO(I_i,a)=I_j$， 令 $ACTION[i,a]=s_j$，即 <strong>移入</strong> $j$；其中，$a$ 必须是终结符。     - 如果 $[A \rightarrow \alpha \cdot]$ 在 $I_i$ 中，那么对于 $FOLLOW(A)$ 中的所有 $a$， 令 $ACTION[i,a]=r_j$，即 <strong>规约</strong> $j$；其中，**$j$ 为产生式 $A \rightarrow \alpha$ 的编号**；$A \neq S’$。    - 如果 $[S’ \rightarrow S \cdot]$ 在 $I_i$ 中，令 $ACTION[i,$]=acc$，即 <strong>接受</strong>。</li><li>如果根据上面的规则生成了任何冲突动作，则这个文法不是 $SLR(1)$ 的。<br> 状态 $i$ 对于各个非终结符号 $A$ 的 $GOTO$ 转换使用下面的规则构造得到：<ul><li>如果 $GOTO(I_i,A)=I_j$， 那么，$GOTO[i,A]=j$。</li></ul></li><li>规则(2)和规则(3) 没有定义的条目均设为“报错”。</li><li>语法分析器的初始状态是根据 $[S’ \rightarrow \cdot S]$ 所在项集构造得到的状态。</li></ol><h2 id="有效-LR-1-项集族"><a href="#有效-LR-1-项集族" class="headerlink" title="有效 LR(1) 项集族"></a>有效 LR(1) 项集族</h2><ul><li>可行前缀<ul><li>可以出现在一个 <strong>移入–规约</strong> 的语法分析器的栈中的最右句型前缀，称为 <strong>可行前缀</strong></li></ul></li><li>$LR(1)$ 项<ul><li>形如 $\big[ A \rightarrow \alpha \cdot \beta, a \big]$ 的项，称为 <strong>$LR(1)$ 项</strong>；其中 $A \rightarrow \alpha\beta$ 是一个产生式，$a$ 是一个终结符或右端结束标记 $</li><li>形如 $\big[ A \rightarrow \alpha \cdot, a \big]$ 的项只有在下一个输入符号为 $a$ 时才选择 $A \rightarrow \alpha$ 规约。</li></ul></li><li>可行前缀的有效项<ul><li>$LR(1)$ 项 $\big[ A \rightarrow \alpha \cdot \beta, a \big]$ 对于可行前缀 $\gamma$ 有效的条件是：<ul><li>存在一个最右推导 $S \overset{*}{\underset{rm}{\Rightarrow}} \delta A\omega \underset{rm}\Rightarrow \delta\alpha\beta\omega$，且</li><li>$\gamma = \delta\alpha$，且</li><li>要么 $a$ 是 $\omega$ 的第一个符号，要么 $\omega=\varepsilon$ 且 $a=$$</li></ul></li></ul></li></ul><h3 id="项集的闭包-1"><a href="#项集的闭包-1" class="headerlink" title="项集的闭包"></a>项集的闭包</h3><p>如果 $\big[ A \rightarrow \alpha \cdot B\beta, a \big]$ 对可行前缀 $\gamma=\delta\alpha$ 有效， 那么必然存在一个最右推导 $S \overset{*}{\underset{rm}{\Rightarrow}} \delta A\alpha x \underset{rm}\Rightarrow \delta\alpha B\beta ax$。 假设 $\beta ax$ 推导出终结符号串 $by$，那么对于某个形如 $B \rightarrow \eta$ 的产生式，有推导 $S \overset{*}{\underset{rm}{\Rightarrow}} \gamma Bby \underset{rm}\Rightarrow \gamma\eta by$。<br>因此，$\big[ B \rightarrow \cdot\eta, b \big]$ 是 $\gamma$ 的有效项。其中，$b \in FIRST(\beta a)$。</p><ul><li>如果 $I$ 是文法 $G$ 的一个项集，那么 $CLOSURE(I)$ 可由下列规则从 $I$ 中构造得到。<ul><li>对于 $I$ 中的每个项 $\big[ A \rightarrow \alpha\cdot B\beta,a \big]$<ul><li>对于 $G’$ 中的每个产生式 $B \rightarrow \gamma$<ul><li>对于 $FIRST(\beta a)$ 中的每个终结符号 $b$<ul><li>将 $\big[ B \rightarrow \gamma, b \big]$ 加入到集合 $I$ 中</li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="Hint-2"><a href="#Hint-2" class="headerlink" title="Hint"></a>Hint</h3><ul><li><p>本质上，$SLR$ 是利用 $LR(0)$ 自动机能够识别可行前缀这一事实构造的语法分析方案；$LR(1)$ 在此基础上考虑了对可行前缀的 <strong>有效性</strong>。</p></li><li><p>$LR(1)$ 和 $LR(0)$ 构造闭包的算法的区别在于：</p><ul><li>不再对于任意的 $\big[ A \rightarrow \alpha\cdot B\beta ]$ 添加到闭包中了， 这样做的目的是为了减少 <strong>移入–规约</strong> 冲突。<br>也就是，如果 $I$ 中有产生式 $A \rightarrow \alpha\cdot B\beta$，对于产生式 $B \rightarrow \eta$：<ul><li>SLR：直接将 $B \rightarrow \eta$ 加进 $I$ 的闭包中</li><li>LR(1)：由于有一个向前看符号，不妨记 $A \rightarrow \alpha\cdot B\beta$ 的向前看符号为 $a$，那么仅当满足 $a \in FIRST(\beta a)$ 时才能将 $B \rightarrow \eta$ 加进 $I$ 的闭包</li></ul></li></ul></li></ul><h3 id="GOTO-函数-1"><a href="#GOTO-函数-1" class="headerlink" title="GOTO 函数"></a>GOTO 函数</h3><ul><li>计算 $GOTO(I,X)$<ul><li>将 $J$ 初始化为空集</li><li>对于 $I$ 中的每个项  $\big[ A \rightarrow \alpha\cdot X\beta,a \big]$<ul><li>将项  $\big[ A \rightarrow \alpha X\cdot \beta,a \big]$ 加入到集合 $J$ 中</li></ul></li><li>返回 $CLOSURE(J)$</li></ul></li></ul><h3 id="构造项集族-1"><a href="#构造项集族-1" class="headerlink" title="构造项集族"></a>构造项集族</h3><ul><li>初始时， $C=I_0=\Big\lbrace CLOSURE\big( \big\lbrace \big[ S’ \rightarrow \cdot S,$ \big] \big\rbrace \big)\Big\rbrace$ <ul><li>对于 $C$ 中的每个项集 $I$<ul><li>对于每个文法符号 $X$<ul><li>如果 $GOTO(I,X)$ 非空且不在 $C$ 中<ul><li>将 $GOTO(I,X)$ 加入 $C$ 中</li></ul></li></ul></li></ul></li></ul></li></ul><h3 id="构造规范-LR-1-语法分析表"><a href="#构造规范-LR-1-语法分析表" class="headerlink" title="构造规范 LR(1) 语法分析表"></a>构造规范 LR(1) 语法分析表</h3><ol><li>构造 $G’$ 的规范 $LR(0)$ 项集族 $C=\lbrace I_0,I_1,\cdots,I_n \rbrace$。</li><li>根据 $I_i$ 构造得到状态 $i$。状态 $i$ 的语法分析动作按照下面的方法决定：    - 如果 $[A \rightarrow \alpha \cdot a\beta, b]$ 在 $I_i$ 中，并且 $GOTO(I_i,a)=I_j$， 令 $ACTION[i,a]=s_j$，即 <strong>移入</strong> $j$；其中，$a$ 必须是终结符。     - 如果 $[A \rightarrow \alpha \cdot, a]$ 在 $I_i$ 中，且 $A \neq S’$； 那么令 $ACTION[i,a]=r_j$，即 <strong>规约</strong> $j$；其中，**$j$ 为产生式 $A \rightarrow \alpha$ 的编号**。    - 如果 $[S’ \rightarrow S \cdot, $]$ 在 $I_i$ 中，令 $ACTION[i,$]=acc$，即 <strong>接受</strong>。</li><li>如果根据上面的规则生成了任何冲突动作，则这个文法不是 $LR(1)$ 的。<br> 状态 $i$ 对于各个非终结符号 $A$ 的 $GOTO$ 转换使用下面的规则构造得到：<ul><li>如果 $GOTO(I_i,A)=I_j$， 那么，$GOTO[i,A]=j$。</li></ul></li><li>规则(2)和规则(3) 没有定义的条目均设为“报错”。</li><li>语法分析器的初始状态是根据 $[S’ \rightarrow \cdot S, $]$ 所在项集构造得到的状态。</li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;FIRST&quot;&gt;&lt;a href=&quot;#FIRST&quot; class=&quot;headerlink&quot; title=&quot;FIRST&quot;&gt;&lt;/a&gt;FIRST&lt;/h1&gt;&lt;h2 id=&quot;计算方法&quot;&gt;&lt;a href=&quot;#计算方法&quot; class=&quot;headerlink&quot; title=&quot;计算方法&quot;&gt;&lt;/a&gt;计算方法&lt;/h2&gt;&lt;p&gt;$FIRST(X)$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果 $X$ 是一个终结符号，那么 $FIRST(X) = X$&lt;/li&gt;
&lt;li&gt;如果 $X \rightarrow \varepsilon$ 是一个产生式，那么 $\varepsilon \in FIRST(X)$&lt;/li&gt;
&lt;li&gt;如果 $X$ 是一个非终结符号，且 $X \rightarrow Y_1Y_2\cdots Y_k$ 是一个产生式：&lt;ul&gt;
&lt;li&gt;$FIRST(Y_1) \in FIRST(X)$&lt;/li&gt;
&lt;li&gt;对于 $1 \leqslant t \leqslant k$，如果 $\varepsilon \in FIRST(Y_s)$, $1\leqslant s &amp;lt; t$ 成立，则 $FIRST(Y_t) \in FRIST(X)$。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="编译原理" scheme="http://littleclown.github.io/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
    <category term="计算机" scheme="http://littleclown.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    <category term="语法分析" scheme="http://littleclown.github.io/tags/%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>百度之星 2016 解题报告</title>
    <link href="http://littleclown.github.io/acm/contest/baiduzhixing/2016/"/>
    <id>http://littleclown.github.io/acm/contest/baiduzhixing/2016/</id>
    <published>2016-06-03T10:11:48.000Z</published>
    <updated>2019-01-03T02:22:28.200Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1002-K-个连通块"><a href="#1002-K-个连通块" class="headerlink" title="1002 K 个连通块"></a>1002 K 个连通块</h1><p><em><strong><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5713">题目链接</a></strong></em></p><h2 id="题目简析"><a href="#题目简析" class="headerlink" title="题目简析"></a>题目简析</h2><p>假入 $N$ 个点依次为：$\displaystyle V=\left\lbrace A_0,A_1,\cdots,A_{N-1} \right\rbrace$。<br>不难想到状态压缩。<br>令 $dp[k][s]$ 表示点集 $\displaystyle V_s=\big\lbrace A_i ~~ \big| ~~\left\lfloor \frac{s}{2^i} \right\rfloor \equiv 1\hskip -1em\mod 2 \text{（即 $s&amp;2^i=1$）} \big\rbrace$ 恰好构成 $k$ 个连通块的方案数。<br>要注意的是，点对 $\displaystyle \big\lbrace (u,v) ~~ \big| ~~ u \in V, v\in V_s \big\rbrace$ 之间的连边都要抹去，因为 $V_s$ 中的点首先要和不在 $V_s$ 中的断开“联系”，才能得到独立的 $k$ 连通块，这样才能正确递推。</p><span id="more"></span><p>先考虑如何求 $dp[1][s]$。</p><hr><p>为方便叙述，记 $f(s) = dp[1][s]$， $\displaystyle s=2^{j_1}+2^{j_2}+\cdots+2^{j_t}$，<br>故其所代表点集为 $\displaystyle V_s=\big\lbrace A_{j_1},A_{j_2},\cdots,A_{j_t} \big\rbrace,(0\leqslant j_1 &lt; j_2 &lt; \cdots &lt; j_t \leqslant N-1)$。<br>令 $E(s)$ 表示 $V_s$ 中的互不相同的两点之间的边的总数；则<br>\begin{align}<br>  f(s) = 2^{E(s)} - \sum_{A_{j_1} \in V_{s’},~V_{s’} \in \lbrace V_s \rbrace} f(s’) \times 2^{E(s-s’)}<br>\end{align}<br>证明并不难：<br>为使 $V_s$ 为一个独立的连通块，则需要考虑两个部分。</p><ol><li>$V_s$ 中的点与不在 $V_s$ 中的点之间不连通；因此，我们仅需考虑 $V_s$ 中两两之间的边，去边的总方案为 $2^{E(s)}$。</li><li>$V_s$ 内部的点两两连通；可以反过来考虑，减去所有使得内部不连通的情况。将点集 $V_s$ 分成 $V_{s’}$ 和 $V_{s’’}$ 两部分，其中 $V_{s’}+V_{s’’}=V_s$ 且 $A_{j_1} \in V_{s’}$，且 $V_{s’}$ 构成一个独立的连通块。对于这一划分方案，共有 $f(s’) \times 2^{E(s-s’)}$ 种方案使得 $V_{s’}$ 和 $V_{s’’}$ 之间不连通。因为 $V_{s’}$ 是一个独立的连通块，所以 $V_{s’}$ 和 $V_{s’’}$ 之间的边必须全断，则 $V_{s’’}$ 中的边可以自由选择了。</li></ol><p>再考虑如何递推。</p><hr><p>不难想到递推方程 $\displaystyle dp[k+1][s]=\sum_{V_{s’} \in V_s} dp[k][s’] \times dp[1][s-s’]$。<br>但是，很遗憾，因为它是错的。<br>考虑 $k=3$ 的情况，如果 $V_s=\big\lbrace A_1, A_2,A_3 \big\rbrace$，则 $V_{s’}=\big\lbrace A_1,A_2 \big\rbrace$ 与 $V_{s’}=\big\lbrace A_1, A_3 \big\rbrace$ 所做的贡献是完全重复的。为了避免重复，我们得到新的递推式<br>\begin{align}<br>  dp[k+1][s]=\sum_{A_{j_1} \notin V_{s’},~V_{s’} \in V_s} dp[k][s’] \times dp[1][s-s’]<br>\end{align}<br>不难验证其正确性。</p><h2 id="进一步分析"><a href="#进一步分析" class="headerlink" title="进一步分析"></a>进一步分析</h2><p>上述分析足以通过此题，我跑了 858MS。但还有改进的余地。<br>先改造一下递推式，记 $V’_s=V-V_{s’}=\big\lbrace A_{p_1},A_{p_2},\cdots,A_{p_q} \big\rbrace$。<br>\begin{align}<br>  dp[k+1][s]=\sum_{A_{j_1} \in V_{s’},<del>V_{s’} \in V_s,</del>A_{p_1} \in V_{s-s’}} dp[k][s’] \times dp[1][s-s’]<br>\end{align}<br>上述递推式用刷表法实现即可避免 $A_{p_1} \in V_{s-s’}$ 的判断。<br>注意到我们要的终态是 $dp[K][2^N-1]$，所以，我们可以只计算满足 $A_1 \in V_s$ 的状态 $dp[K][s]$，理由是 $A_1 \in V_{s’}$，即这条递推到 $dp[K][s]$ 的递推链都可以被计算到。当然，也可以采取记忆化搜索。<br>跑了 124MS 左右。</p><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>空间复杂度 $O(2^N)$<br>时间复杂度 $O(N^2 \cdot 2^N+K \cdot 3^N)$</p><h2 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1000000000</span>+<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> G[MAXN][MAXN];</span><br><span class="line"><span class="keyword">int</span> p2[MAXN*MAXN];</span><br><span class="line"><span class="keyword">int</span> l2[<span class="number">1</span>&lt;&lt;MAXN];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">2</span>][<span class="number">1</span>&lt;&lt;MAXN];</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">1</span>&lt;&lt;MAXN];</span><br><span class="line"><span class="keyword">int</span> c[<span class="number">1</span>&lt;&lt;MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span>&amp; x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span>&amp; x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x += y;</span><br><span class="line">    <span class="keyword">if</span>( x &gt;= MOD ) x -= MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span>&amp; x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x -= y;</span><br><span class="line">    <span class="keyword">if</span>( x &lt; <span class="number">0</span> ) x += MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> N, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> all = (<span class="number">1</span>&lt;&lt;N) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> now = <span class="number">0</span>, last = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> s=<span class="number">0</span>; s &lt;= all; s+=<span class="number">2</span>)</span><br><span class="line">        dp[<span class="number">0</span>][s] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> s=<span class="number">1</span>; s &lt;= all; s+=<span class="number">2</span>)</span><br><span class="line">        dp[<span class="number">0</span>][s] = f[s];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k &lt; K; ++k) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(now, last);</span><br><span class="line">        <span class="built_in">memset</span>(dp[now], <span class="number">0</span>, <span class="keyword">sizeof</span> dp[now]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> s=<span class="number">1</span>; s &lt;= all; ++s) &#123;</span><br><span class="line">            <span class="keyword">if</span>( !dp[last][s] ) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> r = all^s;</span><br><span class="line">            <span class="keyword">int</span> x = <span class="built_in">lowbit</span>(r);</span><br><span class="line">            r ^= x;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> t=r; t; t=(t<span class="number">-1</span>)&amp;r)</span><br><span class="line">                <span class="built_in">add</span>(dp[now][s|x|t], (LL) dp[last][s]*f[t|x] %MOD);</span><br><span class="line">            <span class="built_in">add</span>(dp[now][s|x], (LL) dp[last][s]*f[x] %MOD);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[now][all];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> N, <span class="keyword">int</span> K, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> all = (<span class="number">1</span>&lt;&lt;N) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> vi[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> siz, cnt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> s=<span class="number">1</span>; s &lt;= all; ++s) &#123;</span><br><span class="line">        siz = cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> u=s, v; u; u^=v)</span><br><span class="line">            vi[siz++] = l2[v=<span class="built_in">lowbit</span>(u)];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">0</span>; u &lt; siz; ++u)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> v=u+<span class="number">1</span>; v &lt; siz; ++v)</span><br><span class="line">                cnt += G[vi[u]][vi[v]];</span><br><span class="line">        c[s] = p2[cnt];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(f, c, <span class="keyword">sizeof</span> f);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> s=<span class="number">1</span>; s &lt;= all; ++s) &#123;</span><br><span class="line">        <span class="keyword">int</span> ls = <span class="built_in">lowbit</span>(s);</span><br><span class="line">        <span class="keyword">if</span>( ls == s ) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> r = s^ls;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> t=(r<span class="number">-1</span>)&amp;r; t; t=(t<span class="number">-1</span>)&amp;r)</span><br><span class="line">            <span class="built_in">sub</span>(f[s], (LL) f[t|ls]*c[r^t] %MOD);</span><br><span class="line">        <span class="built_in">sub</span>(f[s], (LL) f[ls]*c[r] %MOD);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ans = (LL) <span class="built_in">calc</span>(N, K)*p2[e] %MOD;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    p2[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt; MAXN*MAXN; ++i)</span><br><span class="line">        p2[i] = p2[i<span class="number">-1</span>]*<span class="number">2</span> %MOD;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; MAXN; ++i)</span><br><span class="line">        l2[<span class="number">1</span>&lt;&lt;i] = i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> T_T, N, M, K, e, u, v;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T_T);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> kase=<span class="number">1</span>; kase &lt;= T_T; ++kase) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Case #%d:\n&quot;</span>, kase);</span><br><span class="line">        <span class="built_in">memset</span>(G, <span class="number">0</span>, <span class="keyword">sizeof</span> G);</span><br><span class="line">        e = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;N, &amp;M, &amp;K);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; M; ++i) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">            <span class="keyword">if</span>( u &gt; v ) <span class="built_in">swap</span>(u, v);</span><br><span class="line">            <span class="keyword">if</span>( u != v ) ++G[u<span class="number">-1</span>][v<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">else</span> ++e;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">solve</span>(N, K, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">work</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="1004-XOR-游戏"><a href="#1004-XOR-游戏" class="headerlink" title="1004 XOR 游戏"></a>1004 XOR 游戏</h1><p><em><strong><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5715">题目链接</a></strong></em></p><h2 id="题目简析-1"><a href="#题目简析-1" class="headerlink" title="题目简析"></a>题目简析</h2><p>设 $dp[k][n]$ 表示将前 $n$ 个数划分成 $k$ 组的合法方案的 <code>分组异或和最小值</code> 的最大值；<br>设 $A[n]$ 表示前 $n$ 个数的异或和。<br>不难得到递推方程：<br>$dp[k+1][n] = \max \Big\lbrace \min \big\lbrace dp[k][n-i], A[n] \oplus A[n-i] \big\rbrace \Big\rbrace, 1\leqslant i\leqslant L$。<br>很可惜，这个方程的时间复杂度是 $O(M\cdot N\cdot L)$ 的，难以承受。</p><p>如何在更短的时间内求出 $dp[k+1][n] = \max \Big\lbrace \min \big\lbrace dp[k][n-i], A[n] \oplus A[n-i] \big\rbrace \Big\rbrace, 1\leqslant i\leqslant L$ 呢？</p><h2 id="算法一"><a href="#算法一" class="headerlink" title="算法一"></a>算法一</h2><p>先假设 $\big\lbrace A[n-L],A[n-L+1],\cdots,A[n-1] \big\rbrace$ 两两不相等；并将其二进制表示插入字典树中。字典树中 <em>表示 $A[i]$ 的链</em> 的叶子节点的权值为 $dp[k][i]$，非叶子节点权值为所有子孙节点权值最大值。<br>那么，计算 $dp[k+1][n]$ 时，仅需在用字典树贪心求 $A[n]$ 最大异或和的基础上，将节点的权值作为选择贪心策略的依据。具体地：</p><p>设当前在字典树中第 h 层(考虑到题目的数据范围，从 31 开始递减计数，所有叶子节点都在第 0 层)：<br>记在前面 $31-h$ 层中，选择的边边权依次为：$a_{30},a_{29},\cdots,a_{h}$。<br>记 $x=A[n]=b_{30}\cdot 2^{30}+b_{29}\cdot 2^{29}+\cdots+b_0 2^{0}$；<br>$y=(a_{30} \oplus b_{30})\cdot 2^{30}+(a_{29} \oplus b_{29})\cdot 2^{29}+\cdots+(a_{h} \oplus b_{h})\cdot 2^h$。<br>接下来考虑下一层往哪走，即 $a_{h-1}$ 的取值。<br>记与当前节点相连且边权为 $a_{h-1} = b_{h-1} \oplus 1$ 的子节点为 $o_1$；另一子节点为 $o_2$。其权值依次为 $val(o_1),~val(o_2)$。</p><ol><li>$\displaystyle \left\lfloor \frac{x}{2^h} \right\rfloor \equiv 1\hskip -1em \mod 2$。 也就是 $b_h=1$。</li></ol><ul><li><p>如果 $val(o_1) &lt; y+2^{h-1}$，说明如果下一步选择 $o_1$，则 $\max \Big\lbrace \min \big\lbrace dp[k][n-i], A[n] \oplus A[n-i] \big\rbrace \Big\rbrace = val(o_1)$，<br>所以我们 <strong>仅需选择 $o_2$</strong> 求出一个最优值 $ans_2$，最后的答案就是 $\max \big\lbrace val(o_1),ans_2 \big\rbrace$。</p></li><li><p>如果 $val(o_1) \geqslant y+2^{h-1}$，即选择 $o_1$，则最坏情况答案不小于 $y+2^{h-1}$。同时，选择 $o_2$，最好的情况不会大于 $y+2^{h-1}$。<br>所以我们 <strong>仅需选择 $o_1$</strong> 求出一个最优值 $ans_1$，即是最后的答案。 </p></li></ul><ol start="2"><li>$\displaystyle \left\lfloor \frac{x}{2^h} \right\rfloor \equiv 0\hskip -1em \mod 2$。 也就是 $b_h=0$。<br> 只有走到 $o_2$ 这一个选择。</li></ol><p>根据上面的分析，不难发现，查询操作时间复杂度为 $O(1)$。<br>如果存在一对 $(i,j)$ 使得 $A[i]=A[j]$ 呢？</p><p>事实上，只要保证字典树中的表示 $A[i]$ 的链的叶子节点权值为 $\max \big\lbrace dp[k][n-i],dp[k][n-j] \big\rbrace$ 就好了。<br>可以先将 $A$ 离散化，开 $N$ 棵 $multiset$。那么，在删除 $dp[k][n-L-1]$ 时，只要将 $A[n-L-1]$ 对应的 $multiset$ 中最大权值更新到字典树中即可。</p><h3 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度：$O(M\cdot N\cdot \log L)$<br>空间复杂度：$O(N)$</p><h3 id="程序实现-1"><a href="#程序实现-1" class="headerlink" title="程序实现"></a>程序实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">10000</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    node *ch[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Maintain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        val = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>( ch[<span class="number">0</span>] ) val = ch[<span class="number">0</span>]-&gt;val;</span><br><span class="line">        <span class="keyword">if</span>( ch[<span class="number">1</span>] ) val = std:: <span class="built_in">max</span>(val, ch[<span class="number">1</span>]-&gt;val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">node nodepool[MAXN&lt;&lt;<span class="number">5</span>];</span><br><span class="line">node* nodetop;</span><br><span class="line">node* root;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> node* <span class="title">newnode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    nodetop-&gt;ch[<span class="number">0</span>] = nodetop-&gt;ch[<span class="number">1</span>] = <span class="literal">NULL</span>;</span><br><span class="line">    nodetop-&gt;val = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> nodetop++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(node* &amp;o, <span class="keyword">int</span> x, <span class="keyword">int</span> v, <span class="keyword">int</span> d=<span class="number">30</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( o == <span class="literal">NULL</span> ) o = <span class="built_in">newnode</span>();</span><br><span class="line">    <span class="keyword">if</span>( d == <span class="number">-1</span> ) o-&gt;val = v;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> c = (x&gt;&gt;d) &amp; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">Update</span>(o-&gt;ch[c], x, v, d<span class="number">-1</span>);</span><br><span class="line">        o-&gt;<span class="built_in">Maintain</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(node* &amp;o, <span class="keyword">int</span> x, <span class="keyword">int</span> ans=<span class="number">0</span>, <span class="keyword">int</span> d=<span class="number">30</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( o == <span class="literal">NULL</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>( d == <span class="number">-1</span> ) <span class="keyword">return</span> <span class="built_in">min</span>(o-&gt;val, ans);</span><br><span class="line">    <span class="keyword">int</span> c = (x&gt;&gt;d) &amp; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>( o-&gt;ch[c^<span class="number">1</span>] ) &#123;</span><br><span class="line">        <span class="keyword">if</span>( o-&gt;ch[c^<span class="number">1</span>]-&gt;val &lt; (ans^(<span class="number">1</span>&lt;&lt;d)) )</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">max</span>(o-&gt;ch[c^<span class="number">1</span>]-&gt;val, <span class="built_in">Query</span>(o-&gt;ch[c], x, ans, d<span class="number">-1</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Query</span>(o-&gt;ch[c^<span class="number">1</span>], x, ans^(<span class="number">1</span>&lt;&lt;d), d<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Query</span>(o-&gt;ch[c], x, ans, d<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">bool</span> positive = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(; !<span class="built_in">isdigit</span>(c); c=<span class="built_in">getchar</span>())</span><br><span class="line">        <span class="keyword">if</span>( c == <span class="string">&#x27;-&#x27;</span> ) positive = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(; <span class="built_in">isdigit</span>(c); c=<span class="built_in">getchar</span>())</span><br><span class="line">        s = s*<span class="number">10</span> + c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> positive? s: -s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">multiset&lt;<span class="keyword">int</span>&gt; ms[MAXN];</span><br><span class="line"><span class="keyword">int</span> A[MAXN];</span><br><span class="line"><span class="keyword">int</span> B[MAXN], bsiz;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">2</span>][MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id = <span class="built_in">lower_bound</span>(B, B+bsiz, x) - B;</span><br><span class="line">    <span class="keyword">if</span>( ms[id].<span class="built_in">upper_bound</span>(v) == ms[id].<span class="built_in">end</span>() )</span><br><span class="line">        <span class="built_in">Update</span>(root, B[id], v);</span><br><span class="line">    ms[id].<span class="built_in">insert</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id = <span class="built_in">lower_bound</span>(B, B+bsiz, x) - B;</span><br><span class="line">    multiset&lt;<span class="keyword">int</span>&gt;:: iterator it;</span><br><span class="line">    it = ms[id].<span class="built_in">find</span>(v);</span><br><span class="line">    ms[id].<span class="built_in">erase</span>(it);</span><br><span class="line">    <span class="keyword">int</span> vv = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>( !ms[id].<span class="built_in">empty</span>() ) &#123;</span><br><span class="line">        it = ms[id].<span class="built_in">end</span>();</span><br><span class="line">        vv = *(--it);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>( vv &lt; v )</span><br><span class="line">        <span class="built_in">Update</span>(root, B[id], vv);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">int</span> K = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">int</span> L = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;= N; ++i) </span><br><span class="line">        A[i] = A[i<span class="number">-1</span>]^<span class="built_in">read</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">memcpy</span>(B, A+<span class="number">1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>)* N);</span><br><span class="line">    <span class="built_in">sort</span>(B, B+N);</span><br><span class="line">    bsiz = std:: <span class="built_in">unique</span>(B, B+N) - B;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(dp[<span class="number">0</span>], <span class="number">0</span>, <span class="keyword">sizeof</span> dp[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;= L; ++i)</span><br><span class="line">        dp[<span class="number">0</span>][i] = A[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> now = <span class="number">0</span>, last = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">2</span>; k &lt;= K; ++k) &#123;</span><br><span class="line">        nodetop = nodepool;</span><br><span class="line">        root = <span class="built_in">newnode</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; bsiz; ++i) ms[i].<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">swap</span>(now, last);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">1</span>; n &lt;= N; ++n) &#123;</span><br><span class="line">            <span class="keyword">if</span>( n &gt; L+<span class="number">1</span> ) <span class="built_in">sub</span>(A[n-L<span class="number">-1</span>], dp[last][n-L<span class="number">-1</span>]);</span><br><span class="line">            dp[now][n] = <span class="built_in">Query</span>(root, A[n]);</span><br><span class="line">            <span class="built_in">add</span>(A[n], dp[last][n]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, dp[now][N]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T_T = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> kase=<span class="number">1</span>; kase &lt;= T_T; ++kase) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Case #%d:\n&quot;</span>, kase);</span><br><span class="line">        <span class="built_in">work</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><p>在离散化过程中使用排序，查询使用 $lowerbound$，复杂度退化为 $O(M\cdot N\cdot(\log L+\log N))$。<br>不过，仍然只跑了 $202MS$。</p><h2 id="算法二"><a href="#算法二" class="headerlink" title="算法二"></a>算法二</h2><p>重新定义 $dp[k][n]$。给定一个下界 $val$，定义 $dp[k][n]$ 为能否将前 $n$ 个数分成 $k$ 份，使得合法方案的 <code>分组异或和最小值</code> 的最大值大于等于 $val$。<br>那么，我们仅需将 $1\leqslant i\leqslant L$ 中满足 $dp[k][n-i]=true$ 的 $A[n-i]$ 丢进字典树中，则仅需判断字典树中的数与 $A[n]$ 最大异或值是否大于等于 $val$ 即可。<br>然后，仅需二分 $val$ 即可。</p><h3 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度：$O(M\cdot N\cdot \log N)$<br>空间复杂度：$O(N)$</p><h3 id="程序实现-2"><a href="#程序实现-2" class="headerlink" title="程序实现"></a>程序实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    node* ch[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="built_in">node</span>(<span class="keyword">int</span> val=<span class="number">0</span>): <span class="built_in">val</span>(val) &#123;</span><br><span class="line">        ch[<span class="number">0</span>] = ch[<span class="number">1</span>] = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">node* root;</span><br><span class="line">node* nodetop;</span><br><span class="line">node nodepool[MAXN&lt;&lt;<span class="number">5</span>];</span><br><span class="line"><span class="keyword">bool</span> dp[<span class="number">12</span>][MAXN];</span><br><span class="line"><span class="keyword">int</span> A[MAXN];</span><br><span class="line"><span class="keyword">int</span> N, K, L;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> node* <span class="title">newnode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    nodetop-&gt;ch[<span class="number">0</span>] = nodetop-&gt;ch[<span class="number">1</span>] = <span class="literal">NULL</span>;</span><br><span class="line">    nodetop-&gt;val = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> nodetop++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    node* u = root;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">30</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = (x&gt;&gt;i) &amp; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>( !u-&gt;ch[c] )</span><br><span class="line">            u-&gt;ch[c] = <span class="built_in">newnode</span>();</span><br><span class="line">        u = u-&gt;ch[c];</span><br><span class="line">        u-&gt;val += d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Search</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    node* u = root;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">30</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = (x&gt;&gt;i) &amp; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>( u-&gt;ch[c^<span class="number">1</span>] &amp;&amp; u-&gt;ch[c^<span class="number">1</span>]-&gt;val &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">            ans ^= <span class="number">1</span>&lt;&lt;i;</span><br><span class="line">            u = u-&gt;ch[c^<span class="number">1</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>( u-&gt;ch[c] ) u = u-&gt;ch[c];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">bool</span> positive = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(; !<span class="built_in">isdigit</span>(c); c=<span class="built_in">getchar</span>())</span><br><span class="line">        <span class="keyword">if</span>( c == <span class="string">&#x27;-&#x27;</span> ) positive = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(; <span class="built_in">isdigit</span>(c); c=<span class="built_in">getchar</span>())</span><br><span class="line">        s = s*<span class="number">10</span> + c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> positive? s: -s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp[<span class="number">1</span>], <span class="number">0</span>, <span class="keyword">sizeof</span> dp[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">1</span>; n &lt;= L; ++n)</span><br><span class="line">        dp[<span class="number">1</span>][n] = A[n] &gt;= val? <span class="literal">true</span>: <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">2</span>; k &lt;= K; ++k) &#123;</span><br><span class="line">        nodetop = nodepool;</span><br><span class="line">        root = <span class="built_in">newnode</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">1</span>; n &lt;= N; ++n) &#123;</span><br><span class="line">            <span class="keyword">if</span>( n &gt; L+<span class="number">1</span> &amp;&amp; dp[k<span class="number">-1</span>][n-L<span class="number">-1</span>] )</span><br><span class="line">                <span class="built_in">Insert</span>(A[n-L<span class="number">-1</span>], <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">            dp[k][n] = <span class="built_in">Search</span>(A[n]) &gt;= val? <span class="literal">true</span>: <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>( dp[k<span class="number">-1</span>][n] )</span><br><span class="line">                <span class="built_in">Insert</span>(A[n], <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[K][N];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    N = <span class="built_in">read</span>(); K = <span class="built_in">read</span>(); L = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt;= N; ++i)</span><br><span class="line">        A[i] = A[i<span class="number">-1</span>]^<span class="built_in">read</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> lft = <span class="number">0</span>, rht = (<span class="number">1</span>&lt;&lt;<span class="number">30</span>) | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>( lft &lt; rht ) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (lft+rht) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>( <span class="built_in">check</span>(mid) ) lft = mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> rht = mid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, lft<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T_T = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> kase=<span class="number">1</span>; kase &lt;= T_T; ++kase) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Case #%d:\n&quot;</span>, kase);</span><br><span class="line">        <span class="built_in">work</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Hint-1"><a href="#Hint-1" class="headerlink" title="Hint"></a>Hint</h3><p>算法二思路简单，实现难度小，效率还不错，跑了 $1092MS$。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;1002-K-个连通块&quot;&gt;&lt;a href=&quot;#1002-K-个连通块&quot; class=&quot;headerlink&quot; title=&quot;1002 K 个连通块&quot;&gt;&lt;/a&gt;1002 K 个连通块&lt;/h1&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=5713&quot;&gt;题目链接&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目简析&quot;&gt;&lt;a href=&quot;#题目简析&quot; class=&quot;headerlink&quot; title=&quot;题目简析&quot;&gt;&lt;/a&gt;题目简析&lt;/h2&gt;&lt;p&gt;假入 $N$ 个点依次为：$\displaystyle V=\left\lbrace A_0,A_1,\cdots,A_{N-1} \right\rbrace$。&lt;br&gt;不难想到状态压缩。&lt;br&gt;令 $dp[k][s]$ 表示点集 $\displaystyle V_s=\big\lbrace A_i ~~ \big| ~~\left\lfloor \frac{s}{2^i} \right\rfloor \equiv 1\hskip -1em\mod 2 \text{（即 $s&amp;amp;2^i=1$）} \big\rbrace$ 恰好构成 $k$ 个连通块的方案数。&lt;br&gt;要注意的是，点对 $\displaystyle \big\lbrace (u,v) ~~ \big| ~~ u \in V, v\in V_s \big\rbrace$ 之间的连边都要抹去，因为 $V_s$ 中的点首先要和不在 $V_s$ 中的断开“联系”，才能得到独立的 $k$ 连通块，这样才能正确递推。&lt;/p&gt;</summary>
    
    
    
    
    <category term="递推" scheme="http://littleclown.github.io/tags/%E9%80%92%E6%8E%A8/"/>
    
    <category term="状态压缩" scheme="http://littleclown.github.io/tags/%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9/"/>
    
    <category term="动态规划" scheme="http://littleclown.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="字典树" scheme="http://littleclown.github.io/tags/%E5%AD%97%E5%85%B8%E6%A0%91/"/>
    
    <category term="ACM" scheme="http://littleclown.github.io/tags/ACM/"/>
    
    <category term="解题报告" scheme="http://littleclown.github.io/tags/%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>python 字符串操作</title>
    <link href="http://littleclown.github.io/study/codding/programming-language/python/string/1/"/>
    <id>http://littleclown.github.io/study/codding/programming-language/python/string/1/</id>
    <published>2016-05-28T07:45:45.000Z</published>
    <updated>2019-01-03T02:22:28.634Z</updated>
    
    <content type="html"><![CDATA[<p>python 字符串可由 <code>单引号&#39;</code> 或 <code>双引号&quot;</code> 括起来，二者无区别；引号可用 <code>反斜杠\</code> 转义<br>在引号前加一个 <code>r</code> 可以使得引号中的字符保留原义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;\some\name&#x27;</span>)</span><br><span class="line">\some</span><br><span class="line">ame</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">r&#x27;\some\name&#x27;</span>)</span><br><span class="line">\some\name</span><br></pre></td></tr></table></figure><h1 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h1><span id="more"></span><h2 id="连接-‘-’"><a href="#连接-‘-’" class="headerlink" title="连接 ‘+’"></a>连接 ‘+’</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>h = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>w = <span class="string">&#x27;world&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(h+<span class="string">&#x27;, &#x27;</span>+w)</span><br><span class="line">hello, world</span><br></pre></td></tr></table></figure><h2 id="重复-‘-’"><a href="#重复-‘-’" class="headerlink" title="重复 ‘*’"></a>重复 ‘*’</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>h = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>w = <span class="string">&#x27;world&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>((h+<span class="string">&#x27;, &#x27;</span>+w+<span class="string">&#x27;\n&#x27;</span>)*<span class="number">3</span>)</span><br><span class="line">hello, world</span><br><span class="line">hello, world</span><br><span class="line">hello, world</span><br><span class="line">  </span><br></pre></td></tr></table></figure><h2 id="索引、切片-‘-’"><a href="#索引、切片-‘-’" class="headerlink" title="索引、切片 ‘[]’"></a>索引、切片 ‘[]’</h2><p>关于 <code>索引</code> 和 <code>切片</code> 的特性其实对于 python 其它的容器（如：list,tuple 等）同样有效。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>h = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>w = <span class="string">&#x27;world&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;h[0]:&#x27;</span>, h[<span class="number">0</span>], <span class="string">&#x27;\t|\t&#x27;</span>, <span class="string">&#x27;w[2]:&#x27;</span>, w[<span class="number">2</span>])</span><br><span class="line">h[<span class="number">0</span>]: h     |    w[<span class="number">2</span>]: r</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;h[1:3]:&#x27;</span>, h[<span class="number">1</span>:<span class="number">3</span>], <span class="string">&#x27;\t|\t&#x27;</span>, <span class="string">&#x27;h[:3]:&#x27;</span>, h[:<span class="number">3</span>], <span class="string">&#x27;\t|\t&#x27;</span>, <span class="string">&#x27;h[3:]:&#x27;</span>, h[<span class="number">3</span>:])</span><br><span class="line">h[<span class="number">1</span>:<span class="number">3</span>]: el  |    h[:<span class="number">3</span>]: hel     |   h[<span class="number">3</span>:]: lo</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;w[-1:1]:&#x27;</span>, w[-<span class="number">1</span>:<span class="number">1</span>], <span class="string">&#x27;\t|\t&#x27;</span>, <span class="string">&#x27;w[1:-1]:&#x27;</span>, w[<span class="number">1</span>:-<span class="number">1</span>], <span class="string">&#x27;\t|\t&#x27;</span>, <span class="string">&#x27;w[-4:4]:&#x27;</span>, w[-<span class="number">4</span>:<span class="number">4</span>])</span><br><span class="line">w[-<span class="number">1</span>:<span class="number">1</span>]:    |    w[<span class="number">1</span>:-<span class="number">1</span>]: orl   |   w[-<span class="number">4</span>:<span class="number">4</span>]: orl</span><br></pre></td></tr></table></figure><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><p>在 python3 中，不再支持 cmp 函数。只能使用 operator 模块的函数：</p><table><thead><tr><th align="center">operator</th><th align="center">等效于传统比较运算符</th></tr></thead><tbody><tr><td align="center">operator.lt(a,b)</td><td align="center">a &lt; b</td></tr><tr><td align="center">operator.le(a,b)</td><td align="center">a &lt;= b</td></tr><tr><td align="center">operator.eq(a,b)</td><td align="center">a == b</td></tr><tr><td align="center">operator.nq(a,b)</td><td align="center">a != b</td></tr><tr><td align="center">operator.ge(a,b)</td><td align="center">a &gt;= b</td></tr><tr><td align="center">operator.gt(a,b)</td><td align="center">a &gt; b</td></tr></tbody></table><h1 id="常用内置函数"><a href="#常用内置函数" class="headerlink" title="常用内置函数"></a>常用内置函数</h1><h2 id="分割"><a href="#分割" class="headerlink" title="分割"></a>分割</h2><h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><pre><code>split(sep=None, maxsplit=-1)</code></pre><p>其中，<code>sep</code> 是分隔符，默认为空格；<code>maxsplit</code> 是最大分割次数，默认无限次（割完所有分隔符为止）。</p><pre><code>split(sep=None, maxsplit=-1)[n]</code></pre><p>选取第 $n+1$ 个分片。</p><h3 id="re-split"><a href="#re-split" class="headerlink" title="re.split"></a>re.split</h3><pre><code>import rere.split(sep, str)</code></pre><p>其中，sep 是分隔符，可以是正则表达式，str 为待分割字符串。<br><code>re.split</code> 同样支持取第 $n+1$ 个分片的写法。</p><pre><code>import rere.split(sep, str)[n]</code></pre><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>S=<span class="string">&#x27;Never say   Never&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(S.split(<span class="string">&#x27; &#x27;</span>)) <span class="comment"># 使用空格作为分割符</span></span><br><span class="line">[<span class="string">&#x27;Never&#x27;</span>, <span class="string">&#x27;say&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;Never&#x27;</span>] <span class="comment"># 无法分割多个空格</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re <span class="comment"># 使用正则表达式</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(re.split(<span class="string">r&#x27;[ ]+&#x27;</span>, S)) <span class="comment"># 可以分割多个空格</span></span><br><span class="line">[<span class="string">&#x27;Never&#x27;</span>, <span class="string">&#x27;say&#x27;</span>, <span class="string">&#x27;Never&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(re.split(<span class="string">r&#x27;[\s,;]+&#x27;</span>, <span class="string">&#x27;Never,; Say,,;,, Never&#x27;</span>)) <span class="comment"># \s 匹配空格字符</span></span><br><span class="line">[<span class="string">&#x27;Never&#x27;</span>, <span class="string">&#x27;Say&#x27;</span>, <span class="string">&#x27;Never&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(re.split(<span class="string">r&#x27;[ ]+&#x27;</span>, S)[<span class="number">2</span>]) <span class="comment"># 选取第 3 个分片</span></span><br><span class="line">Never</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(S.split(<span class="string">&#x27; &#x27;</span>, <span class="number">1</span>)) <span class="comment"># 分割一次</span></span><br><span class="line">[<span class="string">&#x27;Never&#x27;</span>, <span class="string">&#x27;say   Never&#x27;</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;python 字符串可由 &lt;code&gt;单引号&amp;#39;&lt;/code&gt; 或 &lt;code&gt;双引号&amp;quot;&lt;/code&gt; 括起来，二者无区别；引号可用 &lt;code&gt;反斜杠\&lt;/code&gt; 转义&lt;br&gt;在引号前加一个 &lt;code&gt;r&lt;/code&gt; 可以使得引号中的字符保留原义&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;\some\name&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\some&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ame&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;r&amp;#x27;\some\name&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\some\name&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;字符串运算符&quot;&gt;&lt;a href=&quot;#字符串运算符&quot; class=&quot;headerlink&quot; title=&quot;字符串运算符&quot;&gt;&lt;/a&gt;字符串运算符&lt;/h1&gt;</summary>
    
    
    
    
    <category term="python" scheme="http://littleclown.github.io/tags/python/"/>
    
    <category term="字符串" scheme="http://littleclown.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="技术" scheme="http://littleclown.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>数论基础之离散对数</title>
    <link href="http://littleclown.github.io/study/math/number-theory/modular-arithmetic/discrete-logarithm/"/>
    <id>http://littleclown.github.io/study/math/number-theory/modular-arithmetic/discrete-logarithm/</id>
    <published>2016-05-22T04:14:05.000Z</published>
    <updated>2019-01-03T02:22:28.751Z</updated>
    
    <content type="html"><![CDATA[<h1 id="离散对数初步"><a href="#离散对数初步" class="headerlink" title="离散对数初步"></a>离散对数初步</h1><p><span id="0"> </span></p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>求解 $0\leqslant X &lt; C$ 使得 $\displaystyle X^A \equiv B\hskip -1em \mod C$ 成立。<br>其中，$C$ 为素数。</p><span id="more"></span><h2 id="问题简析"><a href="#问题简析" class="headerlink" title="问题简析"></a>问题简析</h2><p>由于 $C$ 是素数，所以必有 <em><strong><a href="http://littleclown.github.io/2016/05/10/Study-Math-Mod-Euler/">原根</a></strong></em> $g$。<br>用 <em><strong><a href="http://littleclown.github.io/2016/05/04/Study-Math-Mod-CRT/#Baby-Step-Gaint-Step">Baby Step Gaint Step</a></strong></em> 算法先求出 $\displaystyle g^t \equiv B\hskip -1em\mod C$ 的解 $t$。<br>令 $\displaystyle X=g^s$，由于 $\displaystyle g^{s\cdot A}=(g^s)^A=X^A\equiv B\hskip -1em\mod C\equiv g^t\hskip -1em\mod C$，<br>根据 ***<a href="http://littleclown.github.io/2016/05/10/Study-Math-Mod-Euler/#%E6%95%B0%E8%AE%BA%E6%AC%A7%E6%8B%89%E5%AE%9A%E7%90%86">数论欧拉定理</a>***，有 $\displaystyle g^{\varphi(C)}\equiv 1\hskip -1em\mod C$；<br>所以可以用 <em><strong><a href="http://littleclown.github.io/2016/05/04/Study-Math-Mod-CRT/#%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95">扩展欧几里得算法</a></strong></em> 求出 $\displaystyle s\cdot A\equiv t\hskip -1em\mod \varphi(C)$ 的通解 $\displaystyle s=s_0+k\cdot\frac{\varphi(C)}{\gcd\big(\varphi(C),A\big)}$。<br>再由快速幂求出 $\displaystyle X=g^s=g^{s_0+k\cdot\frac{\varphi(C)}{\gcd\big(\varphi(C),A\big)}}$。<br>至此，问题圆满解决。</p><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>Baby Step Gaint Step 算法的复杂度是 $O(\sqrt{C})$ 的，一共执行一次；<br>扩展欧几里得算法是 $O(\log C)$ 的，一共执行一次；<br>快速幂是 $O(\log C)$ 的，一共要执行 $\displaystyle \gcd\big(\varphi(C),A\big)$ 次，<br>所以时间复杂度为 $O(\sqrt{C}+\log C+\gcd\big(\varphi(C),A\big)\cdot \log C)$。<br>空间复杂度与 Baby Step Gaint Step 空间复杂度同阶。</p><h2 id="问题扩展"><a href="#问题扩展" class="headerlink" title="问题扩展"></a>问题扩展</h2><p>$C$ 是合数呢？</p><h1 id="离散对数进阶"><a href="#离散对数进阶" class="headerlink" title="离散对数进阶"></a>离散对数进阶</h1><h2 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h2><p>求解 $0\leqslant X &lt; C$ 使得 $\displaystyle X^A \equiv B\hskip -1em \mod C$ 成立。<br>其中，$C$ 为素数，不保证 $\gcd(X,C) = 1$。</p><h2 id="问题简析-1"><a href="#问题简析-1" class="headerlink" title="问题简析"></a>问题简析</h2><p>不妨假设 $\displaystyle C=p_1^{k_1}p_2^{k_2}\cdots p_s^{k_s}$。<br>令 $C_i=p_i^{k_i},~1\leqslant i\leqslant s$。</p><p>先考虑如何求 $\displaystyle X_i^A\equiv B\hskip -1em\mod C_i$ 的解。<br>先考虑 $C_i\mid B$ 的情况</p><hr><p>因为 $C_i\mid X_i^A$ 的充要条件为：$X_i^A=p_i^{k_i+\theta}$ 且 $0\leqslant \theta$；或 $X_i=0$。<br>所以，通解为：$\displaystyle X_i=p_i^{\left\lceil \frac{p_i}{A} \right\rceil+\theta}$ 且 $0\leqslant \theta$；或 $X_i=0$。</p><p>再考虑 $C_i\nmid B$ 的情况</p><hr><ol><li>若 $2 \mid C_i$：<br>由于 $C_i=2^{k_i}$ 当 $k_i\geqslant 3$ 时不存原根，所以离散对数的方法失效；<br>由于本人能力有限，未能提供好的方法，目前只能暴力；<br>如有能力做到 $O(\sqrt{C_i})$ 以下复杂度的朋友，还望不吝赐教。</li><li>若 $2 \nmid C_i$：<br>由于 $C_i=p_i^{k_i}$，所以必有原根 $g_i$；<br>再由 <em><strong><a href="http://littleclown.github.io/2016/05/04/Study-Math-Mod-CRT/#Extend-Baby-Step-Gaint-Step">扩展 Baby Step Gaint Step</a></strong></em> 算法解方程 $\displaystyle g_i^{t_i}\equiv B\hskip -1em\mod C_i$；<br>剩下的问题可以套用 <em><strong><a href="#0">离散对数初步</a></strong></em> 解决。</li></ol><p>回到原问题</p><hr><p><span id="1">【定理 1】</span> 若 $\displaystyle X^A\equiv B\hskip -1em\mod C$ 成立，则 $\displaystyle (X+C)^A\equiv B\hskip -1em\mod C$ 成立。<br>由二项式展开即可得证，证明略。</p><p>所以，接下来，我们仅需解方程组：<br>\begin{align}<br>  X &amp;\equiv X_1\hskip -1em\mod C_1 \<br>  X &amp;\equiv X_2\hskip -1em\mod C_2 \<br>  &amp;\cdots \<br>  X &amp;\equiv X_s\hskip -1em\mod C_s<br>\end{align}</p><p>由于 $C_i,C_j$ 两两互质，可由 <em><strong><a href="http://littleclown.github.io/2016/05/04/Study-Math-Mod-CRT/#%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86">中国剩余定理</a></strong></em> 求出 $X$。<br>至此，问题还算圆满解决。</p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><table><thead><tr><th align="center">problems</th><th align="center">categories</th><th align="center">solution</th></tr></thead><tbody><tr><td align="center"><em><strong><a href="http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1038">51Nod/X^A Mod P</a></strong></em></td><td align="center">离散对数初步</td><td align="center"><em><strong><a href="51nod-1038.cpp">Code</a></strong></em></td></tr><tr><td align="center"><em><strong><a href="http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1123">51Nod/X^A Mod B</a></strong></em></td><td align="center">离散对数进阶</td><td align="center"><em><strong><a href="51nod-1123.cpp">Code</a></strong></em></td></tr></tbody></table><h1 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h1><p>鉴于本人能力有限，有误之处还望指正。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;离散对数初步&quot;&gt;&lt;a href=&quot;#离散对数初步&quot; class=&quot;headerlink&quot; title=&quot;离散对数初步&quot;&gt;&lt;/a&gt;离散对数初步&lt;/h1&gt;&lt;p&gt;&lt;span id=&quot;0&quot;&gt; &lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;求解 $0\leqslant X &amp;lt; C$ 使得 $\displaystyle X^A \equiv B\hskip -1em \mod C$ 成立。&lt;br&gt;其中，$C$ 为素数。&lt;/p&gt;</summary>
    
    
    
    
    <category term="数论" scheme="http://littleclown.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
    <category term="扩展欧几里得" scheme="http://littleclown.github.io/tags/%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97/"/>
    
    <category term="中国剩余定理" scheme="http://littleclown.github.io/tags/%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/"/>
    
    <category term="Baby Step Gaint Step" scheme="http://littleclown.github.io/tags/Baby-Step-Gaint-Step/"/>
    
    <category term="原根" scheme="http://littleclown.github.io/tags/%E5%8E%9F%E6%A0%B9/"/>
    
  </entry>
  
  <entry>
    <title>数论基础之原根</title>
    <link href="http://littleclown.github.io/study/math/number-theory/modular-arithmetic/primitive-root/"/>
    <id>http://littleclown.github.io/study/math/number-theory/modular-arithmetic/primitive-root/</id>
    <published>2016-05-16T04:11:55.000Z</published>
    <updated>2019-01-03T02:22:28.772Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是原根"><a href="#什么是原根" class="headerlink" title="什么是原根"></a>什么是原根</h1><p>对于正整数 $N$，如果正整数 $g$ 满足 $\gcd(g,N)=1$ 且 $\big\lbrace g^0,g^1,\cdots,g^{\varphi(N)-1}\big\rbrace$ 两两模 $N$ 不同余，则称 $g$ 为 $N$ 的一个原根。</p><p>由于：$\displaystyle \gcd(A,B)=1 <del>\Leftrightarrow</del> \gcd(A\hskip -1em\mod B,B)=1$。<br>所以，$\big\lbrace g^0,g^1,\cdots,g^{\varphi(N)-1}\big\rbrace$ 构成 $N$ 的一个既约剩余系。</p><h2 id="阶"><a href="#阶" class="headerlink" title="阶"></a>阶</h2><p>如果正整数 $X$ 和 $N$ 互质，且 $r$ 为使得 $\displaystyle X^r\equiv 1\hskip -1em\mod N$ 的最小正整数，<br>则称 $r$ 为 $X$ 模 $N$ 的阶，记做 $\displaystyle \delta_N(X)=r$。</p><p>所以，原根的定义也可以描述为：$X$ 是模 $N$ 的一个原根的充要条件为 $\varphi(N)=\delta_N(X)$。</p><span id="more"></span><h1 id="如何求原根"><a href="#如何求原根" class="headerlink" title="如何求原根"></a>如何求原根</h1><hr><p><span id="p1">【性质 1】</span> $r \mid \varphi(N)$<br>$\hskip 1em$【证】<br>$\hskip 3em$ 由定义可知，$\varphi(N) \geqslant \delta_N(X)=r$；不妨设 $\varphi(N)=k\cdot r+t$，其中 $0\leqslant t &lt; r$。<br>$\hskip 3em$ 因为 $\displaystyle X^r\equiv 1\hskip -1em\mod N$，所以，$\displaystyle X^t\equiv X^{k\cdot r+t}\equiv X^{\varphi(N)}\equiv 1\hskip -1em\mod N$；<br>$\hskip 3em$ 由于，$\displaystyle \delta_N(X)=r$；所以，必有 $t=0$。<br>$\hskip 3em$ 故 $r \mid \varphi(N)$。<br>$\hskip 1em$【证毕】</p><hr><h2 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h2><p>据说只要枚举 $X$ 是否 $N$ 的原根即可 = =<br>通过<a href="#p1">【性质 1】</a>，我们可以简单地通过检查所有的 $n\mid \varphi(N), n\neq \varphi(N)$，是否都有 $\displaystyle X^n\not\equiv 1\hskip -1em\mod N$ 来判断 $X$ 是否为模 $N$ 的一个原根。<br>进一步地，如果 $\varphi(N)=p_1^{k_1}p_2^{k_2}\cdots p_s^{k_s}$，我们仅需检查 $\displaystyle n=\frac{\varphi(N)}{p_i},1\leqslant i\leqslant s$ 就够了。<br>原因很简单，如果 $\forall i$ 满足 $1\leqslant i\leqslant s$ 都有 $0\leqslant a_i\leqslant k_i$ 成立，且 $\exists j$ 满足 $1\leqslant j\leqslant s$ 使得 $0\leqslant a_j &lt; k_j$ 成立；<br>必有 $\displaystyle p_1^{a_1}p_2^{a_2}\cdots p_s^{a_s} \mid \frac{\varphi(N)}{p_j}$ 成立。所以，若 $\displaystyle X^{p_1^{a_1}p_2^{a_2}\cdots p_s^{a_s}}\equiv 1\hskip -1em\mod N$，那么 $\displaystyle X^{\frac{\varphi(N)}{p_j}}\equiv 1\hskip -1em\mod N$ 也会成立。</p><h2 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetFac</span><span class="params">(<span class="keyword">int</span> N, vector&lt;<span class="keyword">int</span>&gt;&amp; fac)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sm = <span class="built_in">ceil</span>(<span class="built_in">sqrt</span>(<span class="number">1.0</span>*N));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i &lt;= sm; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>( N%i == <span class="number">0</span> ) &#123;</span><br><span class="line">            fac.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="keyword">while</span>( N%i == <span class="number">0</span> ) N/=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>( N &gt; <span class="number">1</span> ) fac.<span class="built_in">push_back</span>(N);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetRoot</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; fac;</span><br><span class="line">    <span class="keyword">int</span> phin = <span class="built_in">phi</span>(N);        <span class="comment">// phi(N) 返回 N 的欧拉函数值，实现略</span></span><br><span class="line">    <span class="built_in">GetFac</span>(phin, fac);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; fac.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        fac[i] = phin/fac[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> g=<span class="number">2</span>; ; ++g) &#123;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; fac.<span class="built_in">size</span>(); ++i)</span><br><span class="line">            <span class="keyword">if</span>( <span class="built_in">ModPower</span>(g, fac[i], N) == <span class="number">1</span> ) &#123; <span class="comment">// ModPower 返回 g^&#123;fac[i]&#125;%N，实现略</span></span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>( flag ) <span class="keyword">return</span> g;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="哪些数有原根"><a href="#哪些数有原根" class="headerlink" title="哪些数有原根"></a>哪些数有原根</h1><p>【定理】 $N$ 有原根的充要条件是 $N=2,4,p^k,2\times p^k$。其中， $p$ 为素数。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;什么是原根&quot;&gt;&lt;a href=&quot;#什么是原根&quot; class=&quot;headerlink&quot; title=&quot;什么是原根&quot;&gt;&lt;/a&gt;什么是原根&lt;/h1&gt;&lt;p&gt;对于正整数 $N$，如果正整数 $g$ 满足 $\gcd(g,N)=1$ 且 $\big\lbrace g^0,g^1,\cdots,g^{\varphi(N)-1}\big\rbrace$ 两两模 $N$ 不同余，则称 $g$ 为 $N$ 的一个原根。&lt;/p&gt;
&lt;p&gt;由于：$\displaystyle \gcd(A,B)=1 &lt;del&gt;\Leftrightarrow&lt;/del&gt; \gcd(A\hskip -1em\mod B,B)=1$。&lt;br&gt;所以，$\big\lbrace g^0,g^1,\cdots,g^{\varphi(N)-1}\big\rbrace$ 构成 $N$ 的一个既约剩余系。&lt;/p&gt;
&lt;h2 id=&quot;阶&quot;&gt;&lt;a href=&quot;#阶&quot; class=&quot;headerlink&quot; title=&quot;阶&quot;&gt;&lt;/a&gt;阶&lt;/h2&gt;&lt;p&gt;如果正整数 $X$ 和 $N$ 互质，且 $r$ 为使得 $\displaystyle X^r\equiv 1\hskip -1em\mod N$ 的最小正整数，&lt;br&gt;则称 $r$ 为 $X$ 模 $N$ 的阶，记做 $\displaystyle \delta_N(X)=r$。&lt;/p&gt;
&lt;p&gt;所以，原根的定义也可以描述为：$X$ 是模 $N$ 的一个原根的充要条件为 $\varphi(N)=\delta_N(X)$。&lt;/p&gt;</summary>
    
    
    
    
    <category term="数论" scheme="http://littleclown.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
    <category term="原根" scheme="http://littleclown.github.io/tags/%E5%8E%9F%E6%A0%B9/"/>
    
  </entry>
  
  <entry>
    <title>数论基础之欧拉函数</title>
    <link href="http://littleclown.github.io/study/math/number-theory/modular-arithmetic/Euler/"/>
    <id>http://littleclown.github.io/study/math/number-theory/modular-arithmetic/Euler/</id>
    <published>2016-05-10T04:21:01.000Z</published>
    <updated>2019-01-03T02:22:28.761Z</updated>
    
    <content type="html"><![CDATA[<p>今天学习一些欧拉函数的性质，以及重要的<strong>数论欧拉定理</strong>，当 $a$ 和 $N$ 互质时，有：<br>$$ a^{\phi(N)} \equiv 1\hskip -.6em \mod N$$<br>以及今天主要讨论的<strong>广义欧拉定理</strong>，当 $a$ 和 $N$ 不互质时，有：<br>$$<br>a^b \equiv<br>\left\lbrace\begin{aligned}<br>  &amp;a^b \hskip -.6em\mod N, &amp; 0\leqslant b &lt; \varphi(N) \<br>  &amp;a^{\big(b\hskip -.6em\mod \varphi(N)\big) + \varphi(N)} \hskip -.6em \mod N, &amp;b \geqslant \varphi(N)<br>\end{aligned}\right.<br>$$</p><span id="more"></span><h1 id="欧拉函数-varphi"><a href="#欧拉函数-varphi" class="headerlink" title="欧拉函数 $\varphi$"></a>欧拉函数 $\varphi$</h1><p>$\varphi(N)$ 等于 $1,2,\cdots,N-1$ 中与 $N$ 互质的数的个数。</p><h2 id="欧拉函数的一些性质"><a href="#欧拉函数的一些性质" class="headerlink" title="欧拉函数的一些性质"></a>欧拉函数的一些性质</h2><p><span id="p1">【性质 1】</span> 若 $\displaystyle N=p_1^{k_1}p_2^{k_2}\cdots p_s^{k_s}$，则 $\displaystyle \varphi(N)=N\cdot\left(1-\frac{1}{p_1}\right)\cdot\left(1-\frac{1}{p_2}\right)\cdots\left(1-\frac{1}{p_s}\right)$<br>$\hskip 2em$ 证明见 <em><strong><a href="http://littleclown.github.io/2016/05/06/Study-Math-PrimeBase/#%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0">模方程基础之筛法</a></strong></em><br><span id="p2">【性质 2】</span> 若 $X$ 和 $Y$ 是互质的两个正整数，则：$\displaystyle\varphi(X\cdot Y)=\varphi(X)\cdot \varphi(Y)$。</p><h1 id="同余类与剩余系"><a href="#同余类与剩余系" class="headerlink" title="同余类与剩余系"></a>同余类与剩余系</h1><p>如果 $a \equiv b\hskip -.6em \mod N$，则成 $a, b$ 模 $N$ 同余。<br>特别地，$\big\lbrace a-kN, a-kN+N, \cdots, a, a+N, \cdots, a+kN \big\rbrace$ 构成一个模 $N$ 的<strong>同余类</strong>。<br>如果 $\big\lbrace a_1, a_2, \cdots, a_N\big\rbrace$ 两两模 $N$ 不同余，则称其为模 $N$ 的一组<strong>完全剩余系</strong>。<br>如果 $\big\lbrace a_1, a_2, \cdots, a_{\varphi(N)}\big\rbrace$ 两两模 $N$ 不同余且均和 $N$ 互质，则称其为模 $N$ 的一组<strong>既约剩余系</strong>。</p><hr><p><span id="1">【定理 1】</span>如果 $\gcd(\lambda,N)=1$ 且 $\big\lbrace a_1, a_2, \cdots, a_{\varphi(N)}\big\rbrace$ 是一组模 $N$ 的既约剩余系，<br>$\hskip 3em$ 则 $\big\lbrace \lambda\cdot a_1, \lambda\cdot a_2, \cdots, \lambda\cdot a_{\varphi(N)}\big\rbrace$  也是一组模 $N$ 的既约剩余系。<br>$\hskip 1em$ 【证】<br>$\hskip 3em$ 因为 $\gcd(\lambda,N)=1$，且由 $\big\lbrace a_1, a_2, \cdots, a_{\varphi(N)}\big\rbrace$ 构成模 $N$ 的既约剩余系，有：$\gcd(a_i, N)=1$。<br>$\hskip 3em$ 进而有， $\gcd(\lambda\cdot a_i, N)=1$。<br>$\hskip 3em$ 若 $\lambda\cdot a_i \equiv \lambda\cdot a_j\hskip -.6em \mod N$，则 $\lambda\cdot(a_i -a_j) \equiv 0 \hskip -.6em \mod N$，<br>$\hskip 3em$ 即 $\lambda \equiv 0\hskip -.6em \mod N$ 或 $(a_i-a_j) \equiv 0\hskip -.6em \mod N$。但这显然是不可能的。<br>$\hskip 3em$ 故有，$\lambda\cdot a_1, \lambda\cdot a_2, \cdots, \lambda\cdot a_{\varphi(N)}$ 两两模 $N$ 不同余。<br>$\hskip 3em$ 这就证明了 $\big\lbrace \lambda\cdot a_1, \lambda\cdot a_2, \cdots, \lambda\cdot a_{\varphi(N)}\big\rbrace$  也是一组模 $N$ 的既约剩余系。<br>$\hskip 1em$ 【证毕】</p><h1 id="数论欧拉定理"><a href="#数论欧拉定理" class="headerlink" title="数论欧拉定理"></a>数论欧拉定理</h1><p>如果 $\gcd(\lambda, N)=1$，那么 $\lambda^{\varphi(N)}\equiv 1 \hskip -.6em\mod N$。<br>这个定理被称为数论欧拉定理（因为欧拉在很多领域有欧拉定理= =，所以加前缀以区分）。</p><hr><p>在证明数论欧拉定理之前，先看这个定理。<br><span id="2">【定理 2】</span>如果 $\displaystyle ca \equiv cb\hskip -1em\mod N$，那么有 $\displaystyle a\equiv b\hskip -1em\mod\frac{N}{\gcd(c,N)}$。<br>$\hskip 1em$ 【证】<br>$\hskip 3em$  因为 $\displaystyle ca \equiv cb\hskip -1em\mod N$，所以有 $\displaystyle N\mid c\cdot(a-b)$，<br>$\hskip 3em$  又因为 $\displaystyle \gcd\left(\frac{N}{\gcd(c,N)},\frac{c}{\gcd(c,N)}\right)=1$，所以必有 $\displaystyle \frac{N}{\gcd(c,N)} \big|~ a-b$。<br>$\hskip 3em$  所以，$\displaystyle a\equiv b\hskip -1em\mod\frac{N}{\gcd(c,N)}$<br>$\hskip 1em$ 【证毕】</p><hr><p><span id="-1">【欧拉定理】</span><br>$\hskip 1em$【证】<br>$\hskip 3em$ 如果 $\big\lbrace a_1, a_2, \cdots, a_{\varphi(N)}\big\rbrace$ 是一组模 $N$ 的既约剩余系，<br>$\hskip 3em$ 由<a href="#1">【定理 1】</a> 可知，$\big\lbrace \lambda\cdot a_1, \lambda\cdot a_2, \cdots, \lambda\cdot a_{\varphi(N)}\big\rbrace$  也是一组模 $N$ 的既约剩余系。<br>$\hskip 3em$ 所以，$\quad \displaystyle \prod_{i=1}^{\varphi(N)} (a_i \hskip -1em\mod N) \equiv \prod_{i=1}^{\varphi(N)} (\lambda\cdot a_i \hskip -1em\mod N)$<br>$\hskip 3em$ 即，  $\quad \displaystyle \prod_{i=1}^{\varphi(N)} (a_i \hskip -1em\mod N) \equiv \lambda^{\varphi(N)}\prod_{i=1}^{\varphi(N)} (a_i \hskip -1em\mod N)$<br>$\hskip 3em$ 又因为，$\quad \displaystyle \gcd\left(\prod_{i=1}^{\varphi(N)} (a_i\hskip -1em\mod N), <del>N\right)=1$ 且 $\gcd(\lambda^{\varphi(N)},</del>N)=1$<br>$\hskip 3em$ 所以由<a href="#2">【定理 2】</a>，$\quad \displaystyle \lambda^{\varphi(N)} \equiv 1\hskip -1em\mod N$<br>$\hskip 1em$【证毕】</p><hr><p>如果 $p$ 是一个素数，那么有 $\varphi(p)=p-1$，且：</p><ol><li>如果 $\gcd(\lambda, p)=1$，由欧拉定理，有：$\displaystyle \lambda^p=\lambda^{\varphi(p)+1}\equiv 1\cdot \lambda\hskip -1em\mod p\equiv \lambda\hskip -1em\mod p$。</li><li>如果 $\gcd(\lambda, p)\neq 1$，因为 $p$ 是一个素数，则必有 $\displaystyle\gcd(\lambda, p)=p$，所以：$\displaystyle \lambda^p\equiv 0\hskip -1em\mod p\equiv \lambda\hskip -1em\mod p$。</li></ol><p>综上，对于任意整数 $\lambda$ 都有 $\displaystyle \lambda^p\equiv \lambda\hskip -1em\mod p$。<br>这就是著名的费马小定理。</p><h1 id="广义欧拉定理"><a href="#广义欧拉定理" class="headerlink" title="广义欧拉定理"></a>广义欧拉定理</h1><p>如果 $\gcd(\lambda, N)\neq 1$ 呢？</p><p>首先，由于 $\displaystyle \lambda^i\hskip -1em\mod N\in[0,N-1]$，由鸽巢原理可知，必存在 $i(0\leqslant i\leqslant N-1)$ 使得 $\displaystyle \lambda^N\equiv \lambda^i\hskip -1em\mod N$。<br>可能你会想，那岂不是 $\displaystyle \lambda^{N-i}\equiv 1\hskip -1em\mod N$？<br>但事实并不是这样的，这样想的读者忽略了 $\gcd(\lambda, N)\neq 1$ 。<br>由于 $\displaystyle N \big|~ \lambda^i\cdot \left(\lambda^{N-i}-1 \right)$，不难有：$\displaystyle \frac{N}{\gcd(N,\lambda^i)}\big|~\left(\lambda^{N-i}-1\right)$，<br>所以只能得出 $\displaystyle \lambda^{N-i}\equiv 1\hskip -1em\mod \frac{N}{\gcd(N,\lambda^i)}$。</p><p>事实上，由扩展欧几里得定理可知，方程 $\lambda\cdot x+N\cdot y=1\neq \gcd(\lambda,N)$ 无解，<br>那么就不存在 $\lambda$ 在模 $N$ 意义下的逆元。<br>进而推知，不存在整数 $b$ 使得 $\displaystyle \lambda^{b+1}\equiv 1\hskip -1em\mod N$，<br>因为如果存在，那 $\lambda^b$ 就是 $\lambda$ 模 $N$ 意义下的逆元了，与前面的结论矛盾。</p><p>尽管如此，由鸽巢原理的分析，我们知道存在一个最小的 $L$ 和一个足够大的整数 $\delta$，使得当 $x\geqslant \delta$ 时，有：$$\lambda^{L+x}\equiv\lambda^x\hskip -1em\mod N$$<br>接下来，我们将证明当 $N=p_1^{k_1}p_2^{k_2}\cdots p_{s}^{k_s}$ 时，有：$\delta=\max\lbrace k_i\rbrace,(1\leqslant i\leqslant s)$，以及 $L \mid \varphi(N)$。</p><hr><p>不妨假设 $N=p^k\cdot X$，其中，$k \geqslant 1$ 且 $\gcd(p^k, X)=1$。<br><span id="3">【定理 3】</span> $\displaystyle \varphi(X) \mid \varphi(N)$<br>$\hskip 1em$ 【证】<br>$\hskip 3em$ 因为 $\gcd(p^k,X)=1$，由<a href="#p2">【性质 2】</a>可知：$\varphi(N)=\varphi(X)\cdot\varphi(p^k)$。<br>$\hskip 3em$ 所以，$\varphi(X) \mid \varphi(N)$<br>$\hskip 1em$ 【证毕】</p><hr><p><span id="4">【定理 4】</span> $\displaystyle p^{\varphi(N)+k} \equiv p^k\hskip -1em\mod N$<br>$\hskip 1em$ 【证】<br>$\hskip 3em$ 由于 $\gcd(p,X)=1$，根据欧拉定理，有 $\displaystyle p^{\varphi(X)}\equiv 1\hskip -1em\mod X$<br>$\hskip 3em$ 所以，存在一个整数 $t$ 使得 $\displaystyle p^{\varphi(X)}=tX+1$<br>$\hskip 3em$ 于是， $\displaystyle p^k\cdot p^{\varphi(X)}=tX\cdot p^k+p^k$， 即 $\displaystyle p^{\varphi(X)+k}=tN+p^k\equiv p^k\hskip -1em\mod N$<br>$\hskip 3em$ 不难得出：对于任意整数 $s$ 都满足 $\displaystyle p^{s\cdot\varphi(X)+k} \equiv p^k\hskip -1em\mod N$<br>$\hskip 3em$ 又由<a href="#3">【定理 3】</a>可知，当 $\displaystyle s=\frac{\varphi(N)}{\varphi(X)}$ 时，有：$\displaystyle p^{\varphi(N)+k}\equiv p^k\hskip -1em\mod N$<br>$\hskip 1em$ 【证毕】</p><p><span id="-2">【推论】</span>对于任意非零整数 $s$，都有 $\displaystyle (p^s)^{\varphi(N)+k} \equiv (p^s)^k\hskip -1em\mod N$<br>$\hskip 1em$ 【证】<br>$\hskip 3em$  由<a href="#4">【定理 4】</a>可知， $\displaystyle (p^s)^{\varphi(N)+k}=p^{s\cdot\varphi(N)+s\cdot k}\equiv p^{s\cdot k}\hskip -1em\mod N\equiv (p^s)^k\hskip -1em\mod N$<br>$\hskip 1em$ 【证毕】</p><hr><p><span id="5">【定理 5】</span> 若 $c=a\cdot b$ 满足 $\displaystyle a^{L+x}\equiv a^x\hskip -1em\mod N$ 且 $\displaystyle b^{L+x}\equiv b^x\hskip -1em\mod N$；那么，$\displaystyle c^{L+x}\equiv c^x\hskip -1em\mod N$<br>$\hskip 1em$ 【证】<br>$\hskip 3em$ $\displaystyle c^{L+x}=a^{L+x}\cdot b^{L+x}\equiv a^x\cdot b^x\hskip -1em\mod N\equiv c^x\hskip -1em\mod N$<br>$\hskip 1em$ 【证毕】</p><hr><p><span id="6">【定理 6】</span> 若 $N=p_1^{k_1}p_2^{k_2}\cdots p_s^{k_s}$，对于任意整数 $r$ 满足 $r\geqslant \max\lbrace k_i \rbrace,(1\leqslant i\leqslant s)$<br>$\hskip 3em$ 若 $\gcd(\lambda,N)\neq 1$， 则 $\displaystyle \lambda^{r+\varphi(N)}\equiv \lambda^r\hskip -1em\mod N$ 成立。<br>$\hskip 1em$ 【证】<br>$\hskip 3em$  将 $\lambda$ 唯一分解定理得，$\displaystyle \lambda=q_1^{a_1}\cdot q_2^{a_2}\cdots q_t^{a_t}$<br>$\hskip 3em$  若 $\gcd(q_j,N)=1$，由<a href="#-1">【欧拉定理】</a>知 $\displaystyle q_j^{\varphi(N)} \equiv 1\hskip -1em\mod N$<br>$\hskip 5em$  所以，对于任意整数 $r$ 有： $\displaystyle q_j^{\varphi(N)+r}\equiv q_j^r\hskip -1em\mod N$<br>$\hskip 3em$  若 $\gcd(q_j,N)\neq 1$，不妨设 $q_j=p_i$，<br>$\hskip 5em$  由<a href="#4">【定理 4】</a>可知，当 $r \geqslant k_i$ 时，$\displaystyle q_j^{\varphi(N)+r}\equiv q_j^r\hskip -1em\mod N$ 成立<br>$\hskip 3em$<br>$\hskip 3em$  综上，不难发现，当 $r \geqslant \max\lbrace k_i \rbrace$ 时，$\displaystyle q_j^{\varphi(N)+r}\equiv q^r\hskip -1em\mod N$ 对任意 $1\leqslant j\leqslant t$ 都成立。<br>$\hskip 3em$  结合<a href="#4">【定理 4】</a>的<a href="#-2">【推论】</a>有： $\displaystyle (q_j^{a_j})^{\varphi(N)+r}\equiv (q_j^{a_j})^r\hskip -1em\mod N$ 对任意 $1\leqslant j\leqslant t$ 都成立。<br>$\hskip 3em$  结合<a href="#5">【定理 5】</a>知，当 $r \geqslant \max\lbrace a_i \rbrace$ 时，$\displaystyle \lambda^{\varphi(N)+r}=(q_1^{a_1}\cdot q_2^{a_2}\cdots q_t^{a_t})^{\varphi(N)+r}\equiv\lambda^r\hskip -1em\mod N$<br>$\hskip 1em$ 【证毕】</p><hr><p>【广义欧拉定理】 若 $N=p_1^{k_1}p_2^{k_2}\cdots p_s^{k_s}$，则无论 $a$ 和 $N$ 互质与否，当 $b \geqslant \phi(N)$ 时，都有：<br>$$a^b \equiv a^{\big(b\hskip -.6em\mod \varphi(N)\big) + \varphi(N)} \hskip -.6em \mod N$$<br>$\hskip 1em$ 【证】<br>$\hskip 3em$  当 $a$ 和 $N$ 互质时，根据<a href="#-1">【欧拉定理】</a>，结论显然成立。<br>$\hskip 3em$  当 $a$ 和 $N$ 不互质时，由于 $\varphi(N)\geqslant p_i^{k_i-1}\geqslant k_i,(1\leqslant i\leqslant s)$，<br>$\hskip 3em$  即 $\varphi(N) \geqslant \max\lbrace k_i\rbrace$，结合<a href="#6">【定理 6】</a>可知结论成立。<br>$\hskip 1em$ 【证毕】</p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><table><thead><tr><th align="center">problems</th><th align="center">categories</th><th align="center">solution</th></tr></thead><tbody><tr><td align="center"><em><strong><a href="http://acm.fzu.edu.cn/problem.php?pid=1759">FJU/Super A^B mod C</a></strong></em></td><td align="center">广义欧拉定理</td><td align="center"><em><strong><a href="FZU-1759.cpp">Code</a></strong></em></td></tr></tbody></table><h1 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h1><p>鉴于本人能力有限，有误之处还望指证。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天学习一些欧拉函数的性质，以及重要的&lt;strong&gt;数论欧拉定理&lt;/strong&gt;，当 $a$ 和 $N$ 互质时，有：&lt;br&gt;$$ a^{\phi(N)} \equiv 1\hskip -.6em \mod N$$&lt;br&gt;以及今天主要讨论的&lt;strong&gt;广义欧拉定理&lt;/strong&gt;，当 $a$ 和 $N$ 不互质时，有：&lt;br&gt;$$&lt;br&gt;a^b \equiv&lt;br&gt;\left\lbrace\begin{aligned}&lt;br&gt;  &amp;amp;a^b \hskip -.6em\mod N, &amp;amp; 0\leqslant b &amp;lt; \varphi(N) \&lt;br&gt;  &amp;amp;a^{\big(b\hskip -.6em\mod \varphi(N)\big) + \varphi(N)} \hskip -.6em \mod N, &amp;amp;b \geqslant \varphi(N)&lt;br&gt;\end{aligned}\right.&lt;br&gt;$$&lt;/p&gt;</summary>
    
    
    
    
    <category term="数论" scheme="http://littleclown.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
    <category term="欧拉函数" scheme="http://littleclown.github.io/tags/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/"/>
    
    <category term="既约剩余系" scheme="http://littleclown.github.io/tags/%E6%97%A2%E7%BA%A6%E5%89%A9%E4%BD%99%E7%B3%BB/"/>
    
  </entry>
  
</feed>
